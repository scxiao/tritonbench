; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_gdpa_bwd(ptr addrspace(1) inreg readonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg readonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, ptr addrspace(1) inreg readonly captures(none) %5, ptr addrspace(1) inreg readonly captures(none) %6, ptr addrspace(1) inreg writeonly captures(none) %7, ptr addrspace(1) inreg writeonly captures(none) %8, ptr addrspace(1) inreg writeonly captures(none) %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, float inreg %20, ptr addrspace(1) inreg readnone captures(none) %21, ptr addrspace(1) inreg readnone captures(none) %22) local_unnamed_addr #1 !dbg !7 {
  %24 = tail call i32 @llvm.amdgcn.workgroup.id.z(), !dbg !8
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %.frozen = freeze i32 %17, !dbg !10
  %26 = sdiv i32 %25, %.frozen, !dbg !10
  %27 = sext i32 %24 to i64, !dbg !11
  %28 = getelementptr i32, ptr addrspace(1) %1, i64 %27, !dbg !11
  %29 = load <1 x i32>, ptr addrspace(1) %28, align 4, !dbg !14
  %30 = getelementptr i8, ptr addrspace(1) %28, i64 4, !dbg !15
  %31 = load <1 x i32>, ptr addrspace(1) %30, align 4, !dbg !16
  %32 = extractelement <1 x i32> %31, i64 0, !dbg !17
  %33 = extractelement <1 x i32> %29, i64 0, !dbg !17
  %34 = sub i32 %32, %33, !dbg !17
  %35 = getelementptr i32, ptr addrspace(1) %3, i64 %27, !dbg !18
  %36 = load <1 x i32>, ptr addrspace(1) %35, align 4, !dbg !19
  %37 = getelementptr i8, ptr addrspace(1) %35, i64 4, !dbg !20
  %38 = load <1 x i32>, ptr addrspace(1) %37, align 4, !dbg !21
  %39 = extractelement <1 x i32> %38, i64 0, !dbg !22
  %40 = extractelement <1 x i32> %36, i64 0, !dbg !22
  %41 = sub i32 %39, %40, !dbg !22
  %42 = shl i32 %26, 7, !dbg !23
  %43 = icmp sle i32 %42, %41, !dbg !24
  %44 = icmp sle i32 %42, %34, !dbg !25
  %45 = or i1 %44, %43, !dbg !26
  br i1 %45, label %46, label %75, !dbg !27

46:                                               ; preds = %23
  %47 = extractelement <1 x i32> %36, i64 0, !dbg !19
  %48 = extractelement <1 x i32> %29, i64 0, !dbg !14
  %49 = mul i32 %26, %.frozen, !dbg !28
  %.decomposed = sub i32 %25, %49, !dbg !28
  %50 = getelementptr i32, ptr addrspace(1) %6, i64 %27, !dbg !29
  %51 = load <1 x i32>, ptr addrspace(1) %50, align 4, !dbg !30
  %52 = extractelement <1 x i32> %51, i64 0, !dbg !30
  %53 = sext i32 %.decomposed to i64, !dbg !31
  %54 = sext i32 %12 to i64, !dbg !32
  %55 = mul nsw i64 %53, %54, !dbg !32
  %56 = mul i32 %48, %10, !dbg !33
  %57 = sext i32 %56 to i64, !dbg !34
  %58 = add nsw i64 %55, %57, !dbg !34
  %59 = mul i32 %.decomposed, %13, !dbg !35
  %60 = mul i32 %47, %11, !dbg !36
  %61 = add i32 %59, %60, !dbg !37
  %62 = sext i32 %15 to i64, !dbg !38
  %63 = mul nsw i64 %53, %62, !dbg !38
  %64 = mul i32 %52, %14, !dbg !39
  %65 = sext i32 %64 to i64, !dbg !40
  %66 = getelementptr bfloat, ptr addrspace(1) %0, i64 %58, !dbg !41
  %67 = sext i32 %61 to i64, !dbg !42
  %68 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !42
  %69 = getelementptr bfloat, ptr addrspace(1) %4, i64 %67, !dbg !43
  %70 = getelementptr bfloat, ptr addrspace(1) %5, i64 %63, !dbg !44
  %71 = getelementptr bfloat, ptr addrspace(1) %70, i64 %65, !dbg !44
  %72 = getelementptr bfloat, ptr addrspace(1) %7, i64 %58, !dbg !45
  %73 = getelementptr bfloat, ptr addrspace(1) %8, i64 %67, !dbg !46
  %74 = getelementptr bfloat, ptr addrspace(1) %9, i64 %67, !dbg !47
  br label %75, !dbg !27

75:                                               ; preds = %46, %23
  %76 = phi ptr addrspace(1) [ %66, %46 ], [ %0, %23 ], !dbg !13
  %77 = phi ptr addrspace(1) [ %68, %46 ], [ %2, %23 ], !dbg !13
  %78 = phi ptr addrspace(1) [ %69, %46 ], [ %4, %23 ], !dbg !13
  %79 = phi ptr addrspace(1) [ %71, %46 ], [ %5, %23 ], !dbg !13
  %80 = phi ptr addrspace(1) [ %72, %46 ], [ %7, %23 ], !dbg !13
  %81 = phi ptr addrspace(1) [ %73, %46 ], [ %8, %23 ], !dbg !13
  %82 = phi ptr addrspace(1) [ %74, %46 ], [ %9, %23 ], !dbg !13
  %83 = icmp slt i32 %42, %41, !dbg !48
  br i1 %83, label %84, label %908, !dbg !49

84:                                               ; preds = %75
  %85 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !50
  %86 = and i32 %85, 511, !dbg !50
  %87 = and i32 %85, 15, !dbg !50
  %88 = and i32 %85, 448, !dbg !50
  %89 = lshr exact i32 %88, 2, !dbg !50
  %90 = or disjoint i32 %89, %87, !dbg !50
  %91 = lshr i32 %85, 3, !dbg !50
  %92 = and i32 %91, 63, !dbg !50
  %93 = or i32 %91, 64, !dbg !50
  %94 = or disjoint i32 %42, %90, !dbg !51
  %95 = or disjoint i32 %42, %92, !dbg !51
  %96 = or disjoint i32 %42, %93, !dbg !51
  %97 = and i32 %85, 16, !dbg !52
  %98 = and i32 %85, 32, !dbg !52
  %99 = lshr exact i32 %98, 2, !dbg !52
  %100 = or disjoint i32 %99, %97, !dbg !52
  %101 = or disjoint i32 %100, 32, !dbg !52
  %102 = shl nuw nsw i32 %85, 3, !dbg !52
  %103 = and i32 %102, 56, !dbg !52
  %104 = icmp slt i32 %94, %41, !dbg !53
  %105 = icmp slt i32 %95, %41, !dbg !53
  %106 = icmp slt i32 %96, %41, !dbg !53
  %107 = mul i32 %42, %11, !dbg !54
  %108 = mul i32 %11, %92, !dbg !54
  %109 = mul i32 %11, %93, !dbg !54
  %110 = sext i32 %107 to i64, !dbg !54
  %111 = getelementptr bfloat, ptr addrspace(1) %77, i64 %110, !dbg !54
  %112 = add i32 %108, %103, !dbg !55
  %113 = add i32 %109, %103, !dbg !55
  %114 = trunc i32 %11 to i16, !dbg !56
  %115 = and i16 %114, 16383, !dbg !56
  %116 = or disjoint i16 %115, 16384, !dbg !56
  %117 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %111, i16 %116, i32 2147483646, i32 159744), !dbg !56
  %118 = shl i32 %112, 1, !dbg !56
  %119 = select i1 %105, i32 %118, i32 -2147483648, !dbg !56
  %120 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %117, i32 %119, i32 0, i32 0), !dbg !56
  %121 = shl i32 %113, 1, !dbg !56
  %122 = select i1 %106, i32 %121, i32 -2147483648, !dbg !56
  %123 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %117, i32 %122, i32 0, i32 0), !dbg !56
  %124 = shl nuw nsw i32 %86, 4, !dbg !56
  %125 = and i32 %85, 112, !dbg !56
  %126 = xor i32 %124, %125, !dbg !56
  %127 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !56
  store <4 x i32> %120, ptr addrspace(3) %127, align 16, !dbg !56
  %128 = getelementptr inbounds nuw i8, ptr addrspace(3) %127, i32 8192, !dbg !56
  store <4 x i32> %123, ptr addrspace(3) %128, align 16, !dbg !56
  fence syncscope("workgroup") release, !dbg !56
  tail call void @llvm.amdgcn.s.barrier(), !dbg !56
  fence syncscope("workgroup") acquire, !dbg !56
  %129 = shl nuw nsw i32 %87, 7, !dbg !56
  %130 = shl nuw nsw i32 %88, 5, !dbg !56
  %131 = and i32 %85, 14, !dbg !56
  %132 = shl nuw nsw i32 %131, 3, !dbg !56
  %133 = and i32 %85, 48, !dbg !56
  %134 = or disjoint i32 %130, %132, !dbg !56
  %135 = xor i32 %134, %133, !dbg !56
  %136 = or disjoint i32 %135, %129, !dbg !56
  %137 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !56
  %138 = load <8 x bfloat>, ptr addrspace(3) %137, align 16, !dbg !56
  %139 = xor i32 %136, 64, !dbg !56
  %140 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !56
  %141 = load <8 x bfloat>, ptr addrspace(3) %140, align 16, !dbg !56
  %142 = getelementptr bfloat, ptr addrspace(1) %78, i64 %110, !dbg !57
  %143 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %142, i16 %116, i32 2147483646, i32 159744), !dbg !58
  %144 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %143, i32 %119, i32 0, i32 0), !dbg !58
  %145 = bitcast <4 x i32> %144 to <8 x bfloat>, !dbg !58
  %146 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %143, i32 %122, i32 0, i32 0), !dbg !58
  %147 = bitcast <4 x i32> %146 to <8 x bfloat>, !dbg !58
  fence syncscope("workgroup") release, !dbg !58
  tail call void @llvm.amdgcn.s.barrier(), !dbg !58
  fence syncscope("workgroup") acquire, !dbg !58
  %148 = lshr exact i32 %125, 1, !dbg !58
  %149 = xor i32 %124, %148, !dbg !58
  %150 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %149, !dbg !58
  %151 = shufflevector <8 x bfloat> %145, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  store <4 x bfloat> %151, ptr addrspace(3) %150, align 8, !dbg !58
  %152 = getelementptr inbounds nuw i8, ptr addrspace(3) %150, i32 8192, !dbg !58
  %153 = shufflevector <8 x bfloat> %147, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  store <4 x bfloat> %153, ptr addrspace(3) %152, align 8, !dbg !58
  %154 = xor i32 %149, 8, !dbg !58
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %154, !dbg !58
  %156 = shufflevector <8 x bfloat> %145, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !58
  store <4 x bfloat> %156, ptr addrspace(3) %155, align 8, !dbg !58
  %157 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8192, !dbg !58
  %158 = shufflevector <8 x bfloat> %147, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !58
  store <4 x bfloat> %158, ptr addrspace(3) %157, align 8, !dbg !58
  fence syncscope("workgroup") release, !dbg !58
  tail call void @llvm.amdgcn.s.barrier(), !dbg !58
  fence syncscope("workgroup") acquire, !dbg !58
  %159 = add i32 %34, 31, !dbg !59
  %160 = sdiv i32 %159, 32, !dbg !62
  %161 = lshr i32 %85, 4, !dbg !63
  %162 = and i32 %161, 31, !dbg !63
  %163 = icmp sgt i32 %159, 31, !dbg !64
  br i1 %163, label %.lr.ph, label %._crit_edge, !dbg !64

.lr.ph:                                           ; preds = %84
  %164 = shl i32 %14, 5, !dbg !65
  %165 = shl i32 %10, 5, !dbg !66
  %166 = mul i32 %14, %162, !dbg !67
  %167 = shl nuw nsw i32 %87, 2, !dbg !52
  %168 = add i32 %166, %167, !dbg !68
  %169 = mul i32 %10, %162, !dbg !69
  %170 = add i32 %169, %167, !dbg !70
  %171 = shl nuw nsw i32 %131, 2, !dbg !58
  %172 = or disjoint i32 %130, %171, !dbg !58
  %173 = lshr exact i32 %133, 1, !dbg !58
  %174 = xor i32 %172, %173, !dbg !58
  %175 = or disjoint i32 %174, %129, !dbg !58
  %176 = xor i32 %175, 32, !dbg !58
  %177 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %176, !dbg !58
  %178 = getelementptr inbounds nuw i8, ptr addrspace(3) %177, i32 64, !dbg !58
  %179 = load <4 x bfloat>, ptr addrspace(3) %178, align 8, !dbg !58
  %180 = load <4 x bfloat>, ptr addrspace(3) %177, align 8, !dbg !58
  %181 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %175, !dbg !58
  %182 = getelementptr inbounds nuw i8, ptr addrspace(3) %181, i32 64, !dbg !58
  %183 = load <4 x bfloat>, ptr addrspace(3) %182, align 8, !dbg !58
  %184 = load <4 x bfloat>, ptr addrspace(3) %181, align 8, !dbg !58
  %185 = icmp eq i32 %97, 0, !dbg !52
  %186 = trunc i32 %10 to i16
  %187 = and i16 %186, 16383
  %188 = or disjoint i16 %187, 16384
  %189 = shl i32 %170, 1
  %190 = shl nuw nsw i32 %86, 3
  %191 = and i32 %85, 224
  %192 = lshr exact i32 %191, 1
  %193 = xor i32 %190, %192
  %194 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %193
  %195 = shl nuw nsw i32 %87, 1
  %196 = select i1 %185, i32 0, i32 1088
  %197 = shl nuw nsw i32 %98, 6
  %198 = or disjoint i32 %196, %197
  %199 = or disjoint i32 %198, %195
  %200 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %199
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 128
  %202 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 544
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 672
  %204 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 32
  %205 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 160
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 512
  %207 = getelementptr inbounds nuw i8, ptr addrspace(3) %200, i32 640
  %208 = xor i32 %199, 272
  %209 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %208
  %210 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 128
  %211 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 544
  %212 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 672
  %213 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 32
  %214 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 160
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 512
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 640
  %217 = xor i32 %199, 64
  %218 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %217
  %219 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 128
  %220 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 544
  %221 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 672
  %222 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 32
  %223 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 160
  %224 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 512
  %225 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i32 640
  %226 = xor i32 %199, 336
  %227 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %226
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 128
  %229 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 544
  %230 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 672
  %231 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 32
  %232 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 160
  %233 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 512
  %234 = getelementptr inbounds nuw i8, ptr addrspace(3) %227, i32 640
  %235 = or disjoint i32 %129, %132
  %236 = xor i32 %235, %133
  %237 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %236
  %238 = getelementptr inbounds nuw i8, ptr addrspace(3) %237, i32 2048
  %239 = xor i32 %236, 64
  %240 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %239
  %241 = getelementptr inbounds nuw i8, ptr addrspace(3) %240, i32 2048
  %242 = trunc i32 %14 to i16
  %243 = and i16 %242, 16383
  %244 = or disjoint i16 %243, 16384
  %245 = shl i32 %168, 1
  %246 = lshr exact i32 %191, 2
  %247 = xor i32 %190, %246
  %248 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %247
  %249 = or disjoint i32 %129, %171
  %250 = xor i32 %249, %173
  %251 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %250
  %252 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i32 64
  %253 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i32 2048
  %254 = getelementptr inbounds nuw i8, ptr addrspace(3) %251, i32 2112
  %255 = xor i32 %250, 32
  %256 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %255
  %257 = getelementptr inbounds nuw i8, ptr addrspace(3) %256, i32 64
  %258 = getelementptr inbounds nuw i8, ptr addrspace(3) %256, i32 2048
  %259 = getelementptr inbounds nuw i8, ptr addrspace(3) %256, i32 2112
  %260 = shl nuw nsw i32 %85, 4
  %261 = and i32 %260, 960
  %262 = shl nuw nsw i32 %85, 2
  %263 = and i32 %262, 12
  %264 = lshr i32 %85, 1
  %265 = and i32 %264, 28
  %266 = or disjoint i32 %261, %263
  %267 = xor i32 %266, %265
  %268 = xor i32 %267, 16
  %269 = xor i32 %267, 1040
  %270 = xor i32 %267, 48
  %271 = xor i32 %267, 1072
  %272 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %267
  %273 = getelementptr inbounds nuw i8, ptr addrspace(3) %272, i32 2048
  %274 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %268
  %275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %269
  %276 = getelementptr inbounds nuw i8, ptr addrspace(3) %272, i32 64
  %277 = getelementptr inbounds nuw i8, ptr addrspace(3) %272, i32 2112
  %278 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %270
  %279 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %271
  %280 = shufflevector <4 x bfloat> %184, <4 x bfloat> %180, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %281 = shufflevector <4 x bfloat> %183, <4 x bfloat> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %282 = sext i32 %165 to i64
  %283 = sext i32 %164 to i64
  %284 = insertelement <2 x float> poison, float %20, i64 0, !dbg !71
  %285 = shufflevector <2 x float> %284, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !71
  br label %286, !dbg !64

286:                                              ; preds = %.lr.ph, %286
  %287 = phi ptr addrspace(1) [ %79, %.lr.ph ], [ %735, %286 ]
  %288 = phi ptr addrspace(1) [ %76, %.lr.ph ], [ %734, %286 ]
  %289 = phi i32 [ 0, %.lr.ph ], [ %733, %286 ]
  %290 = phi float [ 0.000000e+00, %.lr.ph ], [ %609, %286 ]
  %291 = phi float [ 0.000000e+00, %.lr.ph ], [ %610, %286 ]
  %292 = phi float [ 0.000000e+00, %.lr.ph ], [ %611, %286 ]
  %293 = phi float [ 0.000000e+00, %.lr.ph ], [ %612, %286 ]
  %294 = phi float [ 0.000000e+00, %.lr.ph ], [ %614, %286 ]
  %295 = phi float [ 0.000000e+00, %.lr.ph ], [ %615, %286 ]
  %296 = phi float [ 0.000000e+00, %.lr.ph ], [ %616, %286 ]
  %297 = phi float [ 0.000000e+00, %.lr.ph ], [ %617, %286 ]
  %298 = phi float [ 0.000000e+00, %.lr.ph ], [ %619, %286 ]
  %299 = phi float [ 0.000000e+00, %.lr.ph ], [ %620, %286 ]
  %300 = phi float [ 0.000000e+00, %.lr.ph ], [ %621, %286 ]
  %301 = phi float [ 0.000000e+00, %.lr.ph ], [ %622, %286 ]
  %302 = phi float [ 0.000000e+00, %.lr.ph ], [ %624, %286 ]
  %303 = phi float [ 0.000000e+00, %.lr.ph ], [ %625, %286 ]
  %304 = phi float [ 0.000000e+00, %.lr.ph ], [ %626, %286 ]
  %305 = phi float [ 0.000000e+00, %.lr.ph ], [ %627, %286 ]
  %306 = phi float [ 0.000000e+00, %.lr.ph ], [ %702, %286 ]
  %307 = phi float [ 0.000000e+00, %.lr.ph ], [ %703, %286 ]
  %308 = phi float [ 0.000000e+00, %.lr.ph ], [ %704, %286 ]
  %309 = phi float [ 0.000000e+00, %.lr.ph ], [ %705, %286 ]
  %310 = phi float [ 0.000000e+00, %.lr.ph ], [ %711, %286 ]
  %311 = phi float [ 0.000000e+00, %.lr.ph ], [ %712, %286 ]
  %312 = phi float [ 0.000000e+00, %.lr.ph ], [ %713, %286 ]
  %313 = phi float [ 0.000000e+00, %.lr.ph ], [ %714, %286 ]
  %314 = phi float [ 0.000000e+00, %.lr.ph ], [ %720, %286 ]
  %315 = phi float [ 0.000000e+00, %.lr.ph ], [ %721, %286 ]
  %316 = phi float [ 0.000000e+00, %.lr.ph ], [ %722, %286 ]
  %317 = phi float [ 0.000000e+00, %.lr.ph ], [ %723, %286 ]
  %318 = phi float [ 0.000000e+00, %.lr.ph ], [ %729, %286 ]
  %319 = phi float [ 0.000000e+00, %.lr.ph ], [ %730, %286 ]
  %320 = phi float [ 0.000000e+00, %.lr.ph ], [ %731, %286 ]
  %321 = phi float [ 0.000000e+00, %.lr.ph ], [ %732, %286 ]
  %322 = phi i32 [ 0, %.lr.ph ], [ %736, %286 ]
  %323 = or disjoint i32 %289, %162, !dbg !72
  %324 = icmp slt i32 %323, %34, !dbg !73
  %325 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %288, i16 %188, i32 2147483646, i32 159744), !dbg !74
  %326 = select i1 %324, i32 %189, i32 -2147483648, !dbg !74
  %327 = tail call <2 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v2i32(ptr addrspace(8) %325, i32 %326, i32 0, i32 0), !dbg !74
  fence syncscope("workgroup") release, !dbg !74
  tail call void @llvm.amdgcn.s.barrier(), !dbg !74
  fence syncscope("workgroup") acquire, !dbg !74
  store <2 x i32> %327, ptr addrspace(3) %194, align 8, !dbg !74
  fence syncscope("workgroup") release, !dbg !75
  tail call void @llvm.amdgcn.s.barrier(), !dbg !75
  fence syncscope("workgroup") acquire, !dbg !75
  %328 = load <1 x bfloat>, ptr addrspace(3) %200, align 2, !dbg !75
  %329 = load <1 x bfloat>, ptr addrspace(3) %201, align 2, !dbg !75
  %330 = load <1 x bfloat>, ptr addrspace(3) %202, align 2, !dbg !75
  %331 = shufflevector <1 x bfloat> %330, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %332 = load <1 x bfloat>, ptr addrspace(3) %203, align 2, !dbg !75
  %333 = shufflevector <1 x bfloat> %332, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %334 = load <1 x bfloat>, ptr addrspace(3) %204, align 2, !dbg !75
  %335 = load <1 x bfloat>, ptr addrspace(3) %205, align 2, !dbg !75
  %336 = load <1 x bfloat>, ptr addrspace(3) %206, align 2, !dbg !75
  %337 = shufflevector <1 x bfloat> %336, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %338 = load <1 x bfloat>, ptr addrspace(3) %207, align 2, !dbg !75
  %339 = shufflevector <1 x bfloat> %338, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %340 = load <1 x bfloat>, ptr addrspace(3) %209, align 2, !dbg !75
  %341 = shufflevector <1 x bfloat> %340, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %342 = load <1 x bfloat>, ptr addrspace(3) %210, align 2, !dbg !75
  %343 = shufflevector <1 x bfloat> %342, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %344 = load <1 x bfloat>, ptr addrspace(3) %211, align 2, !dbg !75
  %345 = shufflevector <1 x bfloat> %344, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %346 = load <1 x bfloat>, ptr addrspace(3) %212, align 2, !dbg !75
  %347 = shufflevector <1 x bfloat> %346, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %348 = load <1 x bfloat>, ptr addrspace(3) %213, align 2, !dbg !75
  %349 = shufflevector <1 x bfloat> %348, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %350 = load <1 x bfloat>, ptr addrspace(3) %214, align 2, !dbg !75
  %351 = shufflevector <1 x bfloat> %350, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %352 = load <1 x bfloat>, ptr addrspace(3) %215, align 2, !dbg !75
  %353 = shufflevector <1 x bfloat> %352, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %354 = load <1 x bfloat>, ptr addrspace(3) %216, align 2, !dbg !75
  %355 = shufflevector <1 x bfloat> %354, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %356 = load <1 x bfloat>, ptr addrspace(3) %218, align 2, !dbg !75
  %357 = load <1 x bfloat>, ptr addrspace(3) %219, align 2, !dbg !75
  %358 = load <1 x bfloat>, ptr addrspace(3) %220, align 2, !dbg !75
  %359 = shufflevector <1 x bfloat> %358, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %360 = load <1 x bfloat>, ptr addrspace(3) %221, align 2, !dbg !75
  %361 = shufflevector <1 x bfloat> %360, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %362 = load <1 x bfloat>, ptr addrspace(3) %222, align 2, !dbg !75
  %363 = load <1 x bfloat>, ptr addrspace(3) %223, align 2, !dbg !75
  %364 = load <1 x bfloat>, ptr addrspace(3) %224, align 2, !dbg !75
  %365 = shufflevector <1 x bfloat> %364, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %366 = load <1 x bfloat>, ptr addrspace(3) %225, align 2, !dbg !75
  %367 = shufflevector <1 x bfloat> %366, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %368 = load <1 x bfloat>, ptr addrspace(3) %227, align 2, !dbg !75
  %369 = shufflevector <1 x bfloat> %368, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %370 = load <1 x bfloat>, ptr addrspace(3) %228, align 2, !dbg !75
  %371 = shufflevector <1 x bfloat> %370, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %372 = load <1 x bfloat>, ptr addrspace(3) %229, align 2, !dbg !75
  %373 = shufflevector <1 x bfloat> %372, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %374 = load <1 x bfloat>, ptr addrspace(3) %230, align 2, !dbg !75
  %375 = shufflevector <1 x bfloat> %374, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %376 = load <1 x bfloat>, ptr addrspace(3) %231, align 2, !dbg !75
  %377 = shufflevector <1 x bfloat> %376, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %378 = load <1 x bfloat>, ptr addrspace(3) %232, align 2, !dbg !75
  %379 = shufflevector <1 x bfloat> %378, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %380 = load <1 x bfloat>, ptr addrspace(3) %233, align 2, !dbg !75
  %381 = shufflevector <1 x bfloat> %380, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %382 = load <1 x bfloat>, ptr addrspace(3) %234, align 2, !dbg !75
  %383 = shufflevector <1 x bfloat> %382, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %384 = load <8 x bfloat>, ptr addrspace(3) %237, align 16, !dbg !74
  %385 = load <8 x bfloat>, ptr addrspace(3) %238, align 16, !dbg !74
  %386 = load <8 x bfloat>, ptr addrspace(3) %240, align 16, !dbg !74
  %387 = load <8 x bfloat>, ptr addrspace(3) %241, align 16, !dbg !74
  %388 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %384, <8 x bfloat> %138, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !76
  %389 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %386, <8 x bfloat> %141, <4 x float> %388, i32 0, i32 0, i32 0), !dbg !76
  %390 = extractelement <4 x float> %389, i64 0, !dbg !76
  %391 = extractelement <4 x float> %389, i64 1, !dbg !76
  %392 = extractelement <4 x float> %389, i64 2, !dbg !76
  %393 = extractelement <4 x float> %389, i64 3, !dbg !76
  %394 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %385, <8 x bfloat> %138, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !76
  %395 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %387, <8 x bfloat> %141, <4 x float> %394, i32 0, i32 0, i32 0), !dbg !76
  %396 = extractelement <4 x float> %395, i64 0, !dbg !76
  %397 = extractelement <4 x float> %395, i64 1, !dbg !76
  %398 = extractelement <4 x float> %395, i64 2, !dbg !76
  %399 = extractelement <4 x float> %395, i64 3, !dbg !76
  %400 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %287, i16 %244, i32 2147483646, i32 159744), !dbg !77
  %401 = select i1 %324, i32 %245, i32 -2147483648, !dbg !77
  %402 = tail call <2 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v2i32(ptr addrspace(8) %400, i32 %401, i32 0, i32 0), !dbg !77
  fence syncscope("workgroup") release, !dbg !77
  tail call void @llvm.amdgcn.s.barrier(), !dbg !77
  fence syncscope("workgroup") acquire, !dbg !77
  store <2 x i32> %402, ptr addrspace(3) %248, align 8, !dbg !77
  fence syncscope("workgroup") release, !dbg !78
  tail call void @llvm.amdgcn.s.barrier(), !dbg !78
  fence syncscope("workgroup") acquire, !dbg !78
  %403 = load <4 x bfloat>, ptr addrspace(3) %251, align 8, !dbg !78
  %404 = load <4 x bfloat>, ptr addrspace(3) %252, align 8, !dbg !78
  %405 = load <4 x bfloat>, ptr addrspace(3) %253, align 8, !dbg !78
  %406 = load <4 x bfloat>, ptr addrspace(3) %254, align 8, !dbg !78
  %407 = load <4 x bfloat>, ptr addrspace(3) %256, align 8, !dbg !78
  %408 = load <4 x bfloat>, ptr addrspace(3) %257, align 8, !dbg !78
  %409 = load <4 x bfloat>, ptr addrspace(3) %258, align 8, !dbg !78
  %410 = load <4 x bfloat>, ptr addrspace(3) %259, align 8, !dbg !78
  %411 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %272), !dbg !77
  %412 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %273), !dbg !77
  %413 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %274), !dbg !77
  %414 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %275), !dbg !77
  %415 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %276), !dbg !77
  %416 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %277), !dbg !77
  %417 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %278), !dbg !77
  %418 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %279), !dbg !77
  %419 = shufflevector <4 x bfloat> %403, <4 x bfloat> %407, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !78
  %420 = shufflevector <4 x bfloat> %404, <4 x bfloat> %408, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !78
  %421 = shufflevector <4 x bfloat> %405, <4 x bfloat> %409, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !78
  %422 = shufflevector <4 x bfloat> %406, <4 x bfloat> %410, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !78
  %423 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %419, <8 x bfloat> %280, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !78
  %424 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %420, <8 x bfloat> %281, <4 x float> %423, i32 0, i32 0, i32 0), !dbg !78
  %425 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %421, <8 x bfloat> %280, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !78
  %426 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %422, <8 x bfloat> %281, <4 x float> %425, i32 0, i32 0, i32 0), !dbg !78
  %427 = fmul float %390, 0x3FE9884540000000, !dbg !79
  %428 = fmul float %391, 0x3FE9884540000000, !dbg !79
  %429 = fmul float %392, 0x3FE9884540000000, !dbg !79
  %430 = fmul float %393, 0x3FE9884540000000, !dbg !79
  %431 = fmul float %396, 0x3FE9884540000000, !dbg !79
  %432 = fmul float %397, 0x3FE9884540000000, !dbg !79
  %433 = fmul float %398, 0x3FE9884540000000, !dbg !79
  %434 = fmul float %399, 0x3FE9884540000000, !dbg !79
  %435 = fmul float %390, 0x3FA6E4E260000000, !dbg !80
  %436 = fmul float %391, 0x3FA6E4E260000000, !dbg !80
  %437 = fmul float %392, 0x3FA6E4E260000000, !dbg !80
  %438 = fmul float %393, 0x3FA6E4E260000000, !dbg !80
  %439 = fmul float %396, 0x3FA6E4E260000000, !dbg !80
  %440 = fmul float %397, 0x3FA6E4E260000000, !dbg !80
  %441 = fmul float %398, 0x3FA6E4E260000000, !dbg !80
  %442 = fmul float %399, 0x3FA6E4E260000000, !dbg !80
  %443 = fmul float %390, %435, !dbg !81
  %444 = fmul float %391, %436, !dbg !81
  %445 = fmul float %392, %437, !dbg !81
  %446 = fmul float %393, %438, !dbg !81
  %447 = fmul float %396, %439, !dbg !81
  %448 = fmul float %397, %440, !dbg !81
  %449 = fmul float %398, %441, !dbg !81
  %450 = fmul float %399, %442, !dbg !81
  %451 = fadd float %443, 1.000000e+00, !dbg !82
  %452 = fadd float %444, 1.000000e+00, !dbg !82
  %453 = fadd float %445, 1.000000e+00, !dbg !82
  %454 = fadd float %446, 1.000000e+00, !dbg !82
  %455 = fadd float %447, 1.000000e+00, !dbg !82
  %456 = fadd float %448, 1.000000e+00, !dbg !82
  %457 = fadd float %449, 1.000000e+00, !dbg !82
  %458 = fadd float %450, 1.000000e+00, !dbg !82
  %459 = fmul float %427, %451, !dbg !83
  %460 = fmul float %428, %452, !dbg !83
  %461 = fmul float %429, %453, !dbg !83
  %462 = fmul float %430, %454, !dbg !83
  %463 = fmul float %431, %455, !dbg !83
  %464 = fmul float %432, %456, !dbg !83
  %465 = fmul float %433, %457, !dbg !83
  %466 = fmul float %434, %458, !dbg !83
  %467 = fmul float %459, 2.000000e+00, !dbg !84
  %468 = fmul float %460, 2.000000e+00, !dbg !84
  %469 = fmul float %461, 2.000000e+00, !dbg !84
  %470 = fmul float %462, 2.000000e+00, !dbg !84
  %471 = fmul float %463, 2.000000e+00, !dbg !84
  %472 = fmul float %464, 2.000000e+00, !dbg !84
  %473 = fmul float %465, 2.000000e+00, !dbg !84
  %474 = fmul float %466, 2.000000e+00, !dbg !84
  %475 = fsub float 0.000000e+00, %467, !dbg !87
  %476 = fsub float 0.000000e+00, %468, !dbg !87
  %477 = fsub float 0.000000e+00, %469, !dbg !87
  %478 = fsub float 0.000000e+00, %470, !dbg !87
  %479 = fsub float 0.000000e+00, %471, !dbg !87
  %480 = fsub float 0.000000e+00, %472, !dbg !87
  %481 = fsub float 0.000000e+00, %473, !dbg !87
  %482 = fsub float 0.000000e+00, %474, !dbg !87
  %483 = fmul float %475, 0x3FF7154760000000, !dbg !88
  %484 = tail call float @llvm.exp2.f32(float %483), !dbg !88
  %485 = fmul float %476, 0x3FF7154760000000, !dbg !88
  %486 = tail call float @llvm.exp2.f32(float %485), !dbg !88
  %487 = fmul float %477, 0x3FF7154760000000, !dbg !88
  %488 = tail call float @llvm.exp2.f32(float %487), !dbg !88
  %489 = fmul float %478, 0x3FF7154760000000, !dbg !88
  %490 = tail call float @llvm.exp2.f32(float %489), !dbg !88
  %491 = fmul float %479, 0x3FF7154760000000, !dbg !88
  %492 = tail call float @llvm.exp2.f32(float %491), !dbg !88
  %493 = fmul float %480, 0x3FF7154760000000, !dbg !88
  %494 = tail call float @llvm.exp2.f32(float %493), !dbg !88
  %495 = fmul float %481, 0x3FF7154760000000, !dbg !88
  %496 = tail call float @llvm.exp2.f32(float %495), !dbg !88
  %497 = fmul float %482, 0x3FF7154760000000, !dbg !88
  %498 = tail call float @llvm.exp2.f32(float %497), !dbg !88
  %499 = shufflevector <4 x bfloat> %411, <4 x bfloat> %412, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !89
  %500 = shufflevector <4 x bfloat> %413, <4 x bfloat> %414, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !89
  %501 = shufflevector <4 x bfloat> %415, <4 x bfloat> %416, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !89
  %502 = shufflevector <4 x bfloat> %417, <4 x bfloat> %418, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !89
  %503 = insertelement <4 x float> poison, float %290, i64 0, !dbg !89
  %504 = insertelement <4 x float> %503, float %291, i64 1, !dbg !89
  %505 = insertelement <4 x float> %504, float %292, i64 2, !dbg !89
  %506 = insertelement <4 x float> %505, float %293, i64 3, !dbg !89
  %507 = insertelement <4 x float> poison, float %294, i64 0, !dbg !89
  %508 = insertelement <4 x float> %507, float %295, i64 1, !dbg !89
  %509 = insertelement <4 x float> %508, float %296, i64 2, !dbg !89
  %510 = insertelement <4 x float> %509, float %297, i64 3, !dbg !89
  %511 = insertelement <4 x float> poison, float %298, i64 0, !dbg !89
  %512 = insertelement <4 x float> %511, float %299, i64 1, !dbg !89
  %513 = insertelement <4 x float> %512, float %300, i64 2, !dbg !89
  %514 = insertelement <4 x float> %513, float %301, i64 3, !dbg !89
  %515 = insertelement <4 x float> poison, float %302, i64 0, !dbg !89
  %516 = insertelement <4 x float> %515, float %303, i64 1, !dbg !89
  %517 = insertelement <4 x float> %516, float %304, i64 2, !dbg !89
  %518 = insertelement <4 x float> %517, float %305, i64 3, !dbg !89
  %519 = insertelement <2 x float> poison, float %484, i64 0, !dbg !90
  %520 = insertelement <2 x float> %519, float %486, i64 1, !dbg !90
  %521 = fadd <2 x float> %520, splat (float 1.000000e+00), !dbg !90
  %522 = fdiv <2 x float> splat (float 1.000000e+00), %521, !dbg !91
  %523 = fmul <2 x float> %522, splat (float 2.000000e+00), !dbg !92
  %524 = fadd <2 x float> %523, splat (float -1.000000e+00), !dbg !93
  %525 = shufflevector <4 x float> %389, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !94
  %526 = fmul <2 x float> %525, splat (float 5.000000e-01), !dbg !94
  %527 = fadd <2 x float> %524, splat (float 1.000000e+00), !dbg !95
  %528 = fmul <2 x float> %526, %527, !dbg !96
  %529 = fmul <2 x float> %285, %528, !dbg !97
  %530 = fptrunc <2 x float> %529 to <2 x bfloat>, !dbg !98
  %531 = fmul <2 x float> %524, %524, !dbg !99
  %532 = fsub <2 x float> splat (float 1.000000e+00), %531, !dbg !100
  %533 = fmul <2 x float> %526, %532, !dbg !101
  %534 = fmul <2 x float> %525, splat (float 0x3FBB6676C0000000), !dbg !102
  %535 = fmul <2 x float> %525, %534, !dbg !103
  %536 = fadd <2 x float> %535, splat (float 0x3FE9884540000000), !dbg !104
  %537 = fmul <2 x float> %536, %533, !dbg !105
  %538 = fmul <2 x float> %527, splat (float 5.000000e-01), !dbg !106
  %539 = fadd <2 x float> %538, %537, !dbg !107
  %540 = fmul <2 x float> %285, %539, !dbg !71
  %541 = shufflevector <4 x float> %424, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !108
  %542 = fmul <2 x float> %540, %541, !dbg !108
  %543 = insertelement <2 x float> poison, float %488, i64 0, !dbg !90
  %544 = insertelement <2 x float> %543, float %490, i64 1, !dbg !90
  %545 = fadd <2 x float> %544, splat (float 1.000000e+00), !dbg !90
  %546 = fdiv <2 x float> splat (float 1.000000e+00), %545, !dbg !91
  %547 = fmul <2 x float> %546, splat (float 2.000000e+00), !dbg !92
  %548 = fadd <2 x float> %547, splat (float -1.000000e+00), !dbg !93
  %549 = shufflevector <4 x float> %389, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !94
  %550 = fmul <2 x float> %549, splat (float 5.000000e-01), !dbg !94
  %551 = fadd <2 x float> %548, splat (float 1.000000e+00), !dbg !95
  %552 = fmul <2 x float> %550, %551, !dbg !96
  %553 = fmul <2 x float> %285, %552, !dbg !97
  %554 = fptrunc <2 x float> %553 to <2 x bfloat>, !dbg !98
  %555 = shufflevector <2 x bfloat> %530, <2 x bfloat> %554, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !89
  %556 = fmul <2 x float> %548, %548, !dbg !99
  %557 = fsub <2 x float> splat (float 1.000000e+00), %556, !dbg !100
  %558 = fmul <2 x float> %550, %557, !dbg !101
  %559 = fmul <2 x float> %549, splat (float 0x3FBB6676C0000000), !dbg !102
  %560 = fmul <2 x float> %549, %559, !dbg !103
  %561 = fadd <2 x float> %560, splat (float 0x3FE9884540000000), !dbg !104
  %562 = fmul <2 x float> %561, %558, !dbg !105
  %563 = fmul <2 x float> %551, splat (float 5.000000e-01), !dbg !106
  %564 = fadd <2 x float> %563, %562, !dbg !107
  %565 = fmul <2 x float> %285, %564, !dbg !71
  %566 = shufflevector <4 x float> %424, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !108
  %567 = fmul <2 x float> %565, %566, !dbg !108
  %568 = insertelement <2 x float> poison, float %492, i64 0, !dbg !90
  %569 = insertelement <2 x float> %568, float %494, i64 1, !dbg !90
  %570 = fadd <2 x float> %569, splat (float 1.000000e+00), !dbg !90
  %571 = fdiv <2 x float> splat (float 1.000000e+00), %570, !dbg !91
  %572 = fmul <2 x float> %571, splat (float 2.000000e+00), !dbg !92
  %573 = fadd <2 x float> %572, splat (float -1.000000e+00), !dbg !93
  %574 = shufflevector <4 x float> %395, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !94
  %575 = fmul <2 x float> %574, splat (float 5.000000e-01), !dbg !94
  %576 = fadd <2 x float> %573, splat (float 1.000000e+00), !dbg !95
  %577 = fmul <2 x float> %575, %576, !dbg !96
  %578 = fmul <2 x float> %285, %577, !dbg !97
  %579 = fptrunc <2 x float> %578 to <2 x bfloat>, !dbg !98
  %580 = shufflevector <2 x bfloat> %579, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %581 = shufflevector <8 x bfloat> %555, <8 x bfloat> %580, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !89
  %582 = fmul <2 x float> %573, %573, !dbg !99
  %583 = fsub <2 x float> splat (float 1.000000e+00), %582, !dbg !100
  %584 = fmul <2 x float> %575, %583, !dbg !101
  %585 = fmul <2 x float> %574, splat (float 0x3FBB6676C0000000), !dbg !102
  %586 = fmul <2 x float> %574, %585, !dbg !103
  %587 = fadd <2 x float> %586, splat (float 0x3FE9884540000000), !dbg !104
  %588 = fmul <2 x float> %587, %584, !dbg !105
  %589 = fmul <2 x float> %576, splat (float 5.000000e-01), !dbg !106
  %590 = fadd <2 x float> %589, %588, !dbg !107
  %591 = fmul <2 x float> %285, %590, !dbg !71
  %592 = shufflevector <4 x float> %426, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !108
  %593 = fmul <2 x float> %591, %592, !dbg !108
  %594 = insertelement <2 x float> poison, float %496, i64 0, !dbg !90
  %595 = insertelement <2 x float> %594, float %498, i64 1, !dbg !90
  %596 = fadd <2 x float> %595, splat (float 1.000000e+00), !dbg !90
  %597 = fdiv <2 x float> splat (float 1.000000e+00), %596, !dbg !91
  %598 = fmul <2 x float> %597, splat (float 2.000000e+00), !dbg !92
  %599 = fadd <2 x float> %598, splat (float -1.000000e+00), !dbg !93
  %600 = shufflevector <4 x float> %395, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !94
  %601 = fmul <2 x float> %600, splat (float 5.000000e-01), !dbg !94
  %602 = fadd <2 x float> %599, splat (float 1.000000e+00), !dbg !95
  %603 = fmul <2 x float> %601, %602, !dbg !96
  %604 = fmul <2 x float> %285, %603, !dbg !97
  %605 = fptrunc <2 x float> %604 to <2 x bfloat>, !dbg !98
  %606 = shufflevector <2 x bfloat> %605, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %607 = shufflevector <8 x bfloat> %581, <8 x bfloat> %606, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !89
  %608 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %499, <8 x bfloat> %607, <4 x float> %506, i32 0, i32 0, i32 0), !dbg !89
  %609 = extractelement <4 x float> %608, i64 0, !dbg !89
  %610 = extractelement <4 x float> %608, i64 1, !dbg !89
  %611 = extractelement <4 x float> %608, i64 2, !dbg !89
  %612 = extractelement <4 x float> %608, i64 3, !dbg !89
  %613 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %500, <8 x bfloat> %607, <4 x float> %510, i32 0, i32 0, i32 0), !dbg !89
  %614 = extractelement <4 x float> %613, i64 0, !dbg !89
  %615 = extractelement <4 x float> %613, i64 1, !dbg !89
  %616 = extractelement <4 x float> %613, i64 2, !dbg !89
  %617 = extractelement <4 x float> %613, i64 3, !dbg !89
  %618 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %501, <8 x bfloat> %607, <4 x float> %514, i32 0, i32 0, i32 0), !dbg !89
  %619 = extractelement <4 x float> %618, i64 0, !dbg !89
  %620 = extractelement <4 x float> %618, i64 1, !dbg !89
  %621 = extractelement <4 x float> %618, i64 2, !dbg !89
  %622 = extractelement <4 x float> %618, i64 3, !dbg !89
  %623 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %502, <8 x bfloat> %607, <4 x float> %518, i32 0, i32 0, i32 0), !dbg !89
  %624 = extractelement <4 x float> %623, i64 0, !dbg !89
  %625 = extractelement <4 x float> %623, i64 1, !dbg !89
  %626 = extractelement <4 x float> %623, i64 2, !dbg !89
  %627 = extractelement <4 x float> %623, i64 3, !dbg !89
  %628 = fmul <2 x float> %599, %599, !dbg !99
  %629 = fsub <2 x float> splat (float 1.000000e+00), %628, !dbg !100
  %630 = fmul <2 x float> %601, %629, !dbg !101
  %631 = fmul <2 x float> %600, splat (float 0x3FBB6676C0000000), !dbg !102
  %632 = fmul <2 x float> %600, %631, !dbg !103
  %633 = fadd <2 x float> %632, splat (float 0x3FE9884540000000), !dbg !104
  %634 = fmul <2 x float> %633, %630, !dbg !105
  %635 = fmul <2 x float> %602, splat (float 5.000000e-01), !dbg !106
  %636 = fadd <2 x float> %635, %634, !dbg !107
  %637 = fmul <2 x float> %285, %636, !dbg !71
  %638 = shufflevector <4 x float> %426, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !108
  %639 = fmul <2 x float> %637, %638, !dbg !108
  %640 = fptrunc <2 x float> %542 to <2 x bfloat>, !dbg !109
  %641 = fptrunc <2 x float> %567 to <2 x bfloat>, !dbg !109
  %642 = fptrunc <2 x float> %593 to <2 x bfloat>, !dbg !109
  %643 = fptrunc <2 x float> %639 to <2 x bfloat>, !dbg !109
  %644 = bitcast <2 x bfloat> %640 to i32, !dbg !109
  %645 = bitcast <2 x bfloat> %641 to i32, !dbg !109
  %646 = bitcast <2 x bfloat> %642 to i32, !dbg !109
  %647 = bitcast <2 x bfloat> %643 to i32, !dbg !109
  %648 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %644, i32 %646, i1 false, i1 false), !dbg !109
  %649 = extractvalue { i32, i32 } %648, 0, !dbg !109
  %650 = extractvalue { i32, i32 } %648, 1, !dbg !109
  %651 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %649, i32 %650, i1 false, i1 false), !dbg !109
  %652 = extractvalue { i32, i32 } %651, 0, !dbg !109
  %653 = extractvalue { i32, i32 } %651, 1, !dbg !109
  %654 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %645, i32 %647, i1 false, i1 false), !dbg !109
  %655 = extractvalue { i32, i32 } %654, 0, !dbg !109
  %656 = extractvalue { i32, i32 } %654, 1, !dbg !109
  %657 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %655, i32 %656, i1 false, i1 false), !dbg !109
  %658 = extractvalue { i32, i32 } %657, 0, !dbg !109
  %659 = extractvalue { i32, i32 } %657, 1, !dbg !109
  %660 = bitcast i32 %652 to <2 x bfloat>, !dbg !109
  %661 = bitcast i32 %658 to <2 x bfloat>, !dbg !109
  %662 = bitcast i32 %653 to <2 x bfloat>, !dbg !109
  %663 = shufflevector <2 x bfloat> %662, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %664 = bitcast i32 %659 to <2 x bfloat>, !dbg !109
  %665 = shufflevector <2 x bfloat> %664, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %666 = shufflevector <2 x bfloat> %660, <2 x bfloat> %661, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %667 = shufflevector <8 x bfloat> %666, <8 x bfloat> %663, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !75
  %668 = shufflevector <8 x bfloat> %667, <8 x bfloat> %665, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !75
  %669 = shufflevector <1 x bfloat> %328, <1 x bfloat> %329, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %670 = shufflevector <8 x bfloat> %669, <8 x bfloat> %341, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %671 = shufflevector <8 x bfloat> %670, <8 x bfloat> %343, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %672 = shufflevector <8 x bfloat> %671, <8 x bfloat> %331, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !75
  %673 = shufflevector <8 x bfloat> %672, <8 x bfloat> %333, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !75
  %674 = shufflevector <8 x bfloat> %673, <8 x bfloat> %345, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !75
  %675 = shufflevector <8 x bfloat> %674, <8 x bfloat> %347, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !75
  %676 = shufflevector <1 x bfloat> %334, <1 x bfloat> %335, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %677 = shufflevector <8 x bfloat> %676, <8 x bfloat> %349, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %678 = shufflevector <8 x bfloat> %677, <8 x bfloat> %351, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %679 = shufflevector <8 x bfloat> %678, <8 x bfloat> %337, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !75
  %680 = shufflevector <8 x bfloat> %679, <8 x bfloat> %339, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !75
  %681 = shufflevector <8 x bfloat> %680, <8 x bfloat> %353, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !75
  %682 = shufflevector <8 x bfloat> %681, <8 x bfloat> %355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !75
  %683 = shufflevector <1 x bfloat> %356, <1 x bfloat> %357, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %684 = shufflevector <8 x bfloat> %683, <8 x bfloat> %369, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %685 = shufflevector <8 x bfloat> %684, <8 x bfloat> %371, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %686 = shufflevector <8 x bfloat> %685, <8 x bfloat> %359, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !75
  %687 = shufflevector <8 x bfloat> %686, <8 x bfloat> %361, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !75
  %688 = shufflevector <8 x bfloat> %687, <8 x bfloat> %373, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !75
  %689 = shufflevector <8 x bfloat> %688, <8 x bfloat> %375, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !75
  %690 = shufflevector <1 x bfloat> %362, <1 x bfloat> %363, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %691 = shufflevector <8 x bfloat> %690, <8 x bfloat> %377, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %692 = shufflevector <8 x bfloat> %691, <8 x bfloat> %379, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !75
  %693 = shufflevector <8 x bfloat> %692, <8 x bfloat> %365, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !75
  %694 = shufflevector <8 x bfloat> %693, <8 x bfloat> %367, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !75
  %695 = shufflevector <8 x bfloat> %694, <8 x bfloat> %381, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !75
  %696 = shufflevector <8 x bfloat> %695, <8 x bfloat> %383, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !75
  %697 = insertelement <4 x float> poison, float %306, i64 0, !dbg !75
  %698 = insertelement <4 x float> %697, float %307, i64 1, !dbg !75
  %699 = insertelement <4 x float> %698, float %308, i64 2, !dbg !75
  %700 = insertelement <4 x float> %699, float %309, i64 3, !dbg !75
  %701 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %675, <8 x bfloat> %668, <4 x float> %700, i32 0, i32 0, i32 0), !dbg !75
  %702 = extractelement <4 x float> %701, i64 0, !dbg !75
  %703 = extractelement <4 x float> %701, i64 1, !dbg !75
  %704 = extractelement <4 x float> %701, i64 2, !dbg !75
  %705 = extractelement <4 x float> %701, i64 3, !dbg !75
  %706 = insertelement <4 x float> poison, float %310, i64 0, !dbg !75
  %707 = insertelement <4 x float> %706, float %311, i64 1, !dbg !75
  %708 = insertelement <4 x float> %707, float %312, i64 2, !dbg !75
  %709 = insertelement <4 x float> %708, float %313, i64 3, !dbg !75
  %710 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %682, <8 x bfloat> %668, <4 x float> %709, i32 0, i32 0, i32 0), !dbg !75
  %711 = extractelement <4 x float> %710, i64 0, !dbg !75
  %712 = extractelement <4 x float> %710, i64 1, !dbg !75
  %713 = extractelement <4 x float> %710, i64 2, !dbg !75
  %714 = extractelement <4 x float> %710, i64 3, !dbg !75
  %715 = insertelement <4 x float> poison, float %314, i64 0, !dbg !75
  %716 = insertelement <4 x float> %715, float %315, i64 1, !dbg !75
  %717 = insertelement <4 x float> %716, float %316, i64 2, !dbg !75
  %718 = insertelement <4 x float> %717, float %317, i64 3, !dbg !75
  %719 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %689, <8 x bfloat> %668, <4 x float> %718, i32 0, i32 0, i32 0), !dbg !75
  %720 = extractelement <4 x float> %719, i64 0, !dbg !75
  %721 = extractelement <4 x float> %719, i64 1, !dbg !75
  %722 = extractelement <4 x float> %719, i64 2, !dbg !75
  %723 = extractelement <4 x float> %719, i64 3, !dbg !75
  %724 = insertelement <4 x float> poison, float %318, i64 0, !dbg !75
  %725 = insertelement <4 x float> %724, float %319, i64 1, !dbg !75
  %726 = insertelement <4 x float> %725, float %320, i64 2, !dbg !75
  %727 = insertelement <4 x float> %726, float %321, i64 3, !dbg !75
  %728 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %696, <8 x bfloat> %668, <4 x float> %727, i32 0, i32 0, i32 0), !dbg !75
  %729 = extractelement <4 x float> %728, i64 0, !dbg !75
  %730 = extractelement <4 x float> %728, i64 1, !dbg !75
  %731 = extractelement <4 x float> %728, i64 2, !dbg !75
  %732 = extractelement <4 x float> %728, i64 3, !dbg !75
  %733 = add nuw nsw i32 %289, 32, !dbg !110
  %734 = getelementptr bfloat, ptr addrspace(1) %288, i64 %282, !dbg !111
  %735 = getelementptr bfloat, ptr addrspace(1) %287, i64 %283, !dbg !112
  %736 = add nuw nsw i32 %322, 1, !dbg !64
  %exitcond.not = icmp eq i32 %736, %160, !dbg !64
  br i1 %exitcond.not, label %._crit_edge, label %286, !dbg !64

._crit_edge:                                      ; preds = %286, %84
  %737 = phi float [ 0.000000e+00, %84 ], [ %702, %286 ]
  %738 = phi float [ 0.000000e+00, %84 ], [ %703, %286 ]
  %739 = phi float [ 0.000000e+00, %84 ], [ %704, %286 ]
  %740 = phi float [ 0.000000e+00, %84 ], [ %705, %286 ]
  %741 = phi float [ 0.000000e+00, %84 ], [ %711, %286 ]
  %742 = phi float [ 0.000000e+00, %84 ], [ %712, %286 ]
  %743 = phi float [ 0.000000e+00, %84 ], [ %713, %286 ]
  %744 = phi float [ 0.000000e+00, %84 ], [ %714, %286 ]
  %745 = phi float [ 0.000000e+00, %84 ], [ %720, %286 ]
  %746 = phi float [ 0.000000e+00, %84 ], [ %721, %286 ]
  %747 = phi float [ 0.000000e+00, %84 ], [ %722, %286 ]
  %748 = phi float [ 0.000000e+00, %84 ], [ %723, %286 ]
  %749 = phi float [ 0.000000e+00, %84 ], [ %729, %286 ]
  %750 = phi float [ 0.000000e+00, %84 ], [ %730, %286 ]
  %751 = phi float [ 0.000000e+00, %84 ], [ %731, %286 ]
  %752 = phi float [ 0.000000e+00, %84 ], [ %732, %286 ]
  %753 = phi float [ 0.000000e+00, %84 ], [ %609, %286 ]
  %754 = phi float [ 0.000000e+00, %84 ], [ %610, %286 ]
  %755 = phi float [ 0.000000e+00, %84 ], [ %611, %286 ]
  %756 = phi float [ 0.000000e+00, %84 ], [ %612, %286 ]
  %757 = phi float [ 0.000000e+00, %84 ], [ %614, %286 ]
  %758 = phi float [ 0.000000e+00, %84 ], [ %615, %286 ]
  %759 = phi float [ 0.000000e+00, %84 ], [ %616, %286 ]
  %760 = phi float [ 0.000000e+00, %84 ], [ %617, %286 ]
  %761 = phi float [ 0.000000e+00, %84 ], [ %619, %286 ]
  %762 = phi float [ 0.000000e+00, %84 ], [ %620, %286 ]
  %763 = phi float [ 0.000000e+00, %84 ], [ %621, %286 ]
  %764 = phi float [ 0.000000e+00, %84 ], [ %622, %286 ]
  %765 = phi float [ 0.000000e+00, %84 ], [ %624, %286 ]
  %766 = phi float [ 0.000000e+00, %84 ], [ %625, %286 ]
  %767 = phi float [ 0.000000e+00, %84 ], [ %626, %286 ]
  %768 = phi float [ 0.000000e+00, %84 ], [ %627, %286 ]
  %769 = mul i32 %11, %90, !dbg !113
  %770 = getelementptr bfloat, ptr addrspace(1) %82, i64 %110, !dbg !113
  %771 = add i32 %769, %100, !dbg !114
  %772 = add i32 %101, %769, !dbg !114
  %773 = insertelement <2 x float> poison, float %753, i64 0, !dbg !115
  %774 = insertelement <2 x float> %773, float %754, i64 1, !dbg !115
  %775 = fptrunc <2 x float> %774 to <2 x bfloat>, !dbg !115
  %776 = insertelement <2 x float> poison, float %755, i64 0, !dbg !115
  %777 = insertelement <2 x float> %776, float %756, i64 1, !dbg !115
  %778 = fptrunc <2 x float> %777 to <2 x bfloat>, !dbg !115
  %779 = insertelement <2 x float> poison, float %757, i64 0, !dbg !115
  %780 = insertelement <2 x float> %779, float %758, i64 1, !dbg !115
  %781 = fptrunc <2 x float> %780 to <2 x bfloat>, !dbg !115
  %782 = insertelement <2 x float> poison, float %759, i64 0, !dbg !115
  %783 = insertelement <2 x float> %782, float %760, i64 1, !dbg !115
  %784 = fptrunc <2 x float> %783 to <2 x bfloat>, !dbg !115
  %785 = insertelement <2 x float> poison, float %761, i64 0, !dbg !115
  %786 = insertelement <2 x float> %785, float %762, i64 1, !dbg !115
  %787 = fptrunc <2 x float> %786 to <2 x bfloat>, !dbg !115
  %788 = insertelement <2 x float> poison, float %763, i64 0, !dbg !115
  %789 = insertelement <2 x float> %788, float %764, i64 1, !dbg !115
  %790 = fptrunc <2 x float> %789 to <2 x bfloat>, !dbg !115
  %791 = insertelement <2 x float> poison, float %765, i64 0, !dbg !115
  %792 = insertelement <2 x float> %791, float %766, i64 1, !dbg !115
  %793 = fptrunc <2 x float> %792 to <2 x bfloat>, !dbg !115
  %794 = insertelement <2 x float> poison, float %767, i64 0, !dbg !115
  %795 = insertelement <2 x float> %794, float %768, i64 1, !dbg !115
  %796 = fptrunc <2 x float> %795 to <2 x bfloat>, !dbg !115
  %797 = bitcast <2 x bfloat> %775 to i32, !dbg !115
  %798 = bitcast <2 x bfloat> %778 to i32, !dbg !115
  %799 = bitcast <2 x bfloat> %781 to i32, !dbg !115
  %800 = bitcast <2 x bfloat> %784 to i32, !dbg !115
  %801 = bitcast <2 x bfloat> %787 to i32, !dbg !115
  %802 = bitcast <2 x bfloat> %790 to i32, !dbg !115
  %803 = bitcast <2 x bfloat> %793 to i32, !dbg !115
  %804 = bitcast <2 x bfloat> %796 to i32, !dbg !115
  %805 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %797, i32 %799, i1 false, i1 false), !dbg !115
  %806 = extractvalue { i32, i32 } %805, 0, !dbg !115
  %807 = extractvalue { i32, i32 } %805, 1, !dbg !115
  %808 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %798, i32 %800, i1 false, i1 false), !dbg !115
  %809 = extractvalue { i32, i32 } %808, 0, !dbg !115
  %810 = extractvalue { i32, i32 } %808, 1, !dbg !115
  %811 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %801, i32 %803, i1 false, i1 false), !dbg !115
  %812 = extractvalue { i32, i32 } %811, 0, !dbg !115
  %813 = extractvalue { i32, i32 } %811, 1, !dbg !115
  %814 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %802, i32 %804, i1 false, i1 false), !dbg !115
  %815 = extractvalue { i32, i32 } %814, 0, !dbg !115
  %816 = extractvalue { i32, i32 } %814, 1, !dbg !115
  %817 = bitcast i32 %806 to <2 x bfloat>, !dbg !115
  %818 = bitcast i32 %809 to <2 x bfloat>, !dbg !115
  %819 = bitcast i32 %807 to <2 x bfloat>, !dbg !115
  %820 = shufflevector <2 x bfloat> %819, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %821 = bitcast i32 %810 to <2 x bfloat>, !dbg !115
  %822 = shufflevector <2 x bfloat> %821, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %823 = bitcast i32 %812 to <2 x bfloat>, !dbg !115
  %824 = bitcast i32 %815 to <2 x bfloat>, !dbg !115
  %825 = bitcast i32 %813 to <2 x bfloat>, !dbg !115
  %826 = shufflevector <2 x bfloat> %825, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %827 = bitcast i32 %816 to <2 x bfloat>, !dbg !115
  %828 = shufflevector <2 x bfloat> %827, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %829 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %770, i16 %116, i32 2147483646, i32 159744), !dbg !115
  %830 = shufflevector <2 x bfloat> %817, <2 x bfloat> %818, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %831 = shufflevector <8 x bfloat> %830, <8 x bfloat> %820, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !115
  %832 = shufflevector <8 x bfloat> %831, <8 x bfloat> %822, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !115
  %833 = bitcast <8 x bfloat> %832 to <4 x i32>, !dbg !115
  %834 = shl i32 %771, 1, !dbg !115
  %835 = select i1 %104, i32 %834, i32 -2147483648, !dbg !115
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %833, ptr addrspace(8) %829, i32 %835, i32 0, i32 0), !dbg !115
  %836 = shufflevector <2 x bfloat> %823, <2 x bfloat> %824, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !115
  %837 = shufflevector <8 x bfloat> %836, <8 x bfloat> %826, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !115
  %838 = shufflevector <8 x bfloat> %837, <8 x bfloat> %828, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !115
  %839 = bitcast <8 x bfloat> %838 to <4 x i32>, !dbg !115
  %840 = shl i32 %772, 1, !dbg !115
  %841 = select i1 %104, i32 %840, i32 -2147483648, !dbg !115
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %839, ptr addrspace(8) %829, i32 %841, i32 0, i32 0), !dbg !115
  %842 = getelementptr bfloat, ptr addrspace(1) %81, i64 %110, !dbg !116
  %843 = insertelement <2 x float> poison, float %737, i64 0, !dbg !117
  %844 = insertelement <2 x float> %843, float %738, i64 1, !dbg !117
  %845 = fptrunc <2 x float> %844 to <2 x bfloat>, !dbg !117
  %846 = insertelement <2 x float> poison, float %739, i64 0, !dbg !117
  %847 = insertelement <2 x float> %846, float %740, i64 1, !dbg !117
  %848 = fptrunc <2 x float> %847 to <2 x bfloat>, !dbg !117
  %849 = insertelement <2 x float> poison, float %741, i64 0, !dbg !117
  %850 = insertelement <2 x float> %849, float %742, i64 1, !dbg !117
  %851 = fptrunc <2 x float> %850 to <2 x bfloat>, !dbg !117
  %852 = insertelement <2 x float> poison, float %743, i64 0, !dbg !117
  %853 = insertelement <2 x float> %852, float %744, i64 1, !dbg !117
  %854 = fptrunc <2 x float> %853 to <2 x bfloat>, !dbg !117
  %855 = insertelement <2 x float> poison, float %745, i64 0, !dbg !117
  %856 = insertelement <2 x float> %855, float %746, i64 1, !dbg !117
  %857 = fptrunc <2 x float> %856 to <2 x bfloat>, !dbg !117
  %858 = insertelement <2 x float> poison, float %747, i64 0, !dbg !117
  %859 = insertelement <2 x float> %858, float %748, i64 1, !dbg !117
  %860 = fptrunc <2 x float> %859 to <2 x bfloat>, !dbg !117
  %861 = insertelement <2 x float> poison, float %749, i64 0, !dbg !117
  %862 = insertelement <2 x float> %861, float %750, i64 1, !dbg !117
  %863 = fptrunc <2 x float> %862 to <2 x bfloat>, !dbg !117
  %864 = insertelement <2 x float> poison, float %751, i64 0, !dbg !117
  %865 = insertelement <2 x float> %864, float %752, i64 1, !dbg !117
  %866 = fptrunc <2 x float> %865 to <2 x bfloat>, !dbg !117
  %867 = bitcast <2 x bfloat> %845 to i32, !dbg !117
  %868 = bitcast <2 x bfloat> %848 to i32, !dbg !117
  %869 = bitcast <2 x bfloat> %851 to i32, !dbg !117
  %870 = bitcast <2 x bfloat> %854 to i32, !dbg !117
  %871 = bitcast <2 x bfloat> %857 to i32, !dbg !117
  %872 = bitcast <2 x bfloat> %860 to i32, !dbg !117
  %873 = bitcast <2 x bfloat> %863 to i32, !dbg !117
  %874 = bitcast <2 x bfloat> %866 to i32, !dbg !117
  %875 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %867, i32 %869, i1 false, i1 false), !dbg !117
  %876 = extractvalue { i32, i32 } %875, 0, !dbg !117
  %877 = extractvalue { i32, i32 } %875, 1, !dbg !117
  %878 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %868, i32 %870, i1 false, i1 false), !dbg !117
  %879 = extractvalue { i32, i32 } %878, 0, !dbg !117
  %880 = extractvalue { i32, i32 } %878, 1, !dbg !117
  %881 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %871, i32 %873, i1 false, i1 false), !dbg !117
  %882 = extractvalue { i32, i32 } %881, 0, !dbg !117
  %883 = extractvalue { i32, i32 } %881, 1, !dbg !117
  %884 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %872, i32 %874, i1 false, i1 false), !dbg !117
  %885 = extractvalue { i32, i32 } %884, 0, !dbg !117
  %886 = extractvalue { i32, i32 } %884, 1, !dbg !117
  %887 = bitcast i32 %876 to <2 x bfloat>, !dbg !117
  %888 = bitcast i32 %879 to <2 x bfloat>, !dbg !117
  %889 = bitcast i32 %877 to <2 x bfloat>, !dbg !117
  %890 = shufflevector <2 x bfloat> %889, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %891 = bitcast i32 %880 to <2 x bfloat>, !dbg !117
  %892 = shufflevector <2 x bfloat> %891, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %893 = bitcast i32 %882 to <2 x bfloat>, !dbg !117
  %894 = bitcast i32 %885 to <2 x bfloat>, !dbg !117
  %895 = bitcast i32 %883 to <2 x bfloat>, !dbg !117
  %896 = shufflevector <2 x bfloat> %895, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %897 = bitcast i32 %886 to <2 x bfloat>, !dbg !117
  %898 = shufflevector <2 x bfloat> %897, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %899 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %842, i16 %116, i32 2147483646, i32 159744), !dbg !117
  %900 = shufflevector <2 x bfloat> %887, <2 x bfloat> %888, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %901 = shufflevector <8 x bfloat> %900, <8 x bfloat> %890, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !117
  %902 = shufflevector <8 x bfloat> %901, <8 x bfloat> %892, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !117
  %903 = bitcast <8 x bfloat> %902 to <4 x i32>, !dbg !117
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %903, ptr addrspace(8) %899, i32 %835, i32 0, i32 0), !dbg !117
  %904 = shufflevector <2 x bfloat> %893, <2 x bfloat> %894, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !117
  %905 = shufflevector <8 x bfloat> %904, <8 x bfloat> %896, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !117
  %906 = shufflevector <8 x bfloat> %905, <8 x bfloat> %898, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !117
  %907 = bitcast <8 x bfloat> %906 to <4 x i32>, !dbg !117
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %907, ptr addrspace(8) %899, i32 %841, i32 0, i32 0), !dbg !117
  br label %908, !dbg !49

908:                                              ; preds = %._crit_edge, %75
  %909 = icmp slt i32 %42, %34, !dbg !118
  br i1 %909, label %910, label %1503, !dbg !119

910:                                              ; preds = %908
  %911 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !120
  %912 = and i32 %911, 511, !dbg !120
  %913 = and i32 %911, 15, !dbg !120
  %914 = and i32 %911, 448, !dbg !120
  %915 = lshr exact i32 %914, 2, !dbg !120
  %916 = or disjoint i32 %915, %913, !dbg !120
  %917 = lshr i32 %911, 3, !dbg !120
  %918 = and i32 %917, 63, !dbg !120
  %919 = or i32 %917, 64, !dbg !120
  %920 = or disjoint i32 %42, %916, !dbg !121
  %921 = or disjoint i32 %42, %918, !dbg !121
  %922 = or disjoint i32 %42, %919, !dbg !121
  %923 = and i32 %911, 16, !dbg !122
  %924 = and i32 %911, 32, !dbg !122
  %925 = lshr exact i32 %924, 2, !dbg !122
  %926 = or disjoint i32 %925, %923, !dbg !122
  %927 = or disjoint i32 %926, 32, !dbg !122
  %928 = shl nuw nsw i32 %911, 3, !dbg !122
  %929 = and i32 %928, 56, !dbg !122
  %930 = icmp slt i32 %920, %34, !dbg !123
  %931 = icmp slt i32 %921, %34, !dbg !123
  %932 = icmp slt i32 %922, %34, !dbg !123
  %933 = mul i32 %42, %10, !dbg !124
  %934 = mul i32 %10, %918, !dbg !124
  %935 = mul i32 %10, %919, !dbg !124
  %936 = sext i32 %933 to i64, !dbg !124
  %937 = getelementptr bfloat, ptr addrspace(1) %76, i64 %936, !dbg !124
  %938 = add i32 %934, %929, !dbg !125
  %939 = add i32 %935, %929, !dbg !125
  %940 = trunc i32 %10 to i16, !dbg !126
  %941 = and i16 %940, 16383, !dbg !126
  %942 = or disjoint i16 %941, 16384, !dbg !126
  %943 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %937, i16 %942, i32 2147483646, i32 159744), !dbg !126
  %944 = shl i32 %938, 1, !dbg !126
  %945 = select i1 %931, i32 %944, i32 -2147483648, !dbg !126
  %946 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %943, i32 %945, i32 0, i32 0), !dbg !126
  %947 = shl i32 %939, 1, !dbg !126
  %948 = select i1 %932, i32 %947, i32 -2147483648, !dbg !126
  %949 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %943, i32 %948, i32 0, i32 0), !dbg !126
  fence syncscope("workgroup") release, !dbg !126
  tail call void @llvm.amdgcn.s.barrier(), !dbg !126
  fence syncscope("workgroup") acquire, !dbg !126
  %950 = shl nuw nsw i32 %912, 4, !dbg !126
  %951 = and i32 %911, 112, !dbg !126
  %952 = xor i32 %950, %951, !dbg !126
  %953 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %952, !dbg !126
  store <4 x i32> %946, ptr addrspace(3) %953, align 16, !dbg !126
  %954 = getelementptr inbounds nuw i8, ptr addrspace(3) %953, i32 8192, !dbg !126
  store <4 x i32> %949, ptr addrspace(3) %954, align 16, !dbg !126
  fence syncscope("workgroup") release, !dbg !126
  tail call void @llvm.amdgcn.s.barrier(), !dbg !126
  fence syncscope("workgroup") acquire, !dbg !126
  %955 = shl nuw nsw i32 %913, 7, !dbg !126
  %956 = shl nuw nsw i32 %914, 5, !dbg !126
  %957 = and i32 %928, 112, !dbg !126
  %958 = and i32 %911, 48, !dbg !126
  %959 = or disjoint i32 %956, %957, !dbg !126
  %960 = xor i32 %959, %958, !dbg !126
  %961 = or disjoint i32 %960, %955, !dbg !126
  %962 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %961, !dbg !126
  %963 = load <8 x bfloat>, ptr addrspace(3) %962, align 16, !dbg !126
  %964 = xor i32 %961, 64, !dbg !126
  %965 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %964, !dbg !126
  %966 = load <8 x bfloat>, ptr addrspace(3) %965, align 16, !dbg !126
  %967 = mul i32 %42, %14, !dbg !127
  %968 = mul i32 %14, %918, !dbg !127
  %969 = mul i32 %14, %919, !dbg !127
  %970 = sext i32 %967 to i64, !dbg !127
  %971 = getelementptr bfloat, ptr addrspace(1) %79, i64 %970, !dbg !127
  %972 = add i32 %968, %929, !dbg !128
  %973 = add i32 %969, %929, !dbg !128
  %974 = trunc i32 %14 to i16, !dbg !129
  %975 = and i16 %974, 16383, !dbg !129
  %976 = or disjoint i16 %975, 16384, !dbg !129
  %977 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %971, i16 %976, i32 2147483646, i32 159744), !dbg !129
  %978 = shl i32 %972, 1, !dbg !129
  %979 = select i1 %931, i32 %978, i32 -2147483648, !dbg !129
  %980 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %977, i32 %979, i32 0, i32 0), !dbg !129
  %981 = shl i32 %973, 1, !dbg !129
  %982 = select i1 %932, i32 %981, i32 -2147483648, !dbg !129
  %983 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %977, i32 %982, i32 0, i32 0), !dbg !129
  fence syncscope("workgroup") release, !dbg !129
  tail call void @llvm.amdgcn.s.barrier(), !dbg !129
  fence syncscope("workgroup") acquire, !dbg !129
  store <4 x i32> %980, ptr addrspace(3) %953, align 16, !dbg !129
  store <4 x i32> %983, ptr addrspace(3) %954, align 16, !dbg !129
  fence syncscope("workgroup") release, !dbg !129
  tail call void @llvm.amdgcn.s.barrier(), !dbg !129
  fence syncscope("workgroup") acquire, !dbg !129
  %984 = load <8 x bfloat>, ptr addrspace(3) %962, align 16, !dbg !129
  %985 = load <8 x bfloat>, ptr addrspace(3) %965, align 16, !dbg !129
  %986 = add i32 %41, 31, !dbg !59
  %987 = sdiv i32 %986, 32, !dbg !62
  %988 = lshr i32 %911, 4, !dbg !130
  %989 = and i32 %988, 31, !dbg !130
  %990 = icmp sgt i32 %986, 31, !dbg !131
  br i1 %990, label %.lr.ph9, label %._crit_edge10, !dbg !131

.lr.ph9:                                          ; preds = %910
  %factor.op.mul = mul i32 %989, %11, !dbg !131
  %991 = shl i32 %11, 5, !dbg !132
  %992 = icmp eq i32 %923, 0, !dbg !122
  %993 = trunc i32 %11 to i16
  %994 = and i16 %993, 16383
  %995 = or disjoint i16 %994, 16384
  %996 = shl nuw nsw i32 %913, 3
  %.reass = shl i32 %factor.op.mul, 1
  %997 = add i32 %.reass, %996
  %998 = shl nuw nsw i32 %912, 3
  %999 = lshr i32 %911, 1
  %1000 = and i32 %999, 112
  %1001 = xor i32 %998, %1000
  %1002 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1001
  %1003 = shl nuw nsw i32 %913, 1
  %1004 = select i1 %992, i32 0, i32 1088
  %1005 = shl nuw nsw i32 %924, 6
  %1006 = or disjoint i32 %1004, %1005
  %1007 = or disjoint i32 %1006, %1003
  %1008 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1007
  %1009 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 128
  %1010 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 544
  %1011 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 672
  %1012 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 32
  %1013 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 160
  %1014 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 512
  %1015 = getelementptr inbounds nuw i8, ptr addrspace(3) %1008, i32 640
  %1016 = xor i32 %1007, 272
  %1017 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1016
  %1018 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 128
  %1019 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 544
  %1020 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 672
  %1021 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 32
  %1022 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 160
  %1023 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 512
  %1024 = getelementptr inbounds nuw i8, ptr addrspace(3) %1017, i32 640
  %1025 = xor i32 %1007, 64
  %1026 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1025
  %1027 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 128
  %1028 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 544
  %1029 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 672
  %1030 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 32
  %1031 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 160
  %1032 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 512
  %1033 = getelementptr inbounds nuw i8, ptr addrspace(3) %1026, i32 640
  %1034 = xor i32 %1007, 336
  %1035 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1034
  %1036 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 128
  %1037 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 544
  %1038 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 672
  %1039 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 32
  %1040 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 160
  %1041 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 512
  %1042 = getelementptr inbounds nuw i8, ptr addrspace(3) %1035, i32 640
  %1043 = or disjoint i32 %955, %957
  %1044 = xor i32 %1043, %958
  %1045 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1044
  %1046 = getelementptr inbounds nuw i8, ptr addrspace(3) %1045, i32 2048
  %1047 = xor i32 %1044, 64
  %1048 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %1047
  %1049 = getelementptr inbounds nuw i8, ptr addrspace(3) %1048, i32 2048
  %1050 = sext i32 %991 to i64
  %1051 = insertelement <2 x float> poison, float %20, i64 0, !dbg !133
  %1052 = shufflevector <2 x float> %1051, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !133
  br label %1053, !dbg !131

1053:                                             ; preds = %.lr.ph9, %1053
  %1054 = phi ptr addrspace(1) [ %78, %.lr.ph9 ], [ %1412, %1053 ]
  %1055 = phi ptr addrspace(1) [ %77, %.lr.ph9 ], [ %1411, %1053 ]
  %1056 = phi i32 [ 0, %.lr.ph9 ], [ %1410, %1053 ]
  %1057 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1379, %1053 ]
  %1058 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1380, %1053 ]
  %1059 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1381, %1053 ]
  %1060 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1382, %1053 ]
  %1061 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1388, %1053 ]
  %1062 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1389, %1053 ]
  %1063 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1390, %1053 ]
  %1064 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1391, %1053 ]
  %1065 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1397, %1053 ]
  %1066 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1398, %1053 ]
  %1067 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1399, %1053 ]
  %1068 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1400, %1053 ]
  %1069 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1406, %1053 ]
  %1070 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1407, %1053 ]
  %1071 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1408, %1053 ]
  %1072 = phi float [ 0.000000e+00, %.lr.ph9 ], [ %1409, %1053 ]
  %1073 = phi i32 [ 0, %.lr.ph9 ], [ %1413, %1053 ]
  %1074 = or disjoint i32 %1056, %989, !dbg !134
  %1075 = icmp slt i32 %1074, %41, !dbg !135
  %1076 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1055, i16 %995, i32 2147483646, i32 159744), !dbg !136
  %1077 = select i1 %1075, i32 %997, i32 -2147483648, !dbg !136
  %1078 = tail call <2 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v2i32(ptr addrspace(8) %1076, i32 %1077, i32 0, i32 0), !dbg !136
  fence syncscope("workgroup") release, !dbg !136
  tail call void @llvm.amdgcn.s.barrier(), !dbg !136
  fence syncscope("workgroup") acquire, !dbg !136
  store <2 x i32> %1078, ptr addrspace(3) %1002, align 8, !dbg !136
  fence syncscope("workgroup") release, !dbg !137
  tail call void @llvm.amdgcn.s.barrier(), !dbg !137
  fence syncscope("workgroup") acquire, !dbg !137
  %1079 = load <1 x bfloat>, ptr addrspace(3) %1008, align 2, !dbg !137
  %1080 = load <1 x bfloat>, ptr addrspace(3) %1009, align 2, !dbg !137
  %1081 = load <1 x bfloat>, ptr addrspace(3) %1010, align 2, !dbg !137
  %1082 = shufflevector <1 x bfloat> %1081, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1083 = load <1 x bfloat>, ptr addrspace(3) %1011, align 2, !dbg !137
  %1084 = shufflevector <1 x bfloat> %1083, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1085 = load <1 x bfloat>, ptr addrspace(3) %1012, align 2, !dbg !137
  %1086 = load <1 x bfloat>, ptr addrspace(3) %1013, align 2, !dbg !137
  %1087 = load <1 x bfloat>, ptr addrspace(3) %1014, align 2, !dbg !137
  %1088 = shufflevector <1 x bfloat> %1087, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1089 = load <1 x bfloat>, ptr addrspace(3) %1015, align 2, !dbg !137
  %1090 = shufflevector <1 x bfloat> %1089, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1091 = load <1 x bfloat>, ptr addrspace(3) %1017, align 2, !dbg !137
  %1092 = shufflevector <1 x bfloat> %1091, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1093 = load <1 x bfloat>, ptr addrspace(3) %1018, align 2, !dbg !137
  %1094 = shufflevector <1 x bfloat> %1093, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1095 = load <1 x bfloat>, ptr addrspace(3) %1019, align 2, !dbg !137
  %1096 = shufflevector <1 x bfloat> %1095, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1097 = load <1 x bfloat>, ptr addrspace(3) %1020, align 2, !dbg !137
  %1098 = shufflevector <1 x bfloat> %1097, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1099 = load <1 x bfloat>, ptr addrspace(3) %1021, align 2, !dbg !137
  %1100 = shufflevector <1 x bfloat> %1099, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1101 = load <1 x bfloat>, ptr addrspace(3) %1022, align 2, !dbg !137
  %1102 = shufflevector <1 x bfloat> %1101, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1103 = load <1 x bfloat>, ptr addrspace(3) %1023, align 2, !dbg !137
  %1104 = shufflevector <1 x bfloat> %1103, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1105 = load <1 x bfloat>, ptr addrspace(3) %1024, align 2, !dbg !137
  %1106 = shufflevector <1 x bfloat> %1105, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1107 = load <1 x bfloat>, ptr addrspace(3) %1026, align 2, !dbg !137
  %1108 = load <1 x bfloat>, ptr addrspace(3) %1027, align 2, !dbg !137
  %1109 = load <1 x bfloat>, ptr addrspace(3) %1028, align 2, !dbg !137
  %1110 = shufflevector <1 x bfloat> %1109, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1111 = load <1 x bfloat>, ptr addrspace(3) %1029, align 2, !dbg !137
  %1112 = shufflevector <1 x bfloat> %1111, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1113 = load <1 x bfloat>, ptr addrspace(3) %1030, align 2, !dbg !137
  %1114 = load <1 x bfloat>, ptr addrspace(3) %1031, align 2, !dbg !137
  %1115 = load <1 x bfloat>, ptr addrspace(3) %1032, align 2, !dbg !137
  %1116 = shufflevector <1 x bfloat> %1115, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1117 = load <1 x bfloat>, ptr addrspace(3) %1033, align 2, !dbg !137
  %1118 = shufflevector <1 x bfloat> %1117, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1119 = load <1 x bfloat>, ptr addrspace(3) %1035, align 2, !dbg !137
  %1120 = shufflevector <1 x bfloat> %1119, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1121 = load <1 x bfloat>, ptr addrspace(3) %1036, align 2, !dbg !137
  %1122 = shufflevector <1 x bfloat> %1121, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1123 = load <1 x bfloat>, ptr addrspace(3) %1037, align 2, !dbg !137
  %1124 = shufflevector <1 x bfloat> %1123, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1125 = load <1 x bfloat>, ptr addrspace(3) %1038, align 2, !dbg !137
  %1126 = shufflevector <1 x bfloat> %1125, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1127 = load <1 x bfloat>, ptr addrspace(3) %1039, align 2, !dbg !137
  %1128 = shufflevector <1 x bfloat> %1127, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1129 = load <1 x bfloat>, ptr addrspace(3) %1040, align 2, !dbg !137
  %1130 = shufflevector <1 x bfloat> %1129, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1131 = load <1 x bfloat>, ptr addrspace(3) %1041, align 2, !dbg !137
  %1132 = shufflevector <1 x bfloat> %1131, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1133 = load <1 x bfloat>, ptr addrspace(3) %1042, align 2, !dbg !137
  %1134 = shufflevector <1 x bfloat> %1133, <1 x bfloat> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1135 = load <8 x bfloat>, ptr addrspace(3) %1045, align 16, !dbg !136
  %1136 = load <8 x bfloat>, ptr addrspace(3) %1046, align 16, !dbg !136
  %1137 = load <8 x bfloat>, ptr addrspace(3) %1048, align 16, !dbg !136
  %1138 = load <8 x bfloat>, ptr addrspace(3) %1049, align 16, !dbg !136
  %1139 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1054, i16 %995, i32 2147483646, i32 159744), !dbg !138
  %1140 = tail call <2 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v2i32(ptr addrspace(8) %1139, i32 %1077, i32 0, i32 0), !dbg !138
  %1141 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1135, <8 x bfloat> %963, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !139
  %1142 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1137, <8 x bfloat> %966, <4 x float> %1141, i32 0, i32 0, i32 0), !dbg !139
  %1143 = extractelement <4 x float> %1142, i64 0, !dbg !139
  %1144 = extractelement <4 x float> %1142, i64 1, !dbg !139
  %1145 = extractelement <4 x float> %1142, i64 2, !dbg !139
  %1146 = extractelement <4 x float> %1142, i64 3, !dbg !139
  %1147 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1136, <8 x bfloat> %963, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !139
  %1148 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1138, <8 x bfloat> %966, <4 x float> %1147, i32 0, i32 0, i32 0), !dbg !139
  %1149 = extractelement <4 x float> %1148, i64 0, !dbg !139
  %1150 = extractelement <4 x float> %1148, i64 1, !dbg !139
  %1151 = extractelement <4 x float> %1148, i64 2, !dbg !139
  %1152 = extractelement <4 x float> %1148, i64 3, !dbg !139
  %1153 = fmul float %1143, 0x3FE9884540000000, !dbg !140
  %1154 = fmul float %1144, 0x3FE9884540000000, !dbg !140
  %1155 = fmul float %1145, 0x3FE9884540000000, !dbg !140
  %1156 = fmul float %1146, 0x3FE9884540000000, !dbg !140
  %1157 = fmul float %1149, 0x3FE9884540000000, !dbg !140
  %1158 = fmul float %1150, 0x3FE9884540000000, !dbg !140
  %1159 = fmul float %1151, 0x3FE9884540000000, !dbg !140
  %1160 = fmul float %1152, 0x3FE9884540000000, !dbg !140
  %1161 = fmul float %1143, 0x3FA6E4E260000000, !dbg !141
  %1162 = fmul float %1144, 0x3FA6E4E260000000, !dbg !141
  %1163 = fmul float %1145, 0x3FA6E4E260000000, !dbg !141
  %1164 = fmul float %1146, 0x3FA6E4E260000000, !dbg !141
  %1165 = fmul float %1149, 0x3FA6E4E260000000, !dbg !141
  %1166 = fmul float %1150, 0x3FA6E4E260000000, !dbg !141
  %1167 = fmul float %1151, 0x3FA6E4E260000000, !dbg !141
  %1168 = fmul float %1152, 0x3FA6E4E260000000, !dbg !141
  %1169 = fmul float %1143, %1161, !dbg !142
  %1170 = fmul float %1144, %1162, !dbg !142
  %1171 = fmul float %1145, %1163, !dbg !142
  %1172 = fmul float %1146, %1164, !dbg !142
  %1173 = fmul float %1149, %1165, !dbg !142
  %1174 = fmul float %1150, %1166, !dbg !142
  %1175 = fmul float %1151, %1167, !dbg !142
  %1176 = fmul float %1152, %1168, !dbg !142
  %1177 = fadd float %1169, 1.000000e+00, !dbg !143
  %1178 = fadd float %1170, 1.000000e+00, !dbg !143
  %1179 = fadd float %1171, 1.000000e+00, !dbg !143
  %1180 = fadd float %1172, 1.000000e+00, !dbg !143
  %1181 = fadd float %1173, 1.000000e+00, !dbg !143
  %1182 = fadd float %1174, 1.000000e+00, !dbg !143
  %1183 = fadd float %1175, 1.000000e+00, !dbg !143
  %1184 = fadd float %1176, 1.000000e+00, !dbg !143
  %1185 = fmul float %1153, %1177, !dbg !144
  %1186 = fmul float %1154, %1178, !dbg !144
  %1187 = fmul float %1155, %1179, !dbg !144
  %1188 = fmul float %1156, %1180, !dbg !144
  %1189 = fmul float %1157, %1181, !dbg !144
  %1190 = fmul float %1158, %1182, !dbg !144
  %1191 = fmul float %1159, %1183, !dbg !144
  %1192 = fmul float %1160, %1184, !dbg !144
  %1193 = fmul float %1185, 2.000000e+00, !dbg !84
  %1194 = fmul float %1186, 2.000000e+00, !dbg !84
  %1195 = fmul float %1187, 2.000000e+00, !dbg !84
  %1196 = fmul float %1188, 2.000000e+00, !dbg !84
  %1197 = fmul float %1189, 2.000000e+00, !dbg !84
  %1198 = fmul float %1190, 2.000000e+00, !dbg !84
  %1199 = fmul float %1191, 2.000000e+00, !dbg !84
  %1200 = fmul float %1192, 2.000000e+00, !dbg !84
  %1201 = fsub float 0.000000e+00, %1193, !dbg !87
  %1202 = fsub float 0.000000e+00, %1194, !dbg !87
  %1203 = fsub float 0.000000e+00, %1195, !dbg !87
  %1204 = fsub float 0.000000e+00, %1196, !dbg !87
  %1205 = fsub float 0.000000e+00, %1197, !dbg !87
  %1206 = fsub float 0.000000e+00, %1198, !dbg !87
  %1207 = fsub float 0.000000e+00, %1199, !dbg !87
  %1208 = fsub float 0.000000e+00, %1200, !dbg !87
  %1209 = fmul float %1201, 0x3FF7154760000000, !dbg !88
  %1210 = tail call float @llvm.exp2.f32(float %1209), !dbg !88
  %1211 = fmul float %1202, 0x3FF7154760000000, !dbg !88
  %1212 = tail call float @llvm.exp2.f32(float %1211), !dbg !88
  %1213 = fmul float %1203, 0x3FF7154760000000, !dbg !88
  %1214 = tail call float @llvm.exp2.f32(float %1213), !dbg !88
  %1215 = fmul float %1204, 0x3FF7154760000000, !dbg !88
  %1216 = tail call float @llvm.exp2.f32(float %1215), !dbg !88
  %1217 = fmul float %1205, 0x3FF7154760000000, !dbg !88
  %1218 = tail call float @llvm.exp2.f32(float %1217), !dbg !88
  %1219 = fmul float %1206, 0x3FF7154760000000, !dbg !88
  %1220 = tail call float @llvm.exp2.f32(float %1219), !dbg !88
  %1221 = fmul float %1207, 0x3FF7154760000000, !dbg !88
  %1222 = tail call float @llvm.exp2.f32(float %1221), !dbg !88
  %1223 = fmul float %1208, 0x3FF7154760000000, !dbg !88
  %1224 = tail call float @llvm.exp2.f32(float %1223), !dbg !88
  fence syncscope("workgroup") release, !dbg !138
  tail call void @llvm.amdgcn.s.barrier(), !dbg !138
  fence syncscope("workgroup") acquire, !dbg !138
  store <2 x i32> %1140, ptr addrspace(3) %1002, align 8, !dbg !138
  fence syncscope("workgroup") release, !dbg !138
  tail call void @llvm.amdgcn.s.barrier(), !dbg !138
  fence syncscope("workgroup") acquire, !dbg !138
  %1225 = load <8 x bfloat>, ptr addrspace(3) %1045, align 16, !dbg !138
  %1226 = load <8 x bfloat>, ptr addrspace(3) %1046, align 16, !dbg !138
  %1227 = load <8 x bfloat>, ptr addrspace(3) %1048, align 16, !dbg !138
  %1228 = load <8 x bfloat>, ptr addrspace(3) %1049, align 16, !dbg !138
  %1229 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1225, <8 x bfloat> %984, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !145
  %1230 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1227, <8 x bfloat> %985, <4 x float> %1229, i32 0, i32 0, i32 0), !dbg !145
  %1231 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1226, <8 x bfloat> %984, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !145
  %1232 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1228, <8 x bfloat> %985, <4 x float> %1231, i32 0, i32 0, i32 0), !dbg !145
  %1233 = insertelement <2 x float> poison, float %1210, i64 0, !dbg !90
  %1234 = insertelement <2 x float> %1233, float %1212, i64 1, !dbg !90
  %1235 = fadd <2 x float> %1234, splat (float 1.000000e+00), !dbg !90
  %1236 = fdiv <2 x float> splat (float 1.000000e+00), %1235, !dbg !91
  %1237 = fmul <2 x float> %1236, splat (float 2.000000e+00), !dbg !92
  %1238 = fadd <2 x float> %1237, splat (float -1.000000e+00), !dbg !93
  %1239 = shufflevector <4 x float> %1142, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !146
  %1240 = fmul <2 x float> %1239, splat (float 5.000000e-01), !dbg !146
  %1241 = fmul <2 x float> %1238, %1238, !dbg !147
  %1242 = fsub <2 x float> splat (float 1.000000e+00), %1241, !dbg !148
  %1243 = fmul <2 x float> %1239, splat (float 0x3FBB6676C0000000), !dbg !149
  %1244 = fmul <2 x float> %1239, %1243, !dbg !150
  %1245 = fadd <2 x float> %1244, splat (float 0x3FE9884540000000), !dbg !151
  %1246 = fmul <2 x float> %1245, %1242, !dbg !152
  %1247 = fmul <2 x float> %1240, %1246, !dbg !153
  %1248 = fadd <2 x float> %1238, splat (float 1.000000e+00), !dbg !154
  %1249 = fmul <2 x float> %1248, splat (float 5.000000e-01), !dbg !155
  %1250 = fadd <2 x float> %1249, %1247, !dbg !156
  %1251 = fmul <2 x float> %1052, %1250, !dbg !133
  %1252 = shufflevector <4 x float> %1230, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !157
  %1253 = fmul <2 x float> %1252, %1251, !dbg !157
  %1254 = insertelement <2 x float> poison, float %1214, i64 0, !dbg !90
  %1255 = insertelement <2 x float> %1254, float %1216, i64 1, !dbg !90
  %1256 = fadd <2 x float> %1255, splat (float 1.000000e+00), !dbg !90
  %1257 = fdiv <2 x float> splat (float 1.000000e+00), %1256, !dbg !91
  %1258 = fmul <2 x float> %1257, splat (float 2.000000e+00), !dbg !92
  %1259 = fadd <2 x float> %1258, splat (float -1.000000e+00), !dbg !93
  %1260 = shufflevector <4 x float> %1142, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !146
  %1261 = fmul <2 x float> %1260, splat (float 5.000000e-01), !dbg !146
  %1262 = fmul <2 x float> %1259, %1259, !dbg !147
  %1263 = fsub <2 x float> splat (float 1.000000e+00), %1262, !dbg !148
  %1264 = fmul <2 x float> %1260, splat (float 0x3FBB6676C0000000), !dbg !149
  %1265 = fmul <2 x float> %1260, %1264, !dbg !150
  %1266 = fadd <2 x float> %1265, splat (float 0x3FE9884540000000), !dbg !151
  %1267 = fmul <2 x float> %1266, %1263, !dbg !152
  %1268 = fmul <2 x float> %1261, %1267, !dbg !153
  %1269 = fadd <2 x float> %1259, splat (float 1.000000e+00), !dbg !154
  %1270 = fmul <2 x float> %1269, splat (float 5.000000e-01), !dbg !155
  %1271 = fadd <2 x float> %1270, %1268, !dbg !156
  %1272 = fmul <2 x float> %1052, %1271, !dbg !133
  %1273 = shufflevector <4 x float> %1230, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !157
  %1274 = fmul <2 x float> %1273, %1272, !dbg !157
  %1275 = insertelement <2 x float> poison, float %1218, i64 0, !dbg !90
  %1276 = insertelement <2 x float> %1275, float %1220, i64 1, !dbg !90
  %1277 = fadd <2 x float> %1276, splat (float 1.000000e+00), !dbg !90
  %1278 = fdiv <2 x float> splat (float 1.000000e+00), %1277, !dbg !91
  %1279 = fmul <2 x float> %1278, splat (float 2.000000e+00), !dbg !92
  %1280 = fadd <2 x float> %1279, splat (float -1.000000e+00), !dbg !93
  %1281 = shufflevector <4 x float> %1148, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !146
  %1282 = fmul <2 x float> %1281, splat (float 5.000000e-01), !dbg !146
  %1283 = fmul <2 x float> %1280, %1280, !dbg !147
  %1284 = fsub <2 x float> splat (float 1.000000e+00), %1283, !dbg !148
  %1285 = fmul <2 x float> %1281, splat (float 0x3FBB6676C0000000), !dbg !149
  %1286 = fmul <2 x float> %1281, %1285, !dbg !150
  %1287 = fadd <2 x float> %1286, splat (float 0x3FE9884540000000), !dbg !151
  %1288 = fmul <2 x float> %1287, %1284, !dbg !152
  %1289 = fmul <2 x float> %1282, %1288, !dbg !153
  %1290 = fadd <2 x float> %1280, splat (float 1.000000e+00), !dbg !154
  %1291 = fmul <2 x float> %1290, splat (float 5.000000e-01), !dbg !155
  %1292 = fadd <2 x float> %1291, %1289, !dbg !156
  %1293 = fmul <2 x float> %1052, %1292, !dbg !133
  %1294 = shufflevector <4 x float> %1232, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !157
  %1295 = fmul <2 x float> %1294, %1293, !dbg !157
  %1296 = insertelement <2 x float> poison, float %1222, i64 0, !dbg !90
  %1297 = insertelement <2 x float> %1296, float %1224, i64 1, !dbg !90
  %1298 = fadd <2 x float> %1297, splat (float 1.000000e+00), !dbg !90
  %1299 = fdiv <2 x float> splat (float 1.000000e+00), %1298, !dbg !91
  %1300 = fmul <2 x float> %1299, splat (float 2.000000e+00), !dbg !92
  %1301 = fadd <2 x float> %1300, splat (float -1.000000e+00), !dbg !93
  %1302 = shufflevector <4 x float> %1148, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !146
  %1303 = fmul <2 x float> %1302, splat (float 5.000000e-01), !dbg !146
  %1304 = fmul <2 x float> %1301, %1301, !dbg !147
  %1305 = fsub <2 x float> splat (float 1.000000e+00), %1304, !dbg !148
  %1306 = fmul <2 x float> %1302, splat (float 0x3FBB6676C0000000), !dbg !149
  %1307 = fmul <2 x float> %1302, %1306, !dbg !150
  %1308 = fadd <2 x float> %1307, splat (float 0x3FE9884540000000), !dbg !151
  %1309 = fmul <2 x float> %1308, %1305, !dbg !152
  %1310 = fmul <2 x float> %1303, %1309, !dbg !153
  %1311 = fadd <2 x float> %1301, splat (float 1.000000e+00), !dbg !154
  %1312 = fmul <2 x float> %1311, splat (float 5.000000e-01), !dbg !155
  %1313 = fadd <2 x float> %1312, %1310, !dbg !156
  %1314 = fmul <2 x float> %1052, %1313, !dbg !133
  %1315 = shufflevector <4 x float> %1232, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !157
  %1316 = fmul <2 x float> %1315, %1314, !dbg !157
  %1317 = fptrunc <2 x float> %1253 to <2 x bfloat>, !dbg !158
  %1318 = fptrunc <2 x float> %1274 to <2 x bfloat>, !dbg !158
  %1319 = fptrunc <2 x float> %1295 to <2 x bfloat>, !dbg !158
  %1320 = fptrunc <2 x float> %1316 to <2 x bfloat>, !dbg !158
  %1321 = bitcast <2 x bfloat> %1317 to i32, !dbg !158
  %1322 = bitcast <2 x bfloat> %1318 to i32, !dbg !158
  %1323 = bitcast <2 x bfloat> %1319 to i32, !dbg !158
  %1324 = bitcast <2 x bfloat> %1320 to i32, !dbg !158
  %1325 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1321, i32 %1323, i1 false, i1 false), !dbg !158
  %1326 = extractvalue { i32, i32 } %1325, 0, !dbg !158
  %1327 = extractvalue { i32, i32 } %1325, 1, !dbg !158
  %1328 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1326, i32 %1327, i1 false, i1 false), !dbg !158
  %1329 = extractvalue { i32, i32 } %1328, 0, !dbg !158
  %1330 = extractvalue { i32, i32 } %1328, 1, !dbg !158
  %1331 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1322, i32 %1324, i1 false, i1 false), !dbg !158
  %1332 = extractvalue { i32, i32 } %1331, 0, !dbg !158
  %1333 = extractvalue { i32, i32 } %1331, 1, !dbg !158
  %1334 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1332, i32 %1333, i1 false, i1 false), !dbg !158
  %1335 = extractvalue { i32, i32 } %1334, 0, !dbg !158
  %1336 = extractvalue { i32, i32 } %1334, 1, !dbg !158
  %1337 = bitcast i32 %1329 to <2 x bfloat>, !dbg !158
  %1338 = bitcast i32 %1335 to <2 x bfloat>, !dbg !158
  %1339 = bitcast i32 %1330 to <2 x bfloat>, !dbg !158
  %1340 = shufflevector <2 x bfloat> %1339, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1341 = bitcast i32 %1336 to <2 x bfloat>, !dbg !158
  %1342 = shufflevector <2 x bfloat> %1341, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1343 = shufflevector <2 x bfloat> %1337, <2 x bfloat> %1338, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1344 = shufflevector <8 x bfloat> %1343, <8 x bfloat> %1340, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !137
  %1345 = shufflevector <8 x bfloat> %1344, <8 x bfloat> %1342, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !137
  %1346 = shufflevector <1 x bfloat> %1079, <1 x bfloat> %1080, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1347 = shufflevector <8 x bfloat> %1346, <8 x bfloat> %1092, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1348 = shufflevector <8 x bfloat> %1347, <8 x bfloat> %1094, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1349 = shufflevector <8 x bfloat> %1348, <8 x bfloat> %1082, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1350 = shufflevector <8 x bfloat> %1349, <8 x bfloat> %1084, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !137
  %1351 = shufflevector <8 x bfloat> %1350, <8 x bfloat> %1096, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !137
  %1352 = shufflevector <8 x bfloat> %1351, <8 x bfloat> %1098, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !137
  %1353 = shufflevector <1 x bfloat> %1085, <1 x bfloat> %1086, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1354 = shufflevector <8 x bfloat> %1353, <8 x bfloat> %1100, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1355 = shufflevector <8 x bfloat> %1354, <8 x bfloat> %1102, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1356 = shufflevector <8 x bfloat> %1355, <8 x bfloat> %1088, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1357 = shufflevector <8 x bfloat> %1356, <8 x bfloat> %1090, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !137
  %1358 = shufflevector <8 x bfloat> %1357, <8 x bfloat> %1104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !137
  %1359 = shufflevector <8 x bfloat> %1358, <8 x bfloat> %1106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !137
  %1360 = shufflevector <1 x bfloat> %1107, <1 x bfloat> %1108, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1361 = shufflevector <8 x bfloat> %1360, <8 x bfloat> %1120, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1362 = shufflevector <8 x bfloat> %1361, <8 x bfloat> %1122, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1363 = shufflevector <8 x bfloat> %1362, <8 x bfloat> %1110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1364 = shufflevector <8 x bfloat> %1363, <8 x bfloat> %1112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !137
  %1365 = shufflevector <8 x bfloat> %1364, <8 x bfloat> %1124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !137
  %1366 = shufflevector <8 x bfloat> %1365, <8 x bfloat> %1126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !137
  %1367 = shufflevector <1 x bfloat> %1113, <1 x bfloat> %1114, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1368 = shufflevector <8 x bfloat> %1367, <8 x bfloat> %1128, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1369 = shufflevector <8 x bfloat> %1368, <8 x bfloat> %1130, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1370 = shufflevector <8 x bfloat> %1369, <8 x bfloat> %1116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !137
  %1371 = shufflevector <8 x bfloat> %1370, <8 x bfloat> %1118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>, !dbg !137
  %1372 = shufflevector <8 x bfloat> %1371, <8 x bfloat> %1132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !137
  %1373 = shufflevector <8 x bfloat> %1372, <8 x bfloat> %1134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>, !dbg !137
  %1374 = insertelement <4 x float> poison, float %1057, i64 0, !dbg !137
  %1375 = insertelement <4 x float> %1374, float %1058, i64 1, !dbg !137
  %1376 = insertelement <4 x float> %1375, float %1059, i64 2, !dbg !137
  %1377 = insertelement <4 x float> %1376, float %1060, i64 3, !dbg !137
  %1378 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1352, <8 x bfloat> %1345, <4 x float> %1377, i32 0, i32 0, i32 0), !dbg !137
  %1379 = extractelement <4 x float> %1378, i64 0, !dbg !137
  %1380 = extractelement <4 x float> %1378, i64 1, !dbg !137
  %1381 = extractelement <4 x float> %1378, i64 2, !dbg !137
  %1382 = extractelement <4 x float> %1378, i64 3, !dbg !137
  %1383 = insertelement <4 x float> poison, float %1061, i64 0, !dbg !137
  %1384 = insertelement <4 x float> %1383, float %1062, i64 1, !dbg !137
  %1385 = insertelement <4 x float> %1384, float %1063, i64 2, !dbg !137
  %1386 = insertelement <4 x float> %1385, float %1064, i64 3, !dbg !137
  %1387 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1359, <8 x bfloat> %1345, <4 x float> %1386, i32 0, i32 0, i32 0), !dbg !137
  %1388 = extractelement <4 x float> %1387, i64 0, !dbg !137
  %1389 = extractelement <4 x float> %1387, i64 1, !dbg !137
  %1390 = extractelement <4 x float> %1387, i64 2, !dbg !137
  %1391 = extractelement <4 x float> %1387, i64 3, !dbg !137
  %1392 = insertelement <4 x float> poison, float %1065, i64 0, !dbg !137
  %1393 = insertelement <4 x float> %1392, float %1066, i64 1, !dbg !137
  %1394 = insertelement <4 x float> %1393, float %1067, i64 2, !dbg !137
  %1395 = insertelement <4 x float> %1394, float %1068, i64 3, !dbg !137
  %1396 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1366, <8 x bfloat> %1345, <4 x float> %1395, i32 0, i32 0, i32 0), !dbg !137
  %1397 = extractelement <4 x float> %1396, i64 0, !dbg !137
  %1398 = extractelement <4 x float> %1396, i64 1, !dbg !137
  %1399 = extractelement <4 x float> %1396, i64 2, !dbg !137
  %1400 = extractelement <4 x float> %1396, i64 3, !dbg !137
  %1401 = insertelement <4 x float> poison, float %1069, i64 0, !dbg !137
  %1402 = insertelement <4 x float> %1401, float %1070, i64 1, !dbg !137
  %1403 = insertelement <4 x float> %1402, float %1071, i64 2, !dbg !137
  %1404 = insertelement <4 x float> %1403, float %1072, i64 3, !dbg !137
  %1405 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %1373, <8 x bfloat> %1345, <4 x float> %1404, i32 0, i32 0, i32 0), !dbg !137
  %1406 = extractelement <4 x float> %1405, i64 0, !dbg !137
  %1407 = extractelement <4 x float> %1405, i64 1, !dbg !137
  %1408 = extractelement <4 x float> %1405, i64 2, !dbg !137
  %1409 = extractelement <4 x float> %1405, i64 3, !dbg !137
  %1410 = add nuw nsw i32 %1056, 32, !dbg !159
  %1411 = getelementptr bfloat, ptr addrspace(1) %1055, i64 %1050, !dbg !160
  %1412 = getelementptr bfloat, ptr addrspace(1) %1054, i64 %1050, !dbg !161
  %1413 = add nuw nsw i32 %1073, 1, !dbg !131
  %exitcond15.not = icmp eq i32 %1413, %987, !dbg !131
  br i1 %exitcond15.not, label %._crit_edge10, label %1053, !dbg !131

._crit_edge10:                                    ; preds = %1053, %910
  %1414 = phi float [ 0.000000e+00, %910 ], [ %1379, %1053 ]
  %1415 = phi float [ 0.000000e+00, %910 ], [ %1380, %1053 ]
  %1416 = phi float [ 0.000000e+00, %910 ], [ %1381, %1053 ]
  %1417 = phi float [ 0.000000e+00, %910 ], [ %1382, %1053 ]
  %1418 = phi float [ 0.000000e+00, %910 ], [ %1388, %1053 ]
  %1419 = phi float [ 0.000000e+00, %910 ], [ %1389, %1053 ]
  %1420 = phi float [ 0.000000e+00, %910 ], [ %1390, %1053 ]
  %1421 = phi float [ 0.000000e+00, %910 ], [ %1391, %1053 ]
  %1422 = phi float [ 0.000000e+00, %910 ], [ %1397, %1053 ]
  %1423 = phi float [ 0.000000e+00, %910 ], [ %1398, %1053 ]
  %1424 = phi float [ 0.000000e+00, %910 ], [ %1399, %1053 ]
  %1425 = phi float [ 0.000000e+00, %910 ], [ %1400, %1053 ]
  %1426 = phi float [ 0.000000e+00, %910 ], [ %1406, %1053 ]
  %1427 = phi float [ 0.000000e+00, %910 ], [ %1407, %1053 ]
  %1428 = phi float [ 0.000000e+00, %910 ], [ %1408, %1053 ]
  %1429 = phi float [ 0.000000e+00, %910 ], [ %1409, %1053 ]
  %1430 = mul i32 %10, %916, !dbg !162
  %1431 = getelementptr bfloat, ptr addrspace(1) %80, i64 %936, !dbg !162
  %1432 = add i32 %1430, %926, !dbg !163
  %1433 = add i32 %927, %1430, !dbg !163
  %1434 = insertelement <2 x float> poison, float %1414, i64 0, !dbg !164
  %1435 = insertelement <2 x float> %1434, float %1415, i64 1, !dbg !164
  %1436 = fptrunc <2 x float> %1435 to <2 x bfloat>, !dbg !164
  %1437 = insertelement <2 x float> poison, float %1416, i64 0, !dbg !164
  %1438 = insertelement <2 x float> %1437, float %1417, i64 1, !dbg !164
  %1439 = fptrunc <2 x float> %1438 to <2 x bfloat>, !dbg !164
  %1440 = insertelement <2 x float> poison, float %1418, i64 0, !dbg !164
  %1441 = insertelement <2 x float> %1440, float %1419, i64 1, !dbg !164
  %1442 = fptrunc <2 x float> %1441 to <2 x bfloat>, !dbg !164
  %1443 = insertelement <2 x float> poison, float %1420, i64 0, !dbg !164
  %1444 = insertelement <2 x float> %1443, float %1421, i64 1, !dbg !164
  %1445 = fptrunc <2 x float> %1444 to <2 x bfloat>, !dbg !164
  %1446 = insertelement <2 x float> poison, float %1422, i64 0, !dbg !164
  %1447 = insertelement <2 x float> %1446, float %1423, i64 1, !dbg !164
  %1448 = fptrunc <2 x float> %1447 to <2 x bfloat>, !dbg !164
  %1449 = insertelement <2 x float> poison, float %1424, i64 0, !dbg !164
  %1450 = insertelement <2 x float> %1449, float %1425, i64 1, !dbg !164
  %1451 = fptrunc <2 x float> %1450 to <2 x bfloat>, !dbg !164
  %1452 = insertelement <2 x float> poison, float %1426, i64 0, !dbg !164
  %1453 = insertelement <2 x float> %1452, float %1427, i64 1, !dbg !164
  %1454 = fptrunc <2 x float> %1453 to <2 x bfloat>, !dbg !164
  %1455 = insertelement <2 x float> poison, float %1428, i64 0, !dbg !164
  %1456 = insertelement <2 x float> %1455, float %1429, i64 1, !dbg !164
  %1457 = fptrunc <2 x float> %1456 to <2 x bfloat>, !dbg !164
  %1458 = bitcast <2 x bfloat> %1436 to i32, !dbg !164
  %1459 = bitcast <2 x bfloat> %1439 to i32, !dbg !164
  %1460 = bitcast <2 x bfloat> %1442 to i32, !dbg !164
  %1461 = bitcast <2 x bfloat> %1445 to i32, !dbg !164
  %1462 = bitcast <2 x bfloat> %1448 to i32, !dbg !164
  %1463 = bitcast <2 x bfloat> %1451 to i32, !dbg !164
  %1464 = bitcast <2 x bfloat> %1454 to i32, !dbg !164
  %1465 = bitcast <2 x bfloat> %1457 to i32, !dbg !164
  %1466 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1458, i32 %1460, i1 false, i1 false), !dbg !164
  %1467 = extractvalue { i32, i32 } %1466, 0, !dbg !164
  %1468 = extractvalue { i32, i32 } %1466, 1, !dbg !164
  %1469 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1459, i32 %1461, i1 false, i1 false), !dbg !164
  %1470 = extractvalue { i32, i32 } %1469, 0, !dbg !164
  %1471 = extractvalue { i32, i32 } %1469, 1, !dbg !164
  %1472 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1462, i32 %1464, i1 false, i1 false), !dbg !164
  %1473 = extractvalue { i32, i32 } %1472, 0, !dbg !164
  %1474 = extractvalue { i32, i32 } %1472, 1, !dbg !164
  %1475 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %1463, i32 %1465, i1 false, i1 false), !dbg !164
  %1476 = extractvalue { i32, i32 } %1475, 0, !dbg !164
  %1477 = extractvalue { i32, i32 } %1475, 1, !dbg !164
  %1478 = bitcast i32 %1467 to <2 x bfloat>, !dbg !164
  %1479 = bitcast i32 %1470 to <2 x bfloat>, !dbg !164
  %1480 = bitcast i32 %1468 to <2 x bfloat>, !dbg !164
  %1481 = shufflevector <2 x bfloat> %1480, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1482 = bitcast i32 %1471 to <2 x bfloat>, !dbg !164
  %1483 = shufflevector <2 x bfloat> %1482, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1484 = bitcast i32 %1473 to <2 x bfloat>, !dbg !164
  %1485 = bitcast i32 %1476 to <2 x bfloat>, !dbg !164
  %1486 = bitcast i32 %1474 to <2 x bfloat>, !dbg !164
  %1487 = shufflevector <2 x bfloat> %1486, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1488 = bitcast i32 %1477 to <2 x bfloat>, !dbg !164
  %1489 = shufflevector <2 x bfloat> %1488, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1490 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %1431, i16 %942, i32 2147483646, i32 159744), !dbg !164
  %1491 = shufflevector <2 x bfloat> %1478, <2 x bfloat> %1479, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !164
  %1492 = shufflevector <8 x bfloat> %1491, <8 x bfloat> %1481, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !164
  %1493 = shufflevector <8 x bfloat> %1492, <8 x bfloat> %1483, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !164
  %1494 = bitcast <8 x bfloat> %1493 to <4 x i32>, !dbg !164
  %1495 = shl i32 %1432, 1, !dbg !164
  %1496 = select i1 %930, i32 %1495, i32 -2147483648, !dbg !164
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1494, ptr addrspace(8) %1490, i32 %1496, i32 0, i32 0), !dbg !164
  %1497 = shufflevector <2 x bfloat> %1484, <2 x bfloat> %1485, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !164
  %1498 = shufflevector <8 x bfloat> %1497, <8 x bfloat> %1487, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !164
  %1499 = shufflevector <8 x bfloat> %1498, <8 x bfloat> %1489, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !164
  %1500 = bitcast <8 x bfloat> %1499 to <4 x i32>, !dbg !164
  %1501 = shl i32 %1433, 1, !dbg !164
  %1502 = select i1 %930, i32 %1501, i32 -2147483648, !dbg !164
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1500, ptr addrspace(8) %1490, i32 %1502, i32 0, i32 0), !dbg !164
  br label %1503, !dbg !119

1503:                                             ; preds = %._crit_edge10, %908
  ret void, !dbg !165
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.z() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane16.swap(i32, i32, i1 immarg, i1 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32>, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <2 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v2i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat>, <8 x bfloat>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #6

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane32.swap(i32, i32, i1 immarg, i1 immarg) #4

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) captures(none)) #7

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,512" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-y" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="2,8" "denormal-fp-math-f32"="ieee" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
attributes #6 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #7 = { convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gdpa.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 1645, type: !5, scopeLine: 1645, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "_gdpa_bwd", linkageName: "_gdpa_bwd", scope: !1, file: !1, line: 1524, type: !5, scopeLine: 1524, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 1579, column: 30, scope: !7)
!9 = !DILocation(line: 1587, column: 30, scope: !7)
!10 = !DILocation(line: 1590, column: 23, scope: !7)
!11 = !DILocation(line: 1162, column: 34, scope: !12, inlinedAt: !13)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !1, discriminator: 0)
!13 = !DILocation(line: 1645, column: 8, scope: !7)
!14 = !DILocation(line: 1162, column: 22, scope: !12, inlinedAt: !13)
!15 = !DILocation(line: 1163, column: 42, scope: !12, inlinedAt: !13)
!16 = !DILocation(line: 1163, column: 20, scope: !12, inlinedAt: !13)
!17 = !DILocation(line: 1165, column: 19, scope: !12, inlinedAt: !13)
!18 = !DILocation(line: 1177, column: 38, scope: !12, inlinedAt: !13)
!19 = !DILocation(line: 1177, column: 26, scope: !12, inlinedAt: !13)
!20 = !DILocation(line: 1178, column: 44, scope: !12, inlinedAt: !13)
!21 = !DILocation(line: 1178, column: 24, scope: !12, inlinedAt: !13)
!22 = !DILocation(line: 1180, column: 23, scope: !12, inlinedAt: !13)
!23 = !DILocation(line: 1186, column: 20, scope: !12, inlinedAt: !13)
!24 = !DILocation(line: 1291, column: 18, scope: !12, inlinedAt: !13)
!25 = !DILocation(line: 1291, column: 37, scope: !12, inlinedAt: !13)
!26 = !DILocation(line: 1291, column: 26, scope: !12, inlinedAt: !13)
!27 = !DILocation(line: 1291, column: 7, scope: !12, inlinedAt: !13)
!28 = !DILocation(line: 1588, column: 24, scope: !7)
!29 = !DILocation(line: 1292, column: 40, scope: !12, inlinedAt: !13)
!30 = !DILocation(line: 1292, column: 26, scope: !12, inlinedAt: !13)
!31 = !DILocation(line: 1294, column: 26, scope: !12, inlinedAt: !13)
!32 = !DILocation(line: 1295, column: 24, scope: !12, inlinedAt: !13)
!33 = !DILocation(line: 1295, column: 46, scope: !12, inlinedAt: !13)
!34 = !DILocation(line: 1295, column: 36, scope: !12, inlinedAt: !13)
!35 = !DILocation(line: 1296, column: 26, scope: !12, inlinedAt: !13)
!36 = !DILocation(line: 1296, column: 48, scope: !12, inlinedAt: !13)
!37 = !DILocation(line: 1296, column: 38, scope: !12, inlinedAt: !13)
!38 = !DILocation(line: 1297, column: 25, scope: !12, inlinedAt: !13)
!39 = !DILocation(line: 1297, column: 48, scope: !12, inlinedAt: !13)
!40 = !DILocation(line: 1297, column: 38, scope: !12, inlinedAt: !13)
!41 = !DILocation(line: 1300, column: 13, scope: !12, inlinedAt: !13)
!42 = !DILocation(line: 1301, column: 13, scope: !12, inlinedAt: !13)
!43 = !DILocation(line: 1302, column: 13, scope: !12, inlinedAt: !13)
!44 = !DILocation(line: 1303, column: 14, scope: !12, inlinedAt: !13)
!45 = !DILocation(line: 1304, column: 14, scope: !12, inlinedAt: !13)
!46 = !DILocation(line: 1305, column: 14, scope: !12, inlinedAt: !13)
!47 = !DILocation(line: 1306, column: 14, scope: !12, inlinedAt: !13)
!48 = !DILocation(line: 1309, column: 17, scope: !12, inlinedAt: !13)
!49 = !DILocation(line: 1309, column: 7, scope: !12, inlinedAt: !13)
!50 = !DILocation(line: 1310, column: 40, scope: !12, inlinedAt: !13)
!51 = !DILocation(line: 1310, column: 27, scope: !12, inlinedAt: !13)
!52 = !DILocation(line: 1311, column: 24, scope: !12, inlinedAt: !13)
!53 = !DILocation(line: 1311, column: 66, scope: !12, inlinedAt: !13)
!54 = !DILocation(line: 1334, column: 20, scope: !12, inlinedAt: !13)
!55 = !DILocation(line: 1334, column: 50, scope: !12, inlinedAt: !13)
!56 = !DILocation(line: 1334, column: 16, scope: !12, inlinedAt: !13)
!57 = !DILocation(line: 1338, column: 20, scope: !12, inlinedAt: !13)
!58 = !DILocation(line: 1338, column: 16, scope: !12, inlinedAt: !13)
!59 = !DILocation(line: 41, column: 22, scope: !60, inlinedAt: !13)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/workspace/projects/triton-openai/python/triton/language")
!62 = !DILocation(line: 41, column: 28, scope: !60, inlinedAt: !13)
!63 = !DILocation(line: 766, column: 36, scope: !12, inlinedAt: !13)
!64 = !DILocation(line: 786, column: 46, scope: !12, inlinedAt: !13)
!65 = !DILocation(line: 893, column: 32, scope: !12, inlinedAt: !13)
!66 = !DILocation(line: 892, column: 32, scope: !12, inlinedAt: !13)
!67 = !DILocation(line: 778, column: 23, scope: !12, inlinedAt: !13)
!68 = !DILocation(line: 778, column: 54, scope: !12, inlinedAt: !13)
!69 = !DILocation(line: 777, column: 22, scope: !12, inlinedAt: !13)
!70 = !DILocation(line: 777, column: 52, scope: !12, inlinedAt: !13)
!71 = !DILocation(line: 859, column: 14, scope: !12, inlinedAt: !13)
!72 = !DILocation(line: 787, column: 26, scope: !12, inlinedAt: !13)
!73 = !DILocation(line: 788, column: 66, scope: !12, inlinedAt: !13)
!74 = !DILocation(line: 801, column: 25, scope: !12, inlinedAt: !13)
!75 = !DILocation(line: 871, column: 26, scope: !12, inlinedAt: !13)
!76 = !DILocation(line: 804, column: 24, scope: !12, inlinedAt: !13)
!77 = !DILocation(line: 817, column: 25, scope: !12, inlinedAt: !13)
!78 = !DILocation(line: 819, column: 24, scope: !12, inlinedAt: !13)
!79 = !DILocation(line: 835, column: 55, scope: !12, inlinedAt: !13)
!80 = !DILocation(line: 835, column: 76, scope: !12, inlinedAt: !13)
!81 = !DILocation(line: 835, column: 81, scope: !12, inlinedAt: !13)
!82 = !DILocation(line: 835, column: 65, scope: !12, inlinedAt: !13)
!83 = !DILocation(line: 835, column: 61, scope: !12, inlinedAt: !13)
!84 = !DILocation(line: 67, column: 30, scope: !85, inlinedAt: !13)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "math.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!87 = !DILocation(line: 48, column: 30, scope: !60, inlinedAt: !13)
!88 = !DILocation(line: 48, column: 29, scope: !60, inlinedAt: !13)
!89 = !DILocation(line: 842, column: 26, scope: !12, inlinedAt: !13)
!90 = !DILocation(line: 48, column: 20, scope: !60, inlinedAt: !13)
!91 = !DILocation(line: 48, column: 16, scope: !60, inlinedAt: !13)
!92 = !DILocation(line: 67, column: 15, scope: !85, inlinedAt: !13)
!93 = !DILocation(line: 67, column: 35, scope: !85, inlinedAt: !13)
!94 = !DILocation(line: 836, column: 24, scope: !12, inlinedAt: !13)
!95 = !DILocation(line: 836, column: 34, scope: !12, inlinedAt: !13)
!96 = !DILocation(line: 836, column: 30, scope: !12, inlinedAt: !13)
!97 = !DILocation(line: 840, column: 15, scope: !12, inlinedAt: !13)
!98 = !DILocation(line: 841, column: 21, scope: !12, inlinedAt: !13)
!99 = !DILocation(line: 854, column: 34, scope: !12, inlinedAt: !13)
!100 = !DILocation(line: 854, column: 23, scope: !12, inlinedAt: !13)
!101 = !DILocation(line: 854, column: 19, scope: !12, inlinedAt: !13)
!102 = !DILocation(line: 855, column: 49, scope: !12, inlinedAt: !13)
!103 = !DILocation(line: 855, column: 54, scope: !12, inlinedAt: !13)
!104 = !DILocation(line: 855, column: 34, scope: !12, inlinedAt: !13)
!105 = !DILocation(line: 855, column: 19, scope: !12, inlinedAt: !13)
!106 = !DILocation(line: 856, column: 23, scope: !12, inlinedAt: !13)
!107 = !DILocation(line: 856, column: 16, scope: !12, inlinedAt: !13)
!108 = !DILocation(line: 869, column: 19, scope: !12, inlinedAt: !13)
!109 = !DILocation(line: 870, column: 21, scope: !12, inlinedAt: !13)
!110 = !DILocation(line: 890, column: 18, scope: !12, inlinedAt: !13)
!111 = !DILocation(line: 892, column: 23, scope: !12, inlinedAt: !13)
!112 = !DILocation(line: 893, column: 23, scope: !12, inlinedAt: !13)
!113 = !DILocation(line: 1395, column: 23, scope: !12, inlinedAt: !13)
!114 = !DILocation(line: 1395, column: 53, scope: !12, inlinedAt: !13)
!115 = !DILocation(line: 1408, column: 34, scope: !12, inlinedAt: !13)
!116 = !DILocation(line: 1411, column: 23, scope: !12, inlinedAt: !13)
!117 = !DILocation(line: 1424, column: 34, scope: !12, inlinedAt: !13)
!118 = !DILocation(line: 1429, column: 21, scope: !12, inlinedAt: !13)
!119 = !DILocation(line: 1429, column: 11, scope: !12, inlinedAt: !13)
!120 = !DILocation(line: 1431, column: 44, scope: !12, inlinedAt: !13)
!121 = !DILocation(line: 1431, column: 31, scope: !12, inlinedAt: !13)
!122 = !DILocation(line: 1433, column: 28, scope: !12, inlinedAt: !13)
!123 = !DILocation(line: 1433, column: 70, scope: !12, inlinedAt: !13)
!124 = !DILocation(line: 1450, column: 24, scope: !12, inlinedAt: !13)
!125 = !DILocation(line: 1450, column: 54, scope: !12, inlinedAt: !13)
!126 = !DILocation(line: 1450, column: 20, scope: !12, inlinedAt: !13)
!127 = !DILocation(line: 1454, column: 25, scope: !12, inlinedAt: !13)
!128 = !DILocation(line: 1454, column: 56, scope: !12, inlinedAt: !13)
!129 = !DILocation(line: 1454, column: 20, scope: !12, inlinedAt: !13)
!130 = !DILocation(line: 939, column: 36, scope: !12, inlinedAt: !13)
!131 = !DILocation(line: 950, column: 46, scope: !12, inlinedAt: !13)
!132 = !DILocation(line: 1005, column: 32, scope: !12, inlinedAt: !13)
!133 = !DILocation(line: 984, column: 13, scope: !12, inlinedAt: !13)
!134 = !DILocation(line: 951, column: 26, scope: !12, inlinedAt: !13)
!135 = !DILocation(line: 952, column: 66, scope: !12, inlinedAt: !13)
!136 = !DILocation(line: 971, column: 25, scope: !12, inlinedAt: !13)
!137 = !DILocation(line: 1001, column: 25, scope: !12, inlinedAt: !13)
!138 = !DILocation(line: 972, column: 25, scope: !12, inlinedAt: !13)
!139 = !DILocation(line: 974, column: 23, scope: !12, inlinedAt: !13)
!140 = !DILocation(line: 112, column: 47, scope: !85, inlinedAt: !13)
!141 = !DILocation(line: 112, column: 69, scope: !85, inlinedAt: !13)
!142 = !DILocation(line: 112, column: 73, scope: !85, inlinedAt: !13)
!143 = !DILocation(line: 112, column: 58, scope: !85, inlinedAt: !13)
!144 = !DILocation(line: 112, column: 52, scope: !85, inlinedAt: !13)
!145 = !DILocation(line: 996, column: 24, scope: !12, inlinedAt: !13)
!146 = !DILocation(line: 113, column: 17, scope: !85, inlinedAt: !13)
!147 = !DILocation(line: 114, column: 24, scope: !85, inlinedAt: !13)
!148 = !DILocation(line: 114, column: 13, scope: !85, inlinedAt: !13)
!149 = !DILocation(line: 114, column: 67, scope: !85, inlinedAt: !13)
!150 = !DILocation(line: 114, column: 71, scope: !85, inlinedAt: !13)
!151 = !DILocation(line: 114, column: 52, scope: !85, inlinedAt: !13)
!152 = !DILocation(line: 114, column: 37, scope: !85, inlinedAt: !13)
!153 = !DILocation(line: 114, column: 8, scope: !85, inlinedAt: !13)
!154 = !DILocation(line: 115, column: 19, scope: !85, inlinedAt: !13)
!155 = !DILocation(line: 115, column: 15, scope: !85, inlinedAt: !13)
!156 = !DILocation(line: 115, column: 8, scope: !85, inlinedAt: !13)
!157 = !DILocation(line: 997, column: 17, scope: !12, inlinedAt: !13)
!158 = !DILocation(line: 998, column: 19, scope: !12, inlinedAt: !13)
!159 = !DILocation(line: 1003, column: 18, scope: !12, inlinedAt: !13)
!160 = !DILocation(line: 1005, column: 23, scope: !12, inlinedAt: !13)
!161 = !DILocation(line: 1006, column: 23, scope: !12, inlinedAt: !13)
!162 = !DILocation(line: 1505, column: 27, scope: !12, inlinedAt: !13)
!163 = !DILocation(line: 1505, column: 57, scope: !12, inlinedAt: !13)
!164 = !DILocation(line: 1520, column: 38, scope: !12, inlinedAt: !13)
!165 = !DILocation(line: 1598, column: 4, scope: !7)
