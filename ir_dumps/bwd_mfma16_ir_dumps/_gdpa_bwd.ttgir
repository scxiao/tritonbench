#blocked = #ttg.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 32]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 16], [0, 8]], warp = [[16, 0], [32, 0], [64, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [16, 0], [32, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [0, 0], [0, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1], [0, 2], [0, 16], [0, 32], [16, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 4], [0, 8]], warp = [[0, 0], [0, 0], [0, 0]], block = []}>
#loc = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1524:0)
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [8, 1], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared2 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [0, 1]}>
#smem = #ttg.shared_memory
#loc195 = loc("Q"(#loc))
#loc196 = loc("Q_offsets"(#loc))
#loc197 = loc("K"(#loc))
#loc198 = loc("K_offsets"(#loc))
#loc199 = loc("V"(#loc))
#loc200 = loc("DO"(#loc))
#loc201 = loc("Out_offsets"(#loc))
#loc202 = loc("DQ"(#loc))
#loc203 = loc("DK"(#loc))
#loc204 = loc("DV"(#loc))
#loc205 = loc("stride_qm"(#loc))
#loc206 = loc("stride_km"(#loc))
#loc207 = loc("stride_qh"(#loc))
#loc208 = loc("stride_kh"(#loc))
#loc209 = loc("stride_dom"(#loc))
#loc210 = loc("stride_doh"(#loc))
#loc211 = loc("Z"(#loc))
#loc212 = loc("H"(#loc))
#loc213 = loc("N_CTX"(#loc))
#loc214 = loc("N_CTX_KV"(#loc))
#loc215 = loc("qk_scale"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gdpa_bwd(%Q: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q"(#loc)), %Q_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q_offsets"(#loc)), %K: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K"(#loc)), %K_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K_offsets"(#loc)), %V: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("V"(#loc)), %DO: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DO"(#loc)), %Out_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out_offsets"(#loc)), %DQ: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DQ"(#loc)), %DK: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DK"(#loc)), %DV: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DV"(#loc)), %stride_qm: i32 {tt.divisibility = 16 : i32} loc("stride_qm"(#loc)), %stride_km: i32 {tt.divisibility = 16 : i32} loc("stride_km"(#loc)), %stride_qh: i32 {tt.divisibility = 16 : i32} loc("stride_qh"(#loc)), %stride_kh: i32 {tt.divisibility = 16 : i32} loc("stride_kh"(#loc)), %stride_dom: i32 {tt.divisibility = 16 : i32} loc("stride_dom"(#loc)), %stride_doh: i32 {tt.divisibility = 16 : i32} loc("stride_doh"(#loc)), %Z: i32 {tt.divisibility = 16 : i32} loc("Z"(#loc)), %H: i32 loc("H"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc)), %N_CTX_KV: i32 {tt.divisibility = 16 : i32} loc("N_CTX_KV"(#loc)), %qk_scale: f32 loc("qk_scale"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %cst_0 = arith.constant dense<2.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_1 = arith.constant dense<0.107032225> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_2 = arith.constant dense<5.000000e-01> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_4 = arith.constant dense<4.471500e-02> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_5 = arith.constant dense<0.797884583> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc216)
    %c1_i32 = arith.constant 1 : i32 loc(#loc216)
    %c32_i32 = arith.constant 32 : i32 loc(#loc216)
    %c31_i32 = arith.constant 31 : i32 loc(#loc216)
    %true = arith.constant true loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<64x1xi32, #blocked> loc(#loc216)
    %cst_8 = arith.constant dense<64> : tensor<1x64xi32, #blocked1> loc(#loc216)
    %cst_9 = arith.constant dense<64> : tensor<1x64xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi32, #linear> loc(#loc216)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    %off_z = tt.get_program_id z : i32 loc(#loc217)
    %off_seq_h = tt.get_program_id x : i32 loc(#loc218)
    %off_h = arith.remsi %off_seq_h, %H : i32 loc(#loc219)
    %pid = arith.divsi %off_seq_h, %H : i32 loc(#loc220)
    %begin_q = tt.addptr %Q_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc377)
    %begin_q_11 = tt.load %begin_q : !tt.ptr<i32> loc(#loc378)
    %end_q = tt.addptr %begin_q, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc379)
    %end_q_12 = tt.load %end_q : !tt.ptr<i32> loc(#loc380)
    %qlen = arith.subi %end_q_12, %begin_q_11 : i32 loc(#loc381)
    %begin_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc382)
    %begin_k_13 = tt.load %begin_k : !tt.ptr<i32> loc(#loc383)
    %end_k = tt.addptr %begin_k, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc384)
    %end_k_14 = tt.load %end_k : !tt.ptr<i32> loc(#loc385)
    %klen = arith.subi %end_k_14, %begin_k_13 : i32 loc(#loc386)
    %start_n = arith.muli %pid, %c128_i32 : i32 loc(#loc387)
    %0 = arith.cmpi sle, %start_n, %klen : i32 loc(#loc232)
    %1 = arith.cmpi sle, %start_n, %qlen : i32 loc(#loc233)
    %2 = arith.ori %0, %1 : i1 loc(#loc234)
    %3:7 = scf.if %2 -> (!tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>) {
      %begin_o = tt.addptr %Out_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc388)
      %begin_o_15 = tt.load %begin_o : !tt.ptr<i32> loc(#loc389)
      %off_h2 = arith.extsi %off_h : i32 to i64 loc(#loc390)
      %qadj = arith.extsi %stride_qh : i32 to i64 loc(#loc391)
      %qadj_16 = arith.muli %off_h2, %qadj : i64 loc(#loc391)
      %qadj_17 = arith.muli %begin_q_11, %stride_qm : i32 loc(#loc392)
      %qadj_18 = arith.extsi %qadj_17 : i32 to i64 loc(#loc393)
      %qadj_19 = arith.addi %qadj_16, %qadj_18 : i64 loc(#loc393)
      %kadj = arith.muli %off_h, %stride_kh : i32 loc(#loc394)
      %kadj_20 = arith.muli %begin_k_13, %stride_km : i32 loc(#loc395)
      %kadj_21 = arith.addi %kadj, %kadj_20 : i32 loc(#loc396)
      %doadj = arith.extsi %stride_doh : i32 to i64 loc(#loc397)
      %doadj_22 = arith.muli %off_h2, %doadj : i64 loc(#loc397)
      %doadj_23 = arith.muli %begin_o_15, %stride_dom : i32 loc(#loc398)
      %doadj_24 = arith.extsi %doadj_23 : i32 to i64 loc(#loc399)
      %doadj_25 = arith.addi %doadj_22, %doadj_24 : i64 loc(#loc399)
      %Q_26 = tt.addptr %Q, %qadj_19 : !tt.ptr<bf16>, i64 loc(#loc493)
      %K_27 = tt.addptr %K, %kadj_21 : !tt.ptr<bf16>, i32 loc(#loc494)
      %V_28 = tt.addptr %V, %kadj_21 : !tt.ptr<bf16>, i32 loc(#loc495)
      %DO_29 = tt.addptr %DO, %doadj_25 : !tt.ptr<bf16>, i64 loc(#loc496)
      %DQ_30 = tt.addptr %DQ, %qadj_19 : !tt.ptr<bf16>, i64 loc(#loc497)
      %DK_31 = tt.addptr %DK, %kadj_21 : !tt.ptr<bf16>, i32 loc(#loc498)
      %DV_32 = tt.addptr %DV, %kadj_21 : !tt.ptr<bf16>, i32 loc(#loc499)
      scf.yield %Q_26, %K_27, %V_28, %DO_29, %DQ_30, %DK_31, %DV_32 : !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc499)
    } else {
      scf.yield %Q, %K, %V, %DO, %DQ, %DK, %DV : !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc216)
    } loc(#loc235)
    %4 = arith.cmpi slt, %start_n, %klen : i32 loc(#loc255)
    scf.if %4 {
      %offs_n = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc407)
      %offs_n_15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc407)
      %offs_n_16 = tt.splat %start_n : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc408)
      %offs_n_17 = tt.splat %start_n : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc408)
      %offs_n_18 = arith.addi %offs_n_16, %offs_n : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc408)
      %offs_n_19 = arith.addi %offs_n_17, %offs_n_15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc408)
      %kmask = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc409)
      %kmask_20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc409)
      %kmask_21 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc409)
      %kmask_22 = tt.expand_dims %kmask {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x64xi32, #linear> loc(#loc409)
      %kmask_23 = tt.expand_dims %kmask_20 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc409)
      %kmask_24 = tt.expand_dims %kmask_21 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc409)
      %kmask_25 = arith.cmpi slt, %kmask_22, %cst_10 : tensor<1x64xi32, #linear> loc(#loc410)
      %kmask_26 = arith.cmpi slt, %kmask_23, %cst_9 : tensor<1x64xi32, #blocked2> loc(#loc410)
      %kmask_27 = arith.cmpi slt, %kmask_24, %cst_8 : tensor<1x64xi32, #blocked1> loc(#loc410)
      %kmask_28 = tt.expand_dims %offs_n_18 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc411)
      %kmask_29 = tt.expand_dims %offs_n_19 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc411)
      %kmask_30 = tt.splat %klen : i32 -> tensor<128x1xi32, #linear> loc(#loc412)
      %kmask_31 = tt.splat %klen : i32 -> tensor<128x1xi32, #blocked2> loc(#loc412)
      %kmask_32 = arith.cmpi slt, %kmask_28, %kmask_30 : tensor<128x1xi32, #linear> loc(#loc412)
      %kmask_33 = arith.cmpi slt, %kmask_29, %kmask_31 : tensor<128x1xi32, #blocked2> loc(#loc412)
      %kmask_34 = tt.broadcast %kmask_25 : tensor<1x64xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc413)
      %kmask_35 = tt.broadcast %kmask_26 : tensor<1x64xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc413)
      %kmask_36 = tt.broadcast %kmask_32 : tensor<128x1xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc413)
      %kmask_37 = tt.broadcast %kmask_33 : tensor<128x1xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc413)
      %kmask_38 = arith.andi %kmask_34, %kmask_36 : tensor<128x64xi1, #linear> loc(#loc413)
      %kmask_39 = arith.andi %kmask_35, %kmask_37 : tensor<128x64xi1, #blocked2> loc(#loc413)
      %k = tt.expand_dims %offs_n_15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc414)
      %k_40 = arith.muli %start_n, %stride_km : i32 loc(#loc414)
      %k_41 = tt.splat %stride_km : i32 -> tensor<128x1xi32, #blocked2> loc(#loc414)
      %k_42 = arith.muli %k, %k_41 : tensor<128x1xi32, #blocked2> loc(#loc414)
      %k_43 = tt.addptr %3#1, %k_40 : !tt.ptr<bf16>, i32 loc(#loc414)
      %k_44 = tt.broadcast %k_42 : tensor<128x1xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc415)
      %k_45 = tt.broadcast %kmask_23 : tensor<1x64xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc415)
      %k_46 = arith.addi %k_45, %k_44 : tensor<128x64xi32, #blocked2> loc(#loc415)
      %k_47 = amdgpu.buffer_load %k_43[%k_46], %kmask_39 stride = %stride_km : tensor<128x64xbf16, #blocked2> loc(#loc416)
      %k_48 = ttg.local_alloc %k_47 : (tensor<128x64xbf16, #blocked2>) -> !ttg.memdesc<128x64xbf16, #shared, #smem> loc(#loc416)
      %k_49 = ttg.local_load %k_48 : !ttg.memdesc<128x64xbf16, #shared, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc416)
      %v = tt.addptr %3#2, %k_40 : !tt.ptr<bf16>, i32 loc(#loc417)
      %v_50 = amdgpu.buffer_load %v[%k_46], %kmask_39 stride = %stride_km : tensor<128x64xbf16, #blocked2> loc(#loc418)
      %v_51 = ttg.local_alloc %v_50 : (tensor<128x64xbf16, #blocked2>) -> !ttg.memdesc<128x64xbf16, #shared1, #smem> loc(#loc418)
      %v_52 = ttg.local_load %v_51 : !ttg.memdesc<128x64xbf16, #shared1, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc418)
      %num_steps = arith.addi %qlen, %c31_i32 : i32 loc(#loc500)
      %num_steps_53 = arith.divsi %num_steps, %c32_i32 : i32 loc(#loc501)
      %offs_m = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc420)
      %offs_m_54 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc420)
      %qT_ptrs = tt.expand_dims %offs_m {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc421)
      %qT_ptrs_55 = tt.splat %stride_qm : i32 -> tensor<1x32xi32, #blocked> loc(#loc421)
      %qT_ptrs_56 = arith.muli %qT_ptrs, %qT_ptrs_55 : tensor<1x32xi32, #blocked> loc(#loc421)
      %qT_ptrs_57 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc422)
      %qT_ptrs_58 = tt.expand_dims %qT_ptrs_57 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc422)
      %qT_ptrs_59 = tt.broadcast %qT_ptrs_56 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc423)
      %qT_ptrs_60 = tt.broadcast %qT_ptrs_58 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc423)
      %qT_ptrs_61 = arith.addi %qT_ptrs_60, %qT_ptrs_59 : tensor<64x32xi32, #blocked> loc(#loc423)
      %do_ptrs = tt.expand_dims %offs_m_54 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc424)
      %do_ptrs_62 = tt.splat %stride_dom : i32 -> tensor<32x1xi32, #blocked1> loc(#loc424)
      %do_ptrs_63 = arith.muli %do_ptrs, %do_ptrs_62 : tensor<32x1xi32, #blocked1> loc(#loc424)
      %do_ptrs_64 = tt.broadcast %do_ptrs_63 : tensor<32x1xi32, #blocked1> -> tensor<32x64xi32, #blocked1> loc(#loc425)
      %do_ptrs_65 = tt.broadcast %kmask_24 : tensor<1x64xi32, #blocked1> -> tensor<32x64xi32, #blocked1> loc(#loc425)
      %do_ptrs_66 = arith.addi %do_ptrs_65, %do_ptrs_64 : tensor<32x64xi32, #blocked1> loc(#loc425)
      %qmask = arith.cmpi slt, %qT_ptrs_58, %cst_7 : tensor<64x1xi32, #blocked> loc(#loc426)
      %qmask_67 = tt.splat %qlen : i32 -> tensor<1x32xi32, #blocked> loc(#loc427)
      %qmask_68 = tt.broadcast %qmask : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc428)
      %omask = tt.splat %qlen : i32 -> tensor<32x1xi32, #blocked1> loc(#loc429)
      %omask_69 = tt.broadcast %kmask_27 : tensor<1x64xi1, #blocked1> -> tensor<32x64xi1, #blocked1> loc(#loc430)
      %ppT = tt.splat %qk_scale : f32 -> tensor<128x32xf32, #mma> loc(#loc431)
      %qT_ptrs_70 = arith.muli %stride_qm, %c32_i32 : i32 loc(#loc432)
      %do_ptrs_71 = arith.muli %stride_dom, %c32_i32 : i32 loc(#loc433)
      %curr_m:5 = scf.for %curr_m_78 = %c0_i32 to %num_steps_53 step %c1_i32 iter_args(%arg22 = %cst, %arg23 = %cst, %arg24 = %c0_i32, %qT_ptrs_79 = %3#0, %do_ptrs_80 = %3#3) -> (tensor<128x64xf32, #mma>, tensor<128x64xf32, #mma>, i32, !tt.ptr<bf16>, !tt.ptr<bf16>)  : i32 {
        %offs_m_81 = tt.splat %arg24 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc435)
        %offs_m_82 = tt.splat %arg24 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc435)
        %offs_m_83 = arith.addi %offs_m_81, %offs_m : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc435)
        %offs_m_84 = arith.addi %offs_m_82, %offs_m_54 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc435)
        %qmask_85 = tt.expand_dims %offs_m_83 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc436)
        %qmask_86 = arith.cmpi slt, %qmask_85, %qmask_67 : tensor<1x32xi32, #blocked> loc(#loc427)
        %qmask_87 = tt.broadcast %qmask_86 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc428)
        %qmask_88 = arith.andi %qmask_68, %qmask_87 : tensor<64x32xi1, #blocked> loc(#loc428)
        %qT = amdgpu.buffer_load %qT_ptrs_79[%qT_ptrs_61], %qmask_88 stride = %stride_qm : tensor<64x32xbf16, #blocked> loc(#loc437)
        %qT_89 = ttg.local_alloc %qT : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared2, #smem> loc(#loc437)
        %dk = ttg.local_load %qT_89 : !ttg.memdesc<64x32xbf16, #shared2, #smem> -> tensor<64x32xbf16, #linear1> loc(#loc438)
        %dk_90 = tt.trans %dk {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc439)
        %qT_91 = ttg.local_load %qT_89 : !ttg.memdesc<64x32xbf16, #shared2, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc437)
        %qkT = tt.dot %k_49, %qT_91, %cst_6 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc440)
        %omask_92 = tt.expand_dims %offs_m_84 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc441)
        %omask_93 = arith.cmpi slt, %omask_92, %omask : tensor<32x1xi32, #blocked1> loc(#loc429)
        %omask_94 = tt.broadcast %omask_93 : tensor<32x1xi1, #blocked1> -> tensor<32x64xi1, #blocked1> loc(#loc430)
        %omask_95 = arith.andi %omask_94, %omask_69 : tensor<32x64xi1, #blocked1> loc(#loc430)
        %do = amdgpu.buffer_load %do_ptrs_80[%do_ptrs_66], %omask_95 stride = %stride_dom : tensor<32x64xbf16, #blocked1> loc(#loc442)
        %do_96 = ttg.local_alloc %do : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared1, #smem> loc(#loc442)
        %dpT = ttg.local_load %do_96 : !ttg.memdesc<32x64xbf16, #shared1, #smem> -> tensor<32x64xbf16, #linear2> loc(#loc443)
        %dpT_97 = tt.trans %dpT {order = array<i32: 1, 0>} : tensor<32x64xbf16, #linear2> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc444)
        %do_98 = ttg.local_load %do_96 : !ttg.memdesc<32x64xbf16, #shared1, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc442)
        %dpT_99 = tt.dot %v_52, %dpT_97, %cst_6 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xf32, #mma> loc(#loc443)
        %tanh_out = arith.mulf %qkT, %cst_5 : tensor<128x32xf32, #mma> loc(#loc445)
        %tanh_out_100 = arith.mulf %qkT, %cst_4 : tensor<128x32xf32, #mma> loc(#loc446)
        %tanh_out_101 = arith.mulf %tanh_out_100, %qkT : tensor<128x32xf32, #mma> loc(#loc447)
        %tanh_out_102 = arith.addf %tanh_out_101, %cst_3 : tensor<128x32xf32, #mma> loc(#loc448)
        %tanh_out_103 = arith.mulf %tanh_out, %tanh_out_102 : tensor<128x32xf32, #mma> loc(#loc449)
        %tanh_out_104 = arith.mulf %tanh_out_103, %cst_0 : tensor<128x32xf32, #mma> loc(#loc532)
        %tanh_out_105 = arith.subf %cst_6, %tanh_out_104 : tensor<128x32xf32, #mma> loc(#loc555)
        %tanh_out_106 = math.exp %tanh_out_105 : tensor<128x32xf32, #mma> loc(#loc556)
        %tanh_out_107 = arith.addf %tanh_out_106, %cst_3 : tensor<128x32xf32, #mma> loc(#loc557)
        %tanh_out_108 = arith.divf %cst_3, %tanh_out_107 : tensor<128x32xf32, #mma> loc(#loc558)
        %tanh_out_109 = arith.mulf %tanh_out_108, %cst_0 : tensor<128x32xf32, #mma> loc(#loc534)
        %tanh_out_110 = arith.subf %tanh_out_109, %cst_3 : tensor<128x32xf32, #mma> loc(#loc535)
        %ppT_111 = arith.mulf %qkT, %cst_2 : tensor<128x32xf32, #mma> loc(#loc451)
        %ppT_112 = arith.addf %tanh_out_110, %cst_3 : tensor<128x32xf32, #mma> loc(#loc452)
        %ppT_113 = arith.mulf %ppT_111, %ppT_112 : tensor<128x32xf32, #mma> loc(#loc453)
        %ppT_114 = arith.mulf %ppT_113, %ppT : tensor<128x32xf32, #mma> loc(#loc431)
        %ppT_115 = arith.truncf %ppT_114 : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc454)
        %ppT_116 = ttg.convert_layout %ppT_115 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc454)
        %dv = tt.dot %ppT_116, %do_98, %arg23 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x64xf32, #mma> loc(#loc455)
        %pT = arith.mulf %tanh_out_110, %tanh_out_110 : tensor<128x32xf32, #mma> loc(#loc456)
        %pT_117 = arith.subf %cst_3, %pT : tensor<128x32xf32, #mma> loc(#loc457)
        %pT_118 = arith.mulf %ppT_111, %pT_117 : tensor<128x32xf32, #mma> loc(#loc458)
        %pT_119 = arith.mulf %qkT, %cst_1 : tensor<128x32xf32, #mma> loc(#loc459)
        %pT_120 = arith.mulf %pT_119, %qkT : tensor<128x32xf32, #mma> loc(#loc460)
        %pT_121 = arith.addf %pT_120, %cst_5 : tensor<128x32xf32, #mma> loc(#loc461)
        %pT_122 = arith.mulf %pT_118, %pT_121 : tensor<128x32xf32, #mma> loc(#loc462)
        %pT_123 = arith.mulf %ppT_112, %cst_2 : tensor<128x32xf32, #mma> loc(#loc463)
        %pT_124 = arith.addf %pT_122, %pT_123 : tensor<128x32xf32, #mma> loc(#loc464)
        %pT_125 = arith.mulf %pT_124, %ppT : tensor<128x32xf32, #mma> loc(#loc465)
        %dsT = arith.mulf %pT_125, %dpT_99 : tensor<128x32xf32, #mma> loc(#loc466)
        %dsT_126 = arith.truncf %dsT : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc467)
        %dsT_127 = ttg.convert_layout %dsT_126 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc467)
        %dk_128 = tt.dot %dsT_127, %dk_90, %arg22 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x64xf32, #mma> loc(#loc438)
        %curr_m_129 = arith.addi %arg24, %c32_i32 : i32 loc(#loc468)
        %qT_ptrs_130 = tt.addptr %qT_ptrs_79, %qT_ptrs_70 : !tt.ptr<bf16>, i32 loc(#loc469)
        %do_ptrs_131 = tt.addptr %do_ptrs_80, %do_ptrs_71 : !tt.ptr<bf16>, i32 loc(#loc470)
        scf.yield %dk_128, %dv, %curr_m_129, %qT_ptrs_130, %do_ptrs_131 : tensor<128x64xf32, #mma>, tensor<128x64xf32, #mma>, i32, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc471)
      } {tt.loop_unroll_factor = 1 : i32} loc(#loc567)
      %dv_ptrs = tt.expand_dims %offs_n {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc472)
      %dv_ptrs_72 = tt.splat %stride_km : i32 -> tensor<128x1xi32, #linear> loc(#loc472)
      %dv_ptrs_73 = arith.muli %dv_ptrs, %dv_ptrs_72 : tensor<128x1xi32, #linear> loc(#loc472)
      %dv_ptrs_74 = tt.addptr %3#6, %k_40 : !tt.ptr<bf16>, i32 loc(#loc472)
      %dv_ptrs_75 = tt.broadcast %dv_ptrs_73 : tensor<128x1xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc473)
      %dv_ptrs_76 = tt.broadcast %kmask_22 : tensor<1x64xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc473)
      %dv_ptrs_77 = arith.addi %dv_ptrs_76, %dv_ptrs_75 : tensor<128x64xi32, #linear> loc(#loc473)
      %6 = arith.truncf %curr_m#1 : tensor<128x64xf32, #mma> to tensor<128x64xbf16, #mma> loc(#loc324)
      %7 = ttg.convert_layout %6 : tensor<128x64xbf16, #mma> -> tensor<128x64xbf16, #linear> loc(#loc324)
      amdgpu.buffer_store %7, %dv_ptrs_74[%dv_ptrs_77], %kmask_38 stride = %stride_km : tensor<128x64xbf16, #linear> loc(#loc324)
      %dk_ptrs = tt.addptr %3#5, %k_40 : !tt.ptr<bf16>, i32 loc(#loc474)
      %8 = arith.truncf %curr_m#0 : tensor<128x64xf32, #mma> to tensor<128x64xbf16, #mma> loc(#loc326)
      %9 = ttg.convert_layout %8 : tensor<128x64xbf16, #mma> -> tensor<128x64xbf16, #linear> loc(#loc326)
      amdgpu.buffer_store %9, %dk_ptrs[%dv_ptrs_77], %kmask_38 stride = %stride_km : tensor<128x64xbf16, #linear> loc(#loc326)
    } loc(#loc256)
    %5 = arith.cmpi slt, %start_n, %qlen : i32 loc(#loc327)
    scf.if %5 {
      %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc475)
      %offs_m_15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc475)
      %offs_m_16 = tt.splat %start_n : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc476)
      %offs_m_17 = tt.splat %start_n : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc476)
      %offs_m_18 = arith.addi %offs_m_16, %offs_m : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc476)
      %offs_m_19 = arith.addi %offs_m_17, %offs_m_15 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc476)
      %qmask = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc477)
      %qmask_20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc477)
      %qmask_21 = tt.expand_dims %qmask {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x64xi32, #linear> loc(#loc477)
      %qmask_22 = tt.expand_dims %qmask_20 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc477)
      %qmask_23 = arith.cmpi slt, %qmask_21, %cst_10 : tensor<1x64xi32, #linear> loc(#loc478)
      %qmask_24 = arith.cmpi slt, %qmask_22, %cst_9 : tensor<1x64xi32, #blocked2> loc(#loc478)
      %qmask_25 = tt.expand_dims %offs_m_18 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc479)
      %qmask_26 = tt.expand_dims %offs_m_19 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc479)
      %qmask_27 = tt.splat %qlen : i32 -> tensor<128x1xi32, #linear> loc(#loc480)
      %qmask_28 = tt.splat %qlen : i32 -> tensor<128x1xi32, #blocked2> loc(#loc480)
      %qmask_29 = arith.cmpi slt, %qmask_25, %qmask_27 : tensor<128x1xi32, #linear> loc(#loc480)
      %qmask_30 = arith.cmpi slt, %qmask_26, %qmask_28 : tensor<128x1xi32, #blocked2> loc(#loc480)
      %qmask_31 = tt.broadcast %qmask_23 : tensor<1x64xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc481)
      %qmask_32 = tt.broadcast %qmask_24 : tensor<1x64xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc481)
      %qmask_33 = tt.broadcast %qmask_29 : tensor<128x1xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc481)
      %qmask_34 = tt.broadcast %qmask_30 : tensor<128x1xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc481)
      %qmask_35 = arith.andi %qmask_31, %qmask_33 : tensor<128x64xi1, #linear> loc(#loc481)
      %qmask_36 = arith.andi %qmask_32, %qmask_34 : tensor<128x64xi1, #blocked2> loc(#loc481)
      %q = tt.expand_dims %offs_m_15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc482)
      %q_37 = arith.muli %start_n, %stride_qm : i32 loc(#loc482)
      %q_38 = tt.splat %stride_qm : i32 -> tensor<128x1xi32, #blocked2> loc(#loc482)
      %q_39 = arith.muli %q, %q_38 : tensor<128x1xi32, #blocked2> loc(#loc482)
      %q_40 = tt.addptr %3#0, %q_37 : !tt.ptr<bf16>, i32 loc(#loc482)
      %q_41 = tt.broadcast %q_39 : tensor<128x1xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc483)
      %q_42 = tt.broadcast %qmask_22 : tensor<1x64xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc483)
      %q_43 = arith.addi %q_42, %q_41 : tensor<128x64xi32, #blocked2> loc(#loc483)
      %q_44 = amdgpu.buffer_load %q_40[%q_43], %qmask_36 stride = %stride_qm : tensor<128x64xbf16, #blocked2> loc(#loc484)
      %q_45 = ttg.local_alloc %q_44 : (tensor<128x64xbf16, #blocked2>) -> !ttg.memdesc<128x64xbf16, #shared, #smem> loc(#loc484)
      %q_46 = ttg.local_load %q_45 : !ttg.memdesc<128x64xbf16, #shared, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc484)
      %do = arith.muli %start_n, %stride_dom : i32 loc(#loc485)
      %do_47 = tt.splat %stride_dom : i32 -> tensor<128x1xi32, #blocked2> loc(#loc485)
      %do_48 = arith.muli %q, %do_47 : tensor<128x1xi32, #blocked2> loc(#loc485)
      %do_49 = tt.addptr %3#3, %do : !tt.ptr<bf16>, i32 loc(#loc485)
      %do_50 = tt.broadcast %do_48 : tensor<128x1xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc486)
      %do_51 = arith.addi %q_42, %do_50 : tensor<128x64xi32, #blocked2> loc(#loc486)
      %do_52 = amdgpu.buffer_load %do_49[%do_51], %qmask_36 stride = %stride_dom : tensor<128x64xbf16, #blocked2> loc(#loc487)
      %do_53 = ttg.local_alloc %do_52 : (tensor<128x64xbf16, #blocked2>) -> !ttg.memdesc<128x64xbf16, #shared, #smem> loc(#loc487)
      %do_54 = ttg.local_load %do_53 : !ttg.memdesc<128x64xbf16, #shared, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc487)
      %num_steps = arith.addi %klen, %c31_i32 : i32 loc(#loc504)
      %num_steps_55 = arith.divsi %num_steps, %c32_i32 : i32 loc(#loc505)
      %offs_n = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc506)
      %kT_ptrs = tt.expand_dims %offs_n {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc507)
      %kT_ptrs_56 = tt.splat %stride_km : i32 -> tensor<1x32xi32, #blocked> loc(#loc507)
      %kT_ptrs_57 = arith.muli %kT_ptrs, %kT_ptrs_56 : tensor<1x32xi32, #blocked> loc(#loc507)
      %kT_ptrs_58 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc508)
      %kT_ptrs_59 = tt.expand_dims %kT_ptrs_58 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc508)
      %kT_ptrs_60 = tt.broadcast %kT_ptrs_57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc509)
      %kT_ptrs_61 = tt.broadcast %kT_ptrs_59 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc509)
      %kT_ptrs_62 = arith.addi %kT_ptrs_61, %kT_ptrs_60 : tensor<64x32xi32, #blocked> loc(#loc509)
      %kmask = arith.cmpi slt, %kT_ptrs_59, %cst_7 : tensor<64x1xi32, #blocked> loc(#loc510)
      %kmask_63 = tt.splat %klen : i32 -> tensor<1x32xi32, #blocked> loc(#loc511)
      %kmask_64 = tt.broadcast %kmask : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc512)
      %p = tt.splat %qk_scale : f32 -> tensor<128x32xf32, #mma> loc(#loc513)
      %kT_ptrs_65 = arith.muli %stride_km, %c32_i32 : i32 loc(#loc514)
      %curr_n:4 = scf.for %curr_n_72 = %c0_i32 to %num_steps_55 step %c1_i32 iter_args(%arg22 = %cst, %arg23 = %c0_i32, %kT_ptrs_73 = %3#1, %vT_ptrs = %3#2) -> (tensor<128x64xf32, #mma>, i32, !tt.ptr<bf16>, !tt.ptr<bf16>)  : i32 {
        %offs_n_74 = tt.splat %arg23 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc516)
        %offs_n_75 = arith.addi %offs_n_74, %offs_n : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc516)
        %kmask_76 = tt.expand_dims %offs_n_75 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc517)
        %kmask_77 = arith.cmpi slt, %kmask_76, %kmask_63 : tensor<1x32xi32, #blocked> loc(#loc511)
        %kmask_78 = tt.broadcast %kmask_77 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc512)
        %kmask_79 = arith.andi %kmask_64, %kmask_78 : tensor<64x32xi1, #blocked> loc(#loc512)
        %kT = amdgpu.buffer_load %kT_ptrs_73[%kT_ptrs_62], %kmask_79 stride = %stride_km : tensor<64x32xbf16, #blocked> loc(#loc518)
        %kT_80 = ttg.local_alloc %kT : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared2, #smem> loc(#loc518)
        %dq = ttg.local_load %kT_80 : !ttg.memdesc<64x32xbf16, #shared2, #smem> -> tensor<64x32xbf16, #linear1> loc(#loc519)
        %dq_81 = tt.trans %dq {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc520)
        %kT_82 = ttg.local_load %kT_80 : !ttg.memdesc<64x32xbf16, #shared2, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc518)
        %vT = amdgpu.buffer_load %vT_ptrs[%kT_ptrs_62], %kmask_79 stride = %stride_km : tensor<64x32xbf16, #blocked> loc(#loc521)
        %qk = tt.dot %q_46, %kT_82, %cst_6 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc522)
        %tanh_out = arith.mulf %qk, %cst_5 : tensor<128x32xf32, #mma> loc(#loc537)
        %tanh_out_83 = arith.mulf %qk, %cst_4 : tensor<128x32xf32, #mma> loc(#loc538)
        %tanh_out_84 = arith.mulf %tanh_out_83, %qk : tensor<128x32xf32, #mma> loc(#loc539)
        %tanh_out_85 = arith.addf %tanh_out_84, %cst_3 : tensor<128x32xf32, #mma> loc(#loc540)
        %tanh_out_86 = arith.mulf %tanh_out, %tanh_out_85 : tensor<128x32xf32, #mma> loc(#loc541)
        %tanh_out_87 = arith.mulf %tanh_out_86, %cst_0 : tensor<128x32xf32, #mma> loc(#loc563)
        %tanh_out_88 = arith.subf %cst_6, %tanh_out_87 : tensor<128x32xf32, #mma> loc(#loc568)
        %tanh_out_89 = math.exp %tanh_out_88 : tensor<128x32xf32, #mma> loc(#loc569)
        %tanh_out_90 = arith.addf %tanh_out_89, %cst_3 : tensor<128x32xf32, #mma> loc(#loc570)
        %tanh_out_91 = arith.divf %cst_3, %tanh_out_90 : tensor<128x32xf32, #mma> loc(#loc571)
        %tanh_out_92 = arith.mulf %tanh_out_91, %cst_0 : tensor<128x32xf32, #mma> loc(#loc565)
        %tanh_out_93 = arith.subf %tanh_out_92, %cst_3 : tensor<128x32xf32, #mma> loc(#loc566)
        %p_94 = arith.mulf %qk, %cst_2 : tensor<128x32xf32, #mma> loc(#loc543)
        %p_95 = arith.mulf %tanh_out_93, %tanh_out_93 : tensor<128x32xf32, #mma> loc(#loc544)
        %p_96 = arith.subf %cst_3, %p_95 : tensor<128x32xf32, #mma> loc(#loc545)
        %p_97 = arith.mulf %qk, %cst_1 : tensor<128x32xf32, #mma> loc(#loc546)
        %p_98 = arith.mulf %p_97, %qk : tensor<128x32xf32, #mma> loc(#loc547)
        %p_99 = arith.addf %p_98, %cst_5 : tensor<128x32xf32, #mma> loc(#loc548)
        %p_100 = arith.mulf %p_96, %p_99 : tensor<128x32xf32, #mma> loc(#loc549)
        %p_101 = arith.mulf %p_94, %p_100 : tensor<128x32xf32, #mma> loc(#loc550)
        %p_102 = arith.addf %tanh_out_93, %cst_3 : tensor<128x32xf32, #mma> loc(#loc551)
        %p_103 = arith.mulf %p_102, %cst_2 : tensor<128x32xf32, #mma> loc(#loc552)
        %p_104 = arith.addf %p_101, %p_103 : tensor<128x32xf32, #mma> loc(#loc553)
        %p_105 = arith.mulf %p_104, %p : tensor<128x32xf32, #mma> loc(#loc513)
        %vT_106 = ttg.local_alloc %vT : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared2, #smem> loc(#loc521)
        %vT_107 = ttg.local_load %vT_106 : !ttg.memdesc<64x32xbf16, #shared2, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc521)
        %dp = tt.dot %do_54, %vT_107, %cst_6 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc524)
        %ds = arith.mulf %p_105, %dp : tensor<128x32xf32, #mma> loc(#loc525)
        %ds_108 = arith.truncf %ds : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc526)
        %ds_109 = ttg.convert_layout %ds_108 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc526)
        %dq_110 = tt.dot %ds_109, %dq_81, %arg22 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x64xf32, #mma> loc(#loc519)
        %curr_n_111 = arith.addi %arg23, %c32_i32 : i32 loc(#loc527)
        %kT_ptrs_112 = tt.addptr %kT_ptrs_73, %kT_ptrs_65 : !tt.ptr<bf16>, i32 loc(#loc528)
        %vT_ptrs_113 = tt.addptr %vT_ptrs, %kT_ptrs_65 : !tt.ptr<bf16>, i32 loc(#loc529)
        scf.yield %dq_110, %curr_n_111, %kT_ptrs_112, %vT_ptrs_113 : tensor<128x64xf32, #mma>, i32, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc530)
      } {tt.loop_unroll_factor = 1 : i32} loc(#loc562)
      %dq_ptrs = tt.expand_dims %offs_m {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc491)
      %dq_ptrs_66 = tt.splat %stride_qm : i32 -> tensor<128x1xi32, #linear> loc(#loc491)
      %dq_ptrs_67 = arith.muli %dq_ptrs, %dq_ptrs_66 : tensor<128x1xi32, #linear> loc(#loc491)
      %dq_ptrs_68 = tt.addptr %3#4, %q_37 : !tt.ptr<bf16>, i32 loc(#loc491)
      %dq_ptrs_69 = tt.broadcast %dq_ptrs_67 : tensor<128x1xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc492)
      %dq_ptrs_70 = tt.broadcast %qmask_21 : tensor<1x64xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc492)
      %dq_ptrs_71 = arith.addi %dq_ptrs_70, %dq_ptrs_69 : tensor<128x64xi32, #linear> loc(#loc492)
      %6 = arith.truncf %curr_n#0 : tensor<128x64xf32, #mma> to tensor<128x64xbf16, #mma> loc(#loc376)
      %7 = ttg.convert_layout %6 : tensor<128x64xbf16, #mma> -> tensor<128x64xbf16, #linear> loc(#loc376)
      amdgpu.buffer_store %7, %dq_ptrs_68[%dq_ptrs_71], %qmask_35 stride = %stride_qm : tensor<128x64xbf16, #linear> loc(#loc376)
    } loc(#loc328)
    tt.return loc(#loc194)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1645:8)
#loc3 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1568:14)
#loc4 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1569:14)
#loc5 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1570:14)
#loc6 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1571:14)
#loc7 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1572:14)
#loc8 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1573:14)
#loc9 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1574:14)
#loc10 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1579:30)
#loc11 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1587:30)
#loc12 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1588:24)
#loc13 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1590:23)
#loc14 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1162:34)
#loc15 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1162:22)
#loc16 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1163:42)
#loc17 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1163:20)
#loc18 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1165:19)
#loc19 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1177:38)
#loc20 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1177:26)
#loc21 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1178:44)
#loc22 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1178:24)
#loc23 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1180:23)
#loc24 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1186:20)
#loc25 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:18)
#loc26 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:37)
#loc27 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:26)
#loc28 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:7)
#loc29 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1292:40)
#loc30 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1292:26)
#loc31 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1294:26)
#loc32 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1295:24)
#loc33 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1295:46)
#loc34 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1295:36)
#loc35 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1296:26)
#loc36 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1296:48)
#loc37 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1296:38)
#loc38 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1297:25)
#loc39 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1297:48)
#loc40 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1297:38)
#loc41 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1300:13)
#loc42 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1301:13)
#loc43 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1302:13)
#loc44 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1303:14)
#loc45 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1304:14)
#loc46 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1305:14)
#loc47 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1306:14)
#loc48 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1309:17)
#loc49 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1309:7)
#loc50 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1310:40)
#loc51 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1310:27)
#loc52 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1311:24)
#loc53 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1311:35)
#loc54 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1311:55)
#loc55 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1311:66)
#loc56 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1311:48)
#loc57 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:20)
#loc58 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:50)
#loc59 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:16)
#loc60 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1338:20)
#loc61 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1338:16)
#loc62 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:22)
#loc63 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1343:52)
#loc64 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:28)
#loc65 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":766:36)
#loc66 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1384:12)
#loc67 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":777:22)
#loc68 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":777:59)
#loc69 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":777:52)
#loc70 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:23)
#loc71 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:54)
#loc72 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:35)
#loc73 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:66)
#loc74 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:48)
#loc75 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":807:35)
#loc76 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":807:44)
#loc77 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":840:15)
#loc78 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":892:32)
#loc79 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":893:32)
#loc80 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":786:46)
#loc81 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":787:26)
#loc82 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:55)
#loc83 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":801:25)
#loc84 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":871:26)
#loc85 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":871:35)
#loc86 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":804:24)
#loc87 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":807:24)
#loc88 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":817:25)
#loc89 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":819:24)
#loc90 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":819:33)
#loc91 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:55)
#loc92 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:76)
#loc93 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:81)
#loc94 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:65)
#loc95 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:61)
#loc96 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:30)
#loc97 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:16)
#loc98 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":835:40)
#loc99 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:30)
#loc100 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:26)
#loc101 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:29)
#loc102 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:20)
#loc103 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:16)
#loc104 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:15)
#loc105 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:35)
#loc106 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:24)
#loc107 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:34)
#loc108 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:30)
#loc109 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":841:21)
#loc110 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":842:26)
#loc111 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":854:34)
#loc112 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":854:23)
#loc113 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":854:19)
#loc114 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:49)
#loc115 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:54)
#loc116 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:34)
#loc117 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:19)
#loc118 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:23)
#loc119 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:16)
#loc120 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":859:14)
#loc121 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":869:19)
#loc122 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":870:21)
#loc123 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":890:18)
#loc124 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":892:23)
#loc125 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":893:23)
#loc126 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":895:8)
#loc127 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1395:23)
#loc128 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1395:53)
#loc129 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1408:34)
#loc130 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1411:23)
#loc131 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1424:34)
#loc132 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:21)
#loc133 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:11)
#loc134 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1431:44)
#loc135 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1431:31)
#loc136 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1433:28)
#loc137 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1433:39)
#loc138 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1433:59)
#loc139 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1433:70)
#loc140 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1433:52)
#loc141 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:24)
#loc142 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:54)
#loc143 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:20)
#loc144 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1454:25)
#loc145 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1454:56)
#loc146 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1454:20)
#loc147 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1460:39)
#loc148 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":939:36)
#loc149 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1496:16)
#loc150 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":943:22)
#loc151 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":943:59)
#loc152 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":943:52)
#loc153 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:35)
#loc154 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:66)
#loc155 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:48)
#loc156 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":984:13)
#loc157 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1005:32)
#loc158 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":950:46)
#loc159 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":951:26)
#loc160 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:55)
#loc161 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":971:25)
#loc162 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1001:25)
#loc163 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1001:34)
#loc164 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":972:25)
#loc165 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":974:23)
#loc166 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:47)
#loc167 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":981:31)
#loc168 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:69)
#loc169 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:73)
#loc170 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:58)
#loc171 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:52)
#loc172 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:32)
#loc173 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":113:17)
#loc174 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:24)
#loc175 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:13)
#loc176 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:67)
#loc177 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:71)
#loc178 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:52)
#loc179 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:37)
#loc180 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:8)
#loc181 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:19)
#loc182 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:15)
#loc183 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:8)
#loc184 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":996:24)
#loc185 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":997:17)
#loc186 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":998:19)
#loc187 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1003:18)
#loc188 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1005:23)
#loc189 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1006:23)
#loc190 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1004:8)
#loc191 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1505:27)
#loc192 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1505:57)
#loc193 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1520:38)
#loc194 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1598:4)
#loc216 = loc(callsite(#loc1 at #loc2))
#loc217 = loc("off_z"(#loc10))
#loc218 = loc("off_seq_h"(#loc11))
#loc219 = loc("off_h"(#loc12))
#loc220 = loc("pid"(#loc13))
#loc221 = loc("begin_q"(#loc14))
#loc222 = loc("begin_q"(#loc15))
#loc223 = loc("end_q"(#loc16))
#loc224 = loc("end_q"(#loc17))
#loc225 = loc("qlen"(#loc18))
#loc226 = loc("begin_k"(#loc19))
#loc227 = loc("begin_k"(#loc20))
#loc228 = loc("end_k"(#loc21))
#loc229 = loc("end_k"(#loc22))
#loc230 = loc("klen"(#loc23))
#loc231 = loc("start_n"(#loc24))
#loc232 = loc(callsite(#loc25 at #loc2))
#loc233 = loc(callsite(#loc26 at #loc2))
#loc234 = loc(callsite(#loc27 at #loc2))
#loc235 = loc(callsite(#loc28 at #loc2))
#loc236 = loc("begin_o"(#loc29))
#loc237 = loc("begin_o"(#loc30))
#loc238 = loc("off_h2"(#loc31))
#loc239 = loc("qadj"(#loc32))
#loc240 = loc("qadj"(#loc33))
#loc241 = loc("qadj"(#loc34))
#loc242 = loc("kadj"(#loc35))
#loc243 = loc("kadj"(#loc36))
#loc244 = loc("kadj"(#loc37))
#loc245 = loc("doadj"(#loc38))
#loc246 = loc("doadj"(#loc39))
#loc247 = loc("doadj"(#loc40))
#loc248 = loc("Q"(#loc41))
#loc249 = loc("K"(#loc42))
#loc250 = loc("V"(#loc43))
#loc251 = loc("DO"(#loc44))
#loc252 = loc("DQ"(#loc45))
#loc253 = loc("DK"(#loc46))
#loc254 = loc("DV"(#loc47))
#loc255 = loc(callsite(#loc48 at #loc2))
#loc256 = loc(callsite(#loc49 at #loc2))
#loc257 = loc("offs_n"(#loc50))
#loc258 = loc("offs_n"(#loc51))
#loc259 = loc("kmask"(#loc52))
#loc260 = loc("kmask"(#loc53))
#loc261 = loc("kmask"(#loc54))
#loc262 = loc("kmask"(#loc55))
#loc263 = loc("kmask"(#loc56))
#loc264 = loc("k"(#loc57))
#loc265 = loc("k"(#loc58))
#loc266 = loc("k"(#loc59))
#loc267 = loc("v"(#loc60))
#loc268 = loc("v"(#loc61))
#loc269 = loc("num_steps"(#loc63))
#loc270 = loc("offs_m"(#loc65))
#loc271 = loc(callsite(#loc66 at #loc2))
#loc272 = loc("qT_ptrs"(#loc67))
#loc273 = loc("qT_ptrs"(#loc68))
#loc274 = loc("qT_ptrs"(#loc69))
#loc275 = loc("do_ptrs"(#loc70))
#loc276 = loc("do_ptrs"(#loc71))
#loc277 = loc("qmask"(#loc72))
#loc278 = loc("qmask"(#loc73))
#loc279 = loc("qmask"(#loc74))
#loc280 = loc("omask"(#loc75))
#loc281 = loc("omask"(#loc76))
#loc282 = loc("ppT"(#loc77))
#loc283 = loc("qT_ptrs"(#loc78))
#loc284 = loc("do_ptrs"(#loc79))
#loc285 = loc("dk"(#loc80))
#loc286 = loc("offs_m"(#loc81))
#loc287 = loc("qmask"(#loc82))
#loc288 = loc("qT"(#loc83))
#loc289 = loc("dk"(#loc84))
#loc290 = loc("dk"(#loc85))
#loc291 = loc("qkT"(#loc86))
#loc292 = loc("omask"(#loc87))
#loc293 = loc("do"(#loc88))
#loc294 = loc("dpT"(#loc89))
#loc295 = loc("dpT"(#loc90))
#loc296 = loc("tanh_out"(#loc91))
#loc297 = loc("tanh_out"(#loc92))
#loc298 = loc("tanh_out"(#loc93))
#loc299 = loc("tanh_out"(#loc94))
#loc300 = loc("tanh_out"(#loc95))
#loc301 = loc("tanh_out"(#loc98))
#loc302 = loc("ppT"(#loc106))
#loc303 = loc("ppT"(#loc107))
#loc304 = loc("ppT"(#loc108))
#loc305 = loc("ppT"(#loc109))
#loc306 = loc("dv"(#loc110))
#loc307 = loc("pT"(#loc111))
#loc308 = loc("pT"(#loc112))
#loc309 = loc("pT"(#loc113))
#loc310 = loc("pT"(#loc114))
#loc311 = loc("pT"(#loc115))
#loc312 = loc("pT"(#loc116))
#loc313 = loc("pT"(#loc117))
#loc314 = loc("pT"(#loc118))
#loc315 = loc("pT"(#loc119))
#loc316 = loc("pT"(#loc120))
#loc317 = loc("dsT"(#loc121))
#loc318 = loc("dsT"(#loc122))
#loc319 = loc("curr_m"(#loc123))
#loc320 = loc("qT_ptrs"(#loc124))
#loc321 = loc("do_ptrs"(#loc125))
#loc322 = loc("dv_ptrs"(#loc127))
#loc323 = loc("dv_ptrs"(#loc128))
#loc324 = loc(callsite(#loc129 at #loc2))
#loc325 = loc("dk_ptrs"(#loc130))
#loc326 = loc(callsite(#loc131 at #loc2))
#loc327 = loc(callsite(#loc132 at #loc2))
#loc328 = loc(callsite(#loc133 at #loc2))
#loc329 = loc("offs_m"(#loc134))
#loc330 = loc("offs_m"(#loc135))
#loc331 = loc("qmask"(#loc136))
#loc332 = loc("qmask"(#loc137))
#loc333 = loc("qmask"(#loc138))
#loc334 = loc("qmask"(#loc139))
#loc335 = loc("qmask"(#loc140))
#loc336 = loc("q"(#loc141))
#loc337 = loc("q"(#loc142))
#loc338 = loc("q"(#loc143))
#loc339 = loc("do"(#loc144))
#loc340 = loc("do"(#loc145))
#loc341 = loc("do"(#loc146))
#loc342 = loc("num_steps"(#loc147))
#loc343 = loc("offs_n"(#loc148))
#loc344 = loc("dq"(#loc149))
#loc345 = loc("kT_ptrs"(#loc150))
#loc346 = loc("kT_ptrs"(#loc151))
#loc347 = loc("kT_ptrs"(#loc152))
#loc348 = loc("kmask"(#loc153))
#loc349 = loc("kmask"(#loc154))
#loc350 = loc("kmask"(#loc155))
#loc351 = loc("p"(#loc156))
#loc352 = loc("kT_ptrs"(#loc157))
#loc353 = loc("dq"(#loc158))
#loc354 = loc("offs_n"(#loc159))
#loc355 = loc("kmask"(#loc160))
#loc356 = loc("kT"(#loc161))
#loc357 = loc("dq"(#loc162))
#loc358 = loc("dq"(#loc163))
#loc359 = loc("vT"(#loc164))
#loc360 = loc("qk"(#loc165))
#loc361 = loc("tanh_out"(#loc166))
#loc362 = loc("p"(#loc167))
#loc363 = loc("tanh_out"(#loc168))
#loc364 = loc("tanh_out"(#loc169))
#loc365 = loc("tanh_out"(#loc170))
#loc366 = loc("tanh_out"(#loc171))
#loc367 = loc("tanh_out"(#loc172))
#loc368 = loc("dp"(#loc184))
#loc369 = loc("ds"(#loc185))
#loc370 = loc("ds"(#loc186))
#loc371 = loc("curr_n"(#loc187))
#loc372 = loc("kT_ptrs"(#loc188))
#loc373 = loc("vT_ptrs"(#loc189))
#loc374 = loc("dq_ptrs"(#loc191))
#loc375 = loc("dq_ptrs"(#loc192))
#loc376 = loc(callsite(#loc193 at #loc2))
#loc377 = loc(callsite(#loc221 at #loc2))
#loc378 = loc(callsite(#loc222 at #loc2))
#loc379 = loc(callsite(#loc223 at #loc2))
#loc380 = loc(callsite(#loc224 at #loc2))
#loc381 = loc(callsite(#loc225 at #loc2))
#loc382 = loc(callsite(#loc226 at #loc2))
#loc383 = loc(callsite(#loc227 at #loc2))
#loc384 = loc(callsite(#loc228 at #loc2))
#loc385 = loc(callsite(#loc229 at #loc2))
#loc386 = loc(callsite(#loc230 at #loc2))
#loc387 = loc(callsite(#loc231 at #loc2))
#loc388 = loc(callsite(#loc236 at #loc2))
#loc389 = loc(callsite(#loc237 at #loc2))
#loc390 = loc(callsite(#loc238 at #loc2))
#loc391 = loc(callsite(#loc239 at #loc2))
#loc392 = loc(callsite(#loc240 at #loc2))
#loc393 = loc(callsite(#loc241 at #loc2))
#loc394 = loc(callsite(#loc242 at #loc2))
#loc395 = loc(callsite(#loc243 at #loc2))
#loc396 = loc(callsite(#loc244 at #loc2))
#loc397 = loc(callsite(#loc245 at #loc2))
#loc398 = loc(callsite(#loc246 at #loc2))
#loc399 = loc(callsite(#loc247 at #loc2))
#loc400 = loc("Q"(#loc248))
#loc401 = loc("K"(#loc249))
#loc402 = loc("V"(#loc250))
#loc403 = loc("DO"(#loc251))
#loc404 = loc("DQ"(#loc252))
#loc405 = loc("DK"(#loc253))
#loc406 = loc("DV"(#loc254))
#loc407 = loc(callsite(#loc257 at #loc2))
#loc408 = loc(callsite(#loc258 at #loc2))
#loc409 = loc(callsite(#loc259 at #loc2))
#loc410 = loc(callsite(#loc260 at #loc2))
#loc411 = loc(callsite(#loc261 at #loc2))
#loc412 = loc(callsite(#loc262 at #loc2))
#loc413 = loc(callsite(#loc263 at #loc2))
#loc414 = loc(callsite(#loc264 at #loc2))
#loc415 = loc(callsite(#loc265 at #loc2))
#loc416 = loc(callsite(#loc266 at #loc2))
#loc417 = loc(callsite(#loc267 at #loc2))
#loc418 = loc(callsite(#loc268 at #loc2))
#loc419 = loc(callsite(#loc269 at #loc2))
#loc420 = loc(callsite(#loc270 at #loc271))
#loc421 = loc(callsite(#loc272 at #loc271))
#loc422 = loc(callsite(#loc273 at #loc271))
#loc423 = loc(callsite(#loc274 at #loc271))
#loc424 = loc(callsite(#loc275 at #loc271))
#loc425 = loc(callsite(#loc276 at #loc271))
#loc426 = loc(callsite(#loc277 at #loc271))
#loc427 = loc(callsite(#loc278 at #loc271))
#loc428 = loc(callsite(#loc279 at #loc271))
#loc429 = loc(callsite(#loc280 at #loc271))
#loc430 = loc(callsite(#loc281 at #loc271))
#loc431 = loc(callsite(#loc282 at #loc271))
#loc432 = loc(callsite(#loc283 at #loc271))
#loc433 = loc(callsite(#loc284 at #loc271))
#loc434 = loc("dv"(#loc285))
#loc435 = loc(callsite(#loc286 at #loc271))
#loc436 = loc(callsite(#loc287 at #loc271))
#loc437 = loc(callsite(#loc288 at #loc271))
#loc438 = loc(callsite(#loc289 at #loc271))
#loc439 = loc(callsite(#loc290 at #loc271))
#loc440 = loc(callsite(#loc291 at #loc271))
#loc441 = loc(callsite(#loc292 at #loc271))
#loc442 = loc(callsite(#loc293 at #loc271))
#loc443 = loc(callsite(#loc294 at #loc271))
#loc444 = loc(callsite(#loc295 at #loc271))
#loc445 = loc(callsite(#loc296 at #loc271))
#loc446 = loc(callsite(#loc297 at #loc271))
#loc447 = loc(callsite(#loc298 at #loc271))
#loc448 = loc(callsite(#loc299 at #loc271))
#loc449 = loc(callsite(#loc300 at #loc271))
#loc450 = loc(callsite(#loc301 at #loc271))
#loc451 = loc(callsite(#loc302 at #loc271))
#loc452 = loc(callsite(#loc303 at #loc271))
#loc453 = loc(callsite(#loc304 at #loc271))
#loc454 = loc(callsite(#loc305 at #loc271))
#loc455 = loc(callsite(#loc306 at #loc271))
#loc456 = loc(callsite(#loc307 at #loc271))
#loc457 = loc(callsite(#loc308 at #loc271))
#loc458 = loc(callsite(#loc309 at #loc271))
#loc459 = loc(callsite(#loc310 at #loc271))
#loc460 = loc(callsite(#loc311 at #loc271))
#loc461 = loc(callsite(#loc312 at #loc271))
#loc462 = loc(callsite(#loc313 at #loc271))
#loc463 = loc(callsite(#loc314 at #loc271))
#loc464 = loc(callsite(#loc315 at #loc271))
#loc465 = loc(callsite(#loc316 at #loc271))
#loc466 = loc(callsite(#loc317 at #loc271))
#loc467 = loc(callsite(#loc318 at #loc271))
#loc468 = loc(callsite(#loc319 at #loc271))
#loc469 = loc(callsite(#loc320 at #loc271))
#loc470 = loc(callsite(#loc321 at #loc271))
#loc471 = loc(callsite(#loc126 at #loc271))
#loc472 = loc(callsite(#loc322 at #loc2))
#loc473 = loc(callsite(#loc323 at #loc2))
#loc474 = loc(callsite(#loc325 at #loc2))
#loc475 = loc(callsite(#loc329 at #loc2))
#loc476 = loc(callsite(#loc330 at #loc2))
#loc477 = loc(callsite(#loc331 at #loc2))
#loc478 = loc(callsite(#loc332 at #loc2))
#loc479 = loc(callsite(#loc333 at #loc2))
#loc480 = loc(callsite(#loc334 at #loc2))
#loc481 = loc(callsite(#loc335 at #loc2))
#loc482 = loc(callsite(#loc336 at #loc2))
#loc483 = loc(callsite(#loc337 at #loc2))
#loc484 = loc(callsite(#loc338 at #loc2))
#loc485 = loc(callsite(#loc339 at #loc2))
#loc486 = loc(callsite(#loc340 at #loc2))
#loc487 = loc(callsite(#loc341 at #loc2))
#loc488 = loc(callsite(#loc342 at #loc2))
#loc489 = loc(callsite(#loc344 at #loc2))
#loc490 = loc("offs_n"(#loc353))
#loc491 = loc(callsite(#loc374 at #loc2))
#loc492 = loc(callsite(#loc375 at #loc2))
#loc493 = loc(callsite(#loc400 at #loc2))
#loc494 = loc(callsite(#loc401 at #loc2))
#loc495 = loc(callsite(#loc402 at #loc2))
#loc496 = loc(callsite(#loc403 at #loc2))
#loc497 = loc(callsite(#loc404 at #loc2))
#loc498 = loc(callsite(#loc405 at #loc2))
#loc499 = loc(callsite(#loc406 at #loc2))
#loc500 = loc(callsite(#loc62 at #loc419))
#loc501 = loc(callsite(#loc64 at #loc419))
#loc502 = loc("offs_m"(#loc434))
#loc503 = loc(callsite(#loc97 at #loc450))
#loc504 = loc(callsite(#loc62 at #loc488))
#loc505 = loc(callsite(#loc64 at #loc488))
#loc506 = loc(callsite(#loc343 at #loc489))
#loc507 = loc(callsite(#loc345 at #loc489))
#loc508 = loc(callsite(#loc346 at #loc489))
#loc509 = loc(callsite(#loc347 at #loc489))
#loc510 = loc(callsite(#loc348 at #loc489))
#loc511 = loc(callsite(#loc349 at #loc489))
#loc512 = loc(callsite(#loc350 at #loc489))
#loc513 = loc(callsite(#loc351 at #loc489))
#loc514 = loc(callsite(#loc352 at #loc489))
#loc515 = loc("kT_ptrs"(#loc490))
#loc516 = loc(callsite(#loc354 at #loc489))
#loc517 = loc(callsite(#loc355 at #loc489))
#loc518 = loc(callsite(#loc356 at #loc489))
#loc519 = loc(callsite(#loc357 at #loc489))
#loc520 = loc(callsite(#loc358 at #loc489))
#loc521 = loc(callsite(#loc359 at #loc489))
#loc522 = loc(callsite(#loc360 at #loc489))
#loc523 = loc(callsite(#loc362 at #loc489))
#loc524 = loc(callsite(#loc368 at #loc489))
#loc525 = loc(callsite(#loc369 at #loc489))
#loc526 = loc(callsite(#loc370 at #loc489))
#loc527 = loc(callsite(#loc371 at #loc489))
#loc528 = loc(callsite(#loc372 at #loc489))
#loc529 = loc(callsite(#loc373 at #loc489))
#loc530 = loc(callsite(#loc190 at #loc489))
#loc531 = loc("qT_ptrs"(#loc502))
#loc532 = loc(callsite(#loc96 at #loc503))
#loc533 = loc(callsite(#loc100 at #loc503))
#loc534 = loc(callsite(#loc104 at #loc503))
#loc535 = loc(callsite(#loc105 at #loc503))
#loc536 = loc("vT_ptrs"(#loc515))
#loc537 = loc(callsite(#loc361 at #loc523))
#loc538 = loc(callsite(#loc363 at #loc523))
#loc539 = loc(callsite(#loc364 at #loc523))
#loc540 = loc(callsite(#loc365 at #loc523))
#loc541 = loc(callsite(#loc366 at #loc523))
#loc542 = loc(callsite(#loc367 at #loc523))
#loc543 = loc(callsite(#loc173 at #loc523))
#loc544 = loc(callsite(#loc174 at #loc523))
#loc545 = loc(callsite(#loc175 at #loc523))
#loc546 = loc(callsite(#loc176 at #loc523))
#loc547 = loc(callsite(#loc177 at #loc523))
#loc548 = loc(callsite(#loc178 at #loc523))
#loc549 = loc(callsite(#loc179 at #loc523))
#loc550 = loc(callsite(#loc180 at #loc523))
#loc551 = loc(callsite(#loc181 at #loc523))
#loc552 = loc(callsite(#loc182 at #loc523))
#loc553 = loc(callsite(#loc183 at #loc523))
#loc554 = loc("do_ptrs"(#loc531))
#loc555 = loc(callsite(#loc99 at #loc533))
#loc556 = loc(callsite(#loc101 at #loc533))
#loc557 = loc(callsite(#loc102 at #loc533))
#loc558 = loc(callsite(#loc103 at #loc533))
#loc559 = loc("curr_n"(#loc536))
#loc560 = loc(callsite(#loc97 at #loc542))
#loc561 = loc("curr_m"(#loc554))
#loc562 = loc(callsite(#loc559 at #loc489))
#loc563 = loc(callsite(#loc96 at #loc560))
#loc564 = loc(callsite(#loc100 at #loc560))
#loc565 = loc(callsite(#loc104 at #loc560))
#loc566 = loc(callsite(#loc105 at #loc560))
#loc567 = loc(callsite(#loc561 at #loc271))
#loc568 = loc(callsite(#loc99 at #loc564))
#loc569 = loc(callsite(#loc101 at #loc564))
#loc570 = loc(callsite(#loc102 at #loc564))
#loc571 = loc(callsite(#loc103 at #loc564))
