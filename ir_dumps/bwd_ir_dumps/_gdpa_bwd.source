#loc = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1520:0)
#loc21 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1109:0)
#loc145 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":32:0)
#loc151 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":728:0)
#loc225 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":85:0)
#loc229 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":65:0)
#loc236 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":47:0)
#loc243 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":904:0)
#loc288 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":111:0)
#loc308 = loc("Q"(#loc))
#loc309 = loc("Q_offsets"(#loc))
#loc310 = loc("K"(#loc))
#loc311 = loc("K_offsets"(#loc))
#loc312 = loc("V"(#loc))
#loc313 = loc("DO"(#loc))
#loc314 = loc("Out_offsets"(#loc))
#loc315 = loc("DQ"(#loc))
#loc316 = loc("DK"(#loc))
#loc317 = loc("DV"(#loc))
#loc318 = loc("stride_qm"(#loc))
#loc319 = loc("stride_km"(#loc))
#loc320 = loc("stride_qh"(#loc))
#loc321 = loc("stride_kh"(#loc))
#loc322 = loc("stride_dom"(#loc))
#loc323 = loc("stride_doh"(#loc))
#loc324 = loc("Z"(#loc))
#loc325 = loc("H"(#loc))
#loc326 = loc("N_CTX"(#loc))
#loc327 = loc("N_CTX_KV"(#loc))
#loc328 = loc("qk_scale"(#loc))
#loc334 = loc("Q"(#loc21))
#loc335 = loc("Q_offsets"(#loc21))
#loc336 = loc("K"(#loc21))
#loc337 = loc("K_offsets"(#loc21))
#loc338 = loc("V"(#loc21))
#loc339 = loc("DO"(#loc21))
#loc340 = loc("Out_offsets"(#loc21))
#loc341 = loc("DQ"(#loc21))
#loc342 = loc("DK"(#loc21))
#loc343 = loc("DV"(#loc21))
#loc344 = loc("stride_qm"(#loc21))
#loc345 = loc("stride_km"(#loc21))
#loc346 = loc("stride_qh"(#loc21))
#loc347 = loc("stride_kh"(#loc21))
#loc348 = loc("stride_dom"(#loc21))
#loc349 = loc("stride_doh"(#loc21))
#loc350 = loc("off_z"(#loc21))
#loc351 = loc("off_q_z"(#loc21))
#loc352 = loc("off_h"(#loc21))
#loc353 = loc("off_h_kv"(#loc21))
#loc354 = loc("pid"(#loc21))
#loc355 = loc("H"(#loc21))
#loc356 = loc("N_CTX"(#loc21))
#loc357 = loc("qk_scale"(#loc21))
#loc462 = loc("x"(#loc145))
#loc463 = loc("dk"(#loc151))
#loc464 = loc("dv"(#loc151))
#loc465 = loc("Q"(#loc151))
#loc466 = loc("k"(#loc151))
#loc467 = loc("v"(#loc151))
#loc468 = loc("DO"(#loc151))
#loc469 = loc("stride_qm"(#loc151))
#loc470 = loc("stride_dom"(#loc151))
#loc471 = loc("stride_qh"(#loc151))
#loc472 = loc("H"(#loc151))
#loc473 = loc("N_CTX"(#loc151))
#loc474 = loc("qk_scale"(#loc151))
#loc475 = loc("start_n"(#loc151))
#loc476 = loc("start_m"(#loc151))
#loc477 = loc("qlen"(#loc151))
#loc478 = loc("klen"(#loc151))
#loc479 = loc("num_steps"(#loc151))
#loc480 = loc("begin_q"(#loc151))
#loc481 = loc("offs_k"(#loc151))
#loc482 = loc("off_h2"(#loc151))
#loc483 = loc("DQ"(#loc151))
#loc554 = loc("x"(#loc225))
#loc555 = loc("x"(#loc229))
#loc556 = loc("x"(#loc236))
#loc557 = loc("dq"(#loc243))
#loc558 = loc("q"(#loc243))
#loc559 = loc("K"(#loc243))
#loc560 = loc("V"(#loc243))
#loc561 = loc("do"(#loc243))
#loc562 = loc("stride_km"(#loc243))
#loc563 = loc("stride_kh"(#loc243))
#loc564 = loc("H"(#loc243))
#loc565 = loc("N_CTX"(#loc243))
#loc566 = loc("qk_scale"(#loc243))
#loc567 = loc("start_m"(#loc243))
#loc568 = loc("start_n"(#loc243))
#loc569 = loc("qlen"(#loc243))
#loc570 = loc("klen"(#loc243))
#loc571 = loc("num_steps"(#loc243))
#loc572 = loc("begin_k"(#loc243))
#loc573 = loc("offs_k"(#loc243))
#loc574 = loc("off_h_kv"(#loc243))
#loc616 = loc("x"(#loc288))
#loc623 = loc("Q"(#loc334))
#loc624 = loc("K"(#loc336))
#loc625 = loc("V"(#loc338))
#loc626 = loc("DO"(#loc339))
#loc627 = loc("DQ"(#loc341))
#loc628 = loc("DK"(#loc342))
#loc629 = loc("DV"(#loc343))
module {
  tt.func public @_gdpa_bwd(%Q: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q"(#loc)), %Q_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q_offsets"(#loc)), %K: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K"(#loc)), %K_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K_offsets"(#loc)), %V: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("V"(#loc)), %DO: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DO"(#loc)), %Out_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out_offsets"(#loc)), %DQ: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DQ"(#loc)), %DK: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DK"(#loc)), %DV: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("DV"(#loc)), %stride_qm: i32 {tt.divisibility = 16 : i32} loc("stride_qm"(#loc)), %stride_km: i32 {tt.divisibility = 16 : i32} loc("stride_km"(#loc)), %stride_qh: i32 {tt.divisibility = 16 : i32} loc("stride_qh"(#loc)), %stride_kh: i32 {tt.divisibility = 16 : i32} loc("stride_kh"(#loc)), %stride_dom: i32 {tt.divisibility = 16 : i32} loc("stride_dom"(#loc)), %stride_doh: i32 {tt.divisibility = 16 : i32} loc("stride_doh"(#loc)), %Z: i32 {tt.divisibility = 16 : i32} loc("Z"(#loc)), %H: i32 loc("H"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc)), %N_CTX_KV: i32 {tt.divisibility = 16 : i32} loc("N_CTX_KV"(#loc)), %qk_scale: f32 loc("qk_scale"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.cmpi sge, %stride_qm, %c0_i32 : i32 loc(#loc1)
    llvm.intr.assume %0 : i1 loc(#loc2)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc3)
    %1 = arith.cmpi sge, %stride_km, %c0_i32_0 : i32 loc(#loc3)
    llvm.intr.assume %1 : i1 loc(#loc4)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc5)
    %2 = arith.cmpi sge, %stride_qh, %c0_i32_1 : i32 loc(#loc5)
    llvm.intr.assume %2 : i1 loc(#loc6)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc7)
    %3 = arith.cmpi sge, %stride_kh, %c0_i32_2 : i32 loc(#loc7)
    llvm.intr.assume %3 : i1 loc(#loc8)
    %true = arith.constant true loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc9)
    %c0_i32_3 = arith.constant 0 : i32 loc(#loc10)
    %4 = arith.cmpi sge, %stride_dom, %c0_i32_3 : i32 loc(#loc10)
    llvm.intr.assume %4 : i1 loc(#loc11)
    %c0_i32_4 = arith.constant 0 : i32 loc(#loc12)
    %5 = arith.cmpi sge, %stride_doh, %c0_i32_4 : i32 loc(#loc12)
    llvm.intr.assume %5 : i1 loc(#loc13)
    %off_z = tt.get_program_id z : i32 loc(#loc329)
    %off_seq_h = tt.get_program_id x : i32 loc(#loc330)
    %off_h = arith.remsi %off_seq_h, %H : i32 loc(#loc331)
    %off_h_kv = arith.constant 1 : i32 loc(#loc332)
    %off_h_kv_5 = arith.constant 1 : i32 loc(#loc332)
    %off_h_kv_6 = arith.divsi %off_h, %off_h_kv_5 : i32 loc(#loc332)
    %pid = arith.divsi %off_seq_h, %H : i32 loc(#loc333)
    tt.call @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_compute__Pbf16_Pi32_Pbf16_Pi32_Pbf16_Pbf16_Pi32_Pbf16_Pbf16_Pbf16_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_fp32__(14,)cconstexpr_1__(23,)cconstexpr_1__(26,)cconstexpr_False__(27,)cconstexpr_False__(28,)cconstexpr_64__(29,)cconstexpr_64__(30,)cconstexpr_64__(31,)cconstexpr_128__(32,)cconstexpr_128__(33,)cconstexpr_64__(34,)cconstexpr_False__(35,)cconstexpr_None__(36,)cconstexpr_False__(37,)cconstexpr_False__(38,)cconstexpr_False__(39,)cconstexpr_1__(40,)cconstexpr_False__(41,)cconstexpr_2__(42,)cconstexpr_None__(43,)cconstexpr_None__(44,)cconstexpr_None__(45,)cconstexpr_None_"(%Q, %Q_offsets, %K, %K_offsets, %V, %DO, %Out_offsets, %DQ, %DK, %DV, %stride_qm, %stride_km, %stride_qh, %stride_kh, %stride_dom, %stride_doh, %off_z, %off_z, %off_h, %off_h_kv_6, %pid, %H, %N_CTX, %qk_scale) : (!tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, f32) -> () loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
  tt.func private @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_compute__Pbf16_Pi32_Pbf16_Pi32_Pbf16_Pbf16_Pi32_Pbf16_Pbf16_Pbf16_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_fp32__(14,)cconstexpr_1__(23,)cconstexpr_1__(26,)cconstexpr_False__(27,)cconstexpr_False__(28,)cconstexpr_64__(29,)cconstexpr_64__(30,)cconstexpr_64__(31,)cconstexpr_128__(32,)cconstexpr_128__(33,)cconstexpr_64__(34,)cconstexpr_False__(35,)cconstexpr_None__(36,)cconstexpr_False__(37,)cconstexpr_False__(38,)cconstexpr_False__(39,)cconstexpr_1__(40,)cconstexpr_False__(41,)cconstexpr_2__(42,)cconstexpr_None__(43,)cconstexpr_None__(44,)cconstexpr_None__(45,)cconstexpr_None_"(%Q: !tt.ptr<bf16> loc("Q"(#loc334)), %Q_offsets: !tt.ptr<i32> loc("Q_offsets"(#loc21)), %K: !tt.ptr<bf16> loc("K"(#loc336)), %K_offsets: !tt.ptr<i32> loc("K_offsets"(#loc21)), %V: !tt.ptr<bf16> loc("V"(#loc338)), %DO: !tt.ptr<bf16> loc("DO"(#loc339)), %Out_offsets: !tt.ptr<i32> loc("Out_offsets"(#loc21)), %DQ: !tt.ptr<bf16> loc("DQ"(#loc341)), %DK: !tt.ptr<bf16> loc("DK"(#loc342)), %DV: !tt.ptr<bf16> loc("DV"(#loc343)), %stride_qm: i32 loc("stride_qm"(#loc21)), %stride_km: i32 loc("stride_km"(#loc21)), %stride_qh: i32 loc("stride_qh"(#loc21)), %stride_kh: i32 loc("stride_kh"(#loc21)), %stride_dom: i32 loc("stride_dom"(#loc21)), %stride_doh: i32 loc("stride_doh"(#loc21)), %off_z: i32 loc("off_z"(#loc21)), %off_q_z: i32 loc("off_q_z"(#loc21)), %off_h: i32 loc("off_h"(#loc21)), %off_h_kv: i32 loc("off_h_kv"(#loc21)), %pid: i32 loc("pid"(#loc21)), %H: i32 loc("H"(#loc21)), %N_CTX: i32 loc("N_CTX"(#loc21)), %qk_scale: f32 loc("qk_scale"(#loc21))) attributes {noinline = false} {
    %begin_q = tt.addptr %Q_offsets, %off_q_z : !tt.ptr<i32>, i32 loc(#loc358)
    %begin_q_0 = tt.load %begin_q : !tt.ptr<i32> loc(#loc359)
    %end_q = tt.addptr %Q_offsets, %off_q_z : !tt.ptr<i32>, i32 loc(#loc360)
    %end_q_1 = arith.constant 1 : i32 loc(#loc361)
    %end_q_2 = tt.addptr %end_q, %end_q_1 : !tt.ptr<i32>, i32 loc(#loc361)
    %end_q_3 = tt.load %end_q_2 : !tt.ptr<i32> loc(#loc362)
    %qlen = arith.extsi %end_q_3 : i32 to i64 loc(#loc363)
    %qlen_4 = arith.extsi %begin_q_0 : i32 to i64 loc(#loc363)
    %qlen_5 = arith.subi %qlen, %qlen_4 : i64 loc(#loc363)
    %qlen_6 = arith.constant 2147483647 : i64 loc(#loc363)
    %qlen_7 = arith.constant -2147483648 : i64 loc(#loc363)
    %qlen_8 = arith.cmpi sle, %qlen_5, %qlen_6 : i64 loc(#loc363)
    %qlen_9 = arith.cmpi sge, %qlen_5, %qlen_7 : i64 loc(#loc363)
    %qlen_10 = arith.andi %qlen_8, %qlen_9 : i1 loc(#loc363)
    %qlen_11 = arith.subi %end_q_3, %begin_q_0 : i32 loc(#loc363)
    %begin_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc364)
    %begin_k_12 = tt.load %begin_k : !tt.ptr<i32> loc(#loc365)
    %end_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc366)
    %end_k_13 = arith.constant 1 : i32 loc(#loc367)
    %end_k_14 = tt.addptr %end_k, %end_k_13 : !tt.ptr<i32>, i32 loc(#loc367)
    %end_k_15 = tt.load %end_k_14 : !tt.ptr<i32> loc(#loc368)
    %klen = arith.extsi %end_k_15 : i32 to i64 loc(#loc369)
    %klen_16 = arith.extsi %begin_k_12 : i32 to i64 loc(#loc369)
    %klen_17 = arith.subi %klen, %klen_16 : i64 loc(#loc369)
    %klen_18 = arith.constant 2147483647 : i64 loc(#loc369)
    %klen_19 = arith.constant -2147483648 : i64 loc(#loc369)
    %klen_20 = arith.cmpi sle, %klen_17, %klen_18 : i64 loc(#loc369)
    %klen_21 = arith.cmpi sge, %klen_17, %klen_19 : i64 loc(#loc369)
    %klen_22 = arith.andi %klen_20, %klen_21 : i1 loc(#loc369)
    %klen_23 = arith.subi %end_k_15, %begin_k_12 : i32 loc(#loc369)
    %start_n = arith.constant 128 : i32 loc(#loc370)
    %start_n_24 = arith.constant 128 : i32 loc(#loc370)
    %start_n_25 = arith.extsi %pid : i32 to i64 loc(#loc370)
    %start_n_26 = arith.extsi %start_n_24 : i32 to i64 loc(#loc370)
    %start_n_27 = arith.muli %start_n_25, %start_n_26 : i64 loc(#loc370)
    %start_n_28 = arith.constant 2147483647 : i64 loc(#loc370)
    %start_n_29 = arith.constant -2147483648 : i64 loc(#loc370)
    %start_n_30 = arith.cmpi sle, %start_n_27, %start_n_28 : i64 loc(#loc370)
    %start_n_31 = arith.cmpi sge, %start_n_27, %start_n_29 : i64 loc(#loc370)
    %start_n_32 = arith.andi %start_n_30, %start_n_31 : i1 loc(#loc370)
    %start_n_33 = arith.muli %pid, %start_n_24 : i32 loc(#loc370)
    %start_m = arith.constant 128 : i32 loc(#loc371)
    %start_m_34 = arith.constant 128 : i32 loc(#loc371)
    %start_m_35 = arith.extsi %pid : i32 to i64 loc(#loc371)
    %start_m_36 = arith.extsi %start_m_34 : i32 to i64 loc(#loc371)
    %start_m_37 = arith.muli %start_m_35, %start_m_36 : i64 loc(#loc371)
    %start_m_38 = arith.constant 2147483647 : i64 loc(#loc371)
    %start_m_39 = arith.constant -2147483648 : i64 loc(#loc371)
    %start_m_40 = arith.cmpi sle, %start_m_37, %start_m_38 : i64 loc(#loc371)
    %start_m_41 = arith.cmpi sge, %start_m_37, %start_m_39 : i64 loc(#loc371)
    %start_m_42 = arith.andi %start_m_40, %start_m_41 : i1 loc(#loc371)
    %start_m_43 = arith.muli %pid, %start_m_34 : i32 loc(#loc371)
    %offs_k = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc372)
    %0 = arith.cmpi sle, %start_n_33, %klen_23 : i32 loc(#loc37)
    %1 = arith.cmpi sle, %start_m_43, %qlen_11 : i32 loc(#loc38)
    %2 = arith.ori %0, %1 : i1 loc(#loc39)
    %3:7 = scf.if %2 -> (!tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>) {
      %begin_o = tt.addptr %Out_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc373)
      %begin_o_44 = tt.load %begin_o : !tt.ptr<i32> loc(#loc374)
      %off_h2 = arith.extsi %off_h : i32 to i64 loc(#loc375)
      %qadj = arith.extsi %stride_qh : i32 to i64 loc(#loc376)
      %qadj_45 = arith.muli %off_h2, %qadj : i64 loc(#loc376)
      %qadj_46 = arith.extsi %begin_q_0 : i32 to i64 loc(#loc377)
      %qadj_47 = arith.extsi %stride_qm : i32 to i64 loc(#loc377)
      %qadj_48 = arith.muli %qadj_46, %qadj_47 : i64 loc(#loc377)
      %qadj_49 = arith.constant 2147483647 : i64 loc(#loc377)
      %qadj_50 = arith.constant -2147483648 : i64 loc(#loc377)
      %qadj_51 = arith.cmpi sle, %qadj_48, %qadj_49 : i64 loc(#loc377)
      %qadj_52 = arith.cmpi sge, %qadj_48, %qadj_50 : i64 loc(#loc377)
      %qadj_53 = arith.andi %qadj_51, %qadj_52 : i1 loc(#loc377)
      %qadj_54 = arith.muli %begin_q_0, %stride_qm : i32 loc(#loc377)
      %qadj_55 = arith.extsi %qadj_54 : i32 to i64 loc(#loc378)
      %qadj_56 = arith.addi %qadj_45, %qadj_55 : i64 loc(#loc378)
      %kadj = arith.extsi %off_h_kv : i32 to i64 loc(#loc379)
      %kadj_57 = arith.extsi %stride_kh : i32 to i64 loc(#loc379)
      %kadj_58 = arith.muli %kadj, %kadj_57 : i64 loc(#loc379)
      %kadj_59 = arith.constant 2147483647 : i64 loc(#loc379)
      %kadj_60 = arith.constant -2147483648 : i64 loc(#loc379)
      %kadj_61 = arith.cmpi sle, %kadj_58, %kadj_59 : i64 loc(#loc379)
      %kadj_62 = arith.cmpi sge, %kadj_58, %kadj_60 : i64 loc(#loc379)
      %kadj_63 = arith.andi %kadj_61, %kadj_62 : i1 loc(#loc379)
      %kadj_64 = arith.muli %off_h_kv, %stride_kh : i32 loc(#loc379)
      %kadj_65 = arith.extsi %begin_k_12 : i32 to i64 loc(#loc380)
      %kadj_66 = arith.extsi %stride_km : i32 to i64 loc(#loc380)
      %kadj_67 = arith.muli %kadj_65, %kadj_66 : i64 loc(#loc380)
      %kadj_68 = arith.constant 2147483647 : i64 loc(#loc380)
      %kadj_69 = arith.constant -2147483648 : i64 loc(#loc380)
      %kadj_70 = arith.cmpi sle, %kadj_67, %kadj_68 : i64 loc(#loc380)
      %kadj_71 = arith.cmpi sge, %kadj_67, %kadj_69 : i64 loc(#loc380)
      %kadj_72 = arith.andi %kadj_70, %kadj_71 : i1 loc(#loc380)
      %kadj_73 = arith.muli %begin_k_12, %stride_km : i32 loc(#loc380)
      %kadj_74 = arith.extsi %kadj_64 : i32 to i64 loc(#loc381)
      %kadj_75 = arith.extsi %kadj_73 : i32 to i64 loc(#loc381)
      %kadj_76 = arith.addi %kadj_74, %kadj_75 : i64 loc(#loc381)
      %kadj_77 = arith.constant 2147483647 : i64 loc(#loc381)
      %kadj_78 = arith.constant -2147483648 : i64 loc(#loc381)
      %kadj_79 = arith.cmpi sle, %kadj_76, %kadj_77 : i64 loc(#loc381)
      %kadj_80 = arith.cmpi sge, %kadj_76, %kadj_78 : i64 loc(#loc381)
      %kadj_81 = arith.andi %kadj_79, %kadj_80 : i1 loc(#loc381)
      %kadj_82 = arith.addi %kadj_64, %kadj_73 : i32 loc(#loc381)
      %doadj = arith.extsi %stride_doh : i32 to i64 loc(#loc382)
      %doadj_83 = arith.muli %off_h2, %doadj : i64 loc(#loc382)
      %doadj_84 = arith.extsi %begin_o_44 : i32 to i64 loc(#loc383)
      %doadj_85 = arith.extsi %stride_dom : i32 to i64 loc(#loc383)
      %doadj_86 = arith.muli %doadj_84, %doadj_85 : i64 loc(#loc383)
      %doadj_87 = arith.constant 2147483647 : i64 loc(#loc383)
      %doadj_88 = arith.constant -2147483648 : i64 loc(#loc383)
      %doadj_89 = arith.cmpi sle, %doadj_86, %doadj_87 : i64 loc(#loc383)
      %doadj_90 = arith.cmpi sge, %doadj_86, %doadj_88 : i64 loc(#loc383)
      %doadj_91 = arith.andi %doadj_89, %doadj_90 : i1 loc(#loc383)
      %doadj_92 = arith.muli %begin_o_44, %stride_dom : i32 loc(#loc383)
      %doadj_93 = arith.extsi %doadj_92 : i32 to i64 loc(#loc384)
      %doadj_94 = arith.addi %doadj_83, %doadj_93 : i64 loc(#loc384)
      %Q_95 = tt.addptr %Q, %qadj_56 : !tt.ptr<bf16>, i64 loc(#loc630)
      %K_96 = tt.addptr %K, %kadj_82 : !tt.ptr<bf16>, i32 loc(#loc631)
      %V_97 = tt.addptr %V, %kadj_82 : !tt.ptr<bf16>, i32 loc(#loc632)
      %DO_98 = tt.addptr %DO, %doadj_94 : !tt.ptr<bf16>, i64 loc(#loc633)
      %DQ_99 = tt.addptr %DQ, %qadj_56 : !tt.ptr<bf16>, i64 loc(#loc634)
      %DK_100 = tt.addptr %DK, %kadj_82 : !tt.ptr<bf16>, i32 loc(#loc635)
      %DV_101 = tt.addptr %DV, %kadj_82 : !tt.ptr<bf16>, i32 loc(#loc636)
      scf.yield %Q_95, %K_96, %V_97, %DO_98, %DQ_99, %DK_100, %DV_101 : !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc636)
    } else {
      scf.yield %Q, %K, %V, %DO, %DQ, %DK, %DV : !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<bf16> loc(#loc60)
    } loc(#loc40)
    %4 = arith.cmpi slt, %start_n_33, %klen_23 : i32 loc(#loc61)
    scf.if %4 {
      %offs_n = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc392)
      %offs_n_44 = tt.splat %start_n_33 : i32 -> tensor<128xi32> loc(#loc393)
      %offs_n_45 = arith.extsi %offs_n_44 : tensor<128xi32> to tensor<128xi64> loc(#loc393)
      %offs_n_46 = arith.extsi %offs_n : tensor<128xi32> to tensor<128xi64> loc(#loc393)
      %offs_n_47 = arith.addi %offs_n_45, %offs_n_46 : tensor<128xi64> loc(#loc393)
      %offs_n_48 = arith.constant 2147483647 : i64 loc(#loc393)
      %offs_n_49 = arith.constant -2147483648 : i64 loc(#loc393)
      %offs_n_50 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc393)
      %offs_n_51 = arith.cmpi sle, %offs_n_47, %offs_n_50 : tensor<128xi64> loc(#loc393)
      %offs_n_52 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc393)
      %offs_n_53 = arith.cmpi sge, %offs_n_47, %offs_n_52 : tensor<128xi64> loc(#loc393)
      %offs_n_54 = arith.andi %offs_n_51, %offs_n_53 : tensor<128xi1> loc(#loc393)
      %offs_n_55 = arith.addi %offs_n_44, %offs_n : tensor<128xi32> loc(#loc393)
      %kmask = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc394)
      %kmask_56 = arith.constant 64 : i32 loc(#loc395)
      %kmask_57 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc395)
      %kmask_58 = arith.cmpi slt, %kmask, %kmask_57 : tensor<1x64xi32> loc(#loc395)
      %kmask_59 = tt.expand_dims %offs_n_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc396)
      %kmask_60 = tt.splat %klen_23 : i32 -> tensor<128x1xi32> loc(#loc397)
      %kmask_61 = arith.cmpi slt, %kmask_59, %kmask_60 : tensor<128x1xi32> loc(#loc397)
      %kmask_62 = tt.broadcast %kmask_58 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc398)
      %kmask_63 = tt.broadcast %kmask_61 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc398)
      %kmask_64 = arith.andi %kmask_62, %kmask_63 : tensor<128x64xi1> loc(#loc398)
      %dv = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc399)
      %dk = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc400)
      %k = tt.expand_dims %offs_n_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc401)
      %k_65 = tt.splat %stride_km : i32 -> tensor<128x1xi32> loc(#loc402)
      %k_66 = arith.extsi %k : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc402)
      %k_67 = arith.extsi %k_65 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc402)
      %k_68 = arith.muli %k_66, %k_67 : tensor<128x1xi64> loc(#loc402)
      %k_69 = arith.constant 2147483647 : i64 loc(#loc402)
      %k_70 = arith.constant -2147483648 : i64 loc(#loc402)
      %k_71 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc402)
      %k_72 = arith.cmpi sle, %k_68, %k_71 : tensor<128x1xi64> loc(#loc402)
      %k_73 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc402)
      %k_74 = arith.cmpi sge, %k_68, %k_73 : tensor<128x1xi64> loc(#loc402)
      %k_75 = arith.andi %k_72, %k_74 : tensor<128x1xi1> loc(#loc402)
      %k_76 = arith.muli %k, %k_65 : tensor<128x1xi32> loc(#loc402)
      %k_77 = tt.splat %3#1 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc403)
      %k_78 = tt.addptr %k_77, %k_76 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc403)
      %k_79 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc404)
      %k_80 = arith.constant 1 : i32 loc(#loc405)
      %k_81 = arith.constant 1 : i32 loc(#loc405)
      %k_82 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc405)
      %k_83 = arith.extsi %k_79 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc405)
      %k_84 = arith.extsi %k_82 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc405)
      %k_85 = arith.muli %k_83, %k_84 : tensor<1x64xi64> loc(#loc405)
      %k_86 = arith.constant 2147483647 : i64 loc(#loc405)
      %k_87 = arith.constant -2147483648 : i64 loc(#loc405)
      %k_88 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc405)
      %k_89 = arith.cmpi sle, %k_85, %k_88 : tensor<1x64xi64> loc(#loc405)
      %k_90 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc405)
      %k_91 = arith.cmpi sge, %k_85, %k_90 : tensor<1x64xi64> loc(#loc405)
      %k_92 = arith.andi %k_89, %k_91 : tensor<1x64xi1> loc(#loc405)
      %k_93 = arith.muli %k_79, %k_82 : tensor<1x64xi32> loc(#loc405)
      %k_94 = tt.broadcast %k_78 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc406)
      %k_95 = tt.broadcast %k_93 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc406)
      %k_96 = tt.addptr %k_94, %k_95 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc406)
      %k_97 = tt.load %k_96, %kmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc407)
      %v = tt.expand_dims %offs_n_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc408)
      %v_98 = tt.splat %stride_km : i32 -> tensor<128x1xi32> loc(#loc409)
      %v_99 = arith.extsi %v : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc409)
      %v_100 = arith.extsi %v_98 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc409)
      %v_101 = arith.muli %v_99, %v_100 : tensor<128x1xi64> loc(#loc409)
      %v_102 = arith.constant 2147483647 : i64 loc(#loc409)
      %v_103 = arith.constant -2147483648 : i64 loc(#loc409)
      %v_104 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc409)
      %v_105 = arith.cmpi sle, %v_101, %v_104 : tensor<128x1xi64> loc(#loc409)
      %v_106 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc409)
      %v_107 = arith.cmpi sge, %v_101, %v_106 : tensor<128x1xi64> loc(#loc409)
      %v_108 = arith.andi %v_105, %v_107 : tensor<128x1xi1> loc(#loc409)
      %v_109 = arith.muli %v, %v_98 : tensor<128x1xi32> loc(#loc409)
      %v_110 = tt.splat %3#2 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc410)
      %v_111 = tt.addptr %v_110, %v_109 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc410)
      %v_112 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc411)
      %v_113 = arith.constant 1 : i32 loc(#loc412)
      %v_114 = arith.constant 1 : i32 loc(#loc412)
      %v_115 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc412)
      %v_116 = arith.extsi %v_112 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc412)
      %v_117 = arith.extsi %v_115 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc412)
      %v_118 = arith.muli %v_116, %v_117 : tensor<1x64xi64> loc(#loc412)
      %v_119 = arith.constant 2147483647 : i64 loc(#loc412)
      %v_120 = arith.constant -2147483648 : i64 loc(#loc412)
      %v_121 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc412)
      %v_122 = arith.cmpi sle, %v_118, %v_121 : tensor<1x64xi64> loc(#loc412)
      %v_123 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc412)
      %v_124 = arith.cmpi sge, %v_118, %v_123 : tensor<1x64xi64> loc(#loc412)
      %v_125 = arith.andi %v_122, %v_124 : tensor<1x64xi1> loc(#loc412)
      %v_126 = arith.muli %v_112, %v_115 : tensor<1x64xi32> loc(#loc412)
      %v_127 = tt.broadcast %v_111 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc413)
      %v_128 = tt.broadcast %v_126 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc413)
      %v_129 = tt.addptr %v_127, %v_128 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc413)
      %v_130 = tt.load %v_129, %kmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc414)
      %start_m_inner = arith.constant 0 : i32 loc(#loc415)
      %num_steps = arith.extsi %qlen_11 : i32 to i64 loc(#loc416)
      %num_steps_131 = arith.extsi %start_m_inner : i32 to i64 loc(#loc416)
      %num_steps_132 = arith.subi %num_steps, %num_steps_131 : i64 loc(#loc416)
      %num_steps_133 = arith.constant 2147483647 : i64 loc(#loc416)
      %num_steps_134 = arith.constant -2147483648 : i64 loc(#loc416)
      %num_steps_135 = arith.cmpi sle, %num_steps_132, %num_steps_133 : i64 loc(#loc416)
      %num_steps_136 = arith.cmpi sge, %num_steps_132, %num_steps_134 : i64 loc(#loc416)
      %num_steps_137 = arith.andi %num_steps_135, %num_steps_136 : i1 loc(#loc416)
      %num_steps_138 = arith.subi %qlen_11, %start_m_inner : i32 loc(#loc416)
      %num_steps_139 = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%num_steps_138) : (i32) -> i32 loc(#loc417)
      %6 = arith.extsi %off_h : i32 to i64 loc(#loc89)
      %7:2 = tt.call @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_dkdv__fp32S128_64S_fp32S128_64S_Pbf16_bf16S128_64S_bf16S128_64S_Pbf16_i32_i32_i32_i32_i32_fp32_i32_i32_i32_i32_i32_i32_i32S64S_i64_Pbf16__(3,)cNone_(4,)cNone_(5,)cNone_(10,)cconstexpr_1__(16,)cconstexpr_64__(17,)cconstexpr_128__(18,)cconstexpr_64__(19,)cconstexpr_64__(28,)cconstexpr_False__(29,)cconstexpr_None__(31,)cconstexpr_False__(32,)cconstexpr_False__(33,)cconstexpr_1__(34,)cconstexpr_2_"(%dk, %dv, %3#0, %k_97, %v_130, %3#3, %stride_qm, %stride_dom, %stride_qh, %H, %N_CTX, %qk_scale, %start_n_33, %start_m_inner, %qlen_11, %klen_23, %num_steps_139, %begin_q_0, %offs_k, %6, %3#4) : (tensor<128x64xf32>, tensor<128x64xf32>, !tt.ptr<bf16>, tensor<128x64xbf16>, tensor<128x64xbf16>, !tt.ptr<bf16>, i32, i32, i32, i32, i32, f32, i32, i32, i32, i32, i32, i32, tensor<64xi32>, i64, !tt.ptr<bf16>) -> (tensor<128x64xf32>, tensor<128x64xf32>) loc(#loc90)
      %dv_ptrs = tt.expand_dims %offs_n_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc418)
      %dv_ptrs_140 = tt.splat %stride_km : i32 -> tensor<128x1xi32> loc(#loc419)
      %dv_ptrs_141 = arith.extsi %dv_ptrs : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_142 = arith.extsi %dv_ptrs_140 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_143 = arith.muli %dv_ptrs_141, %dv_ptrs_142 : tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_144 = arith.constant 2147483647 : i64 loc(#loc419)
      %dv_ptrs_145 = arith.constant -2147483648 : i64 loc(#loc419)
      %dv_ptrs_146 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_147 = arith.cmpi sle, %dv_ptrs_143, %dv_ptrs_146 : tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_148 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_149 = arith.cmpi sge, %dv_ptrs_143, %dv_ptrs_148 : tensor<128x1xi64> loc(#loc419)
      %dv_ptrs_150 = arith.andi %dv_ptrs_147, %dv_ptrs_149 : tensor<128x1xi1> loc(#loc419)
      %dv_ptrs_151 = arith.muli %dv_ptrs, %dv_ptrs_140 : tensor<128x1xi32> loc(#loc419)
      %dv_ptrs_152 = tt.splat %3#6 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc420)
      %dv_ptrs_153 = tt.addptr %dv_ptrs_152, %dv_ptrs_151 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc420)
      %dv_ptrs_154 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc421)
      %dv_ptrs_155 = arith.constant 1 : i32 loc(#loc422)
      %dv_ptrs_156 = arith.constant 1 : i32 loc(#loc422)
      %dv_ptrs_157 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc422)
      %dv_ptrs_158 = arith.extsi %dv_ptrs_154 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_159 = arith.extsi %dv_ptrs_157 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_160 = arith.muli %dv_ptrs_158, %dv_ptrs_159 : tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_161 = arith.constant 2147483647 : i64 loc(#loc422)
      %dv_ptrs_162 = arith.constant -2147483648 : i64 loc(#loc422)
      %dv_ptrs_163 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_164 = arith.cmpi sle, %dv_ptrs_160, %dv_ptrs_163 : tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_165 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_166 = arith.cmpi sge, %dv_ptrs_160, %dv_ptrs_165 : tensor<1x64xi64> loc(#loc422)
      %dv_ptrs_167 = arith.andi %dv_ptrs_164, %dv_ptrs_166 : tensor<1x64xi1> loc(#loc422)
      %dv_ptrs_168 = arith.muli %dv_ptrs_154, %dv_ptrs_157 : tensor<1x64xi32> loc(#loc422)
      %dv_ptrs_169 = tt.broadcast %dv_ptrs_153 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc423)
      %dv_ptrs_170 = tt.broadcast %dv_ptrs_168 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc423)
      %dv_ptrs_171 = tt.addptr %dv_ptrs_169, %dv_ptrs_170 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc423)
      %8 = arith.truncf %7#1 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc97)
      tt.store %dv_ptrs_171, %8, %kmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc97)
      %dk_ptrs = tt.expand_dims %offs_n_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc424)
      %dk_ptrs_172 = tt.splat %stride_km : i32 -> tensor<128x1xi32> loc(#loc425)
      %dk_ptrs_173 = arith.extsi %dk_ptrs : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_174 = arith.extsi %dk_ptrs_172 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_175 = arith.muli %dk_ptrs_173, %dk_ptrs_174 : tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_176 = arith.constant 2147483647 : i64 loc(#loc425)
      %dk_ptrs_177 = arith.constant -2147483648 : i64 loc(#loc425)
      %dk_ptrs_178 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_179 = arith.cmpi sle, %dk_ptrs_175, %dk_ptrs_178 : tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_180 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_181 = arith.cmpi sge, %dk_ptrs_175, %dk_ptrs_180 : tensor<128x1xi64> loc(#loc425)
      %dk_ptrs_182 = arith.andi %dk_ptrs_179, %dk_ptrs_181 : tensor<128x1xi1> loc(#loc425)
      %dk_ptrs_183 = arith.muli %dk_ptrs, %dk_ptrs_172 : tensor<128x1xi32> loc(#loc425)
      %dk_ptrs_184 = tt.splat %3#5 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc426)
      %dk_ptrs_185 = tt.addptr %dk_ptrs_184, %dk_ptrs_183 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc426)
      %dk_ptrs_186 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc427)
      %dk_ptrs_187 = arith.constant 1 : i32 loc(#loc428)
      %dk_ptrs_188 = arith.constant 1 : i32 loc(#loc428)
      %dk_ptrs_189 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc428)
      %dk_ptrs_190 = arith.extsi %dk_ptrs_186 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_191 = arith.extsi %dk_ptrs_189 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_192 = arith.muli %dk_ptrs_190, %dk_ptrs_191 : tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_193 = arith.constant 2147483647 : i64 loc(#loc428)
      %dk_ptrs_194 = arith.constant -2147483648 : i64 loc(#loc428)
      %dk_ptrs_195 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_196 = arith.cmpi sle, %dk_ptrs_192, %dk_ptrs_195 : tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_197 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_198 = arith.cmpi sge, %dk_ptrs_192, %dk_ptrs_197 : tensor<1x64xi64> loc(#loc428)
      %dk_ptrs_199 = arith.andi %dk_ptrs_196, %dk_ptrs_198 : tensor<1x64xi1> loc(#loc428)
      %dk_ptrs_200 = arith.muli %dk_ptrs_186, %dk_ptrs_189 : tensor<1x64xi32> loc(#loc428)
      %dk_ptrs_201 = tt.broadcast %dk_ptrs_185 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc429)
      %dk_ptrs_202 = tt.broadcast %dk_ptrs_200 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc429)
      %dk_ptrs_203 = tt.addptr %dk_ptrs_201, %dk_ptrs_202 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc429)
      %9 = arith.truncf %7#0 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc104)
      tt.store %dk_ptrs_203, %9, %kmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc104)
    } else {
    } loc(#loc62)
    %5 = arith.cmpi slt, %start_m_43, %qlen_11 : i32 loc(#loc105)
    scf.if %5 {
      %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc430)
      %offs_m_44 = tt.splat %start_m_43 : i32 -> tensor<128xi32> loc(#loc431)
      %offs_m_45 = arith.extsi %offs_m_44 : tensor<128xi32> to tensor<128xi64> loc(#loc431)
      %offs_m_46 = arith.extsi %offs_m : tensor<128xi32> to tensor<128xi64> loc(#loc431)
      %offs_m_47 = arith.addi %offs_m_45, %offs_m_46 : tensor<128xi64> loc(#loc431)
      %offs_m_48 = arith.constant 2147483647 : i64 loc(#loc431)
      %offs_m_49 = arith.constant -2147483648 : i64 loc(#loc431)
      %offs_m_50 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc431)
      %offs_m_51 = arith.cmpi sle, %offs_m_47, %offs_m_50 : tensor<128xi64> loc(#loc431)
      %offs_m_52 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc431)
      %offs_m_53 = arith.cmpi sge, %offs_m_47, %offs_m_52 : tensor<128xi64> loc(#loc431)
      %offs_m_54 = arith.andi %offs_m_51, %offs_m_53 : tensor<128xi1> loc(#loc431)
      %offs_m_55 = arith.addi %offs_m_44, %offs_m : tensor<128xi32> loc(#loc431)
      %off_h2 = arith.extsi %off_h : i32 to i64 loc(#loc432)
      %qmask = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc433)
      %qmask_56 = arith.constant 64 : i32 loc(#loc434)
      %qmask_57 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc434)
      %qmask_58 = arith.cmpi slt, %qmask, %qmask_57 : tensor<1x64xi32> loc(#loc434)
      %qmask_59 = tt.expand_dims %offs_m_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc435)
      %qmask_60 = tt.splat %qlen_11 : i32 -> tensor<128x1xi32> loc(#loc436)
      %qmask_61 = arith.cmpi slt, %qmask_59, %qmask_60 : tensor<128x1xi32> loc(#loc436)
      %qmask_62 = tt.broadcast %qmask_58 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc437)
      %qmask_63 = tt.broadcast %qmask_61 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc437)
      %qmask_64 = arith.andi %qmask_62, %qmask_63 : tensor<128x64xi1> loc(#loc437)
      %q = tt.expand_dims %offs_m_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc438)
      %q_65 = tt.splat %stride_qm : i32 -> tensor<128x1xi32> loc(#loc439)
      %q_66 = arith.extsi %q : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc439)
      %q_67 = arith.extsi %q_65 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc439)
      %q_68 = arith.muli %q_66, %q_67 : tensor<128x1xi64> loc(#loc439)
      %q_69 = arith.constant 2147483647 : i64 loc(#loc439)
      %q_70 = arith.constant -2147483648 : i64 loc(#loc439)
      %q_71 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc439)
      %q_72 = arith.cmpi sle, %q_68, %q_71 : tensor<128x1xi64> loc(#loc439)
      %q_73 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc439)
      %q_74 = arith.cmpi sge, %q_68, %q_73 : tensor<128x1xi64> loc(#loc439)
      %q_75 = arith.andi %q_72, %q_74 : tensor<128x1xi1> loc(#loc439)
      %q_76 = arith.muli %q, %q_65 : tensor<128x1xi32> loc(#loc439)
      %q_77 = tt.splat %3#0 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc440)
      %q_78 = tt.addptr %q_77, %q_76 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc440)
      %q_79 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc441)
      %q_80 = arith.constant 1 : i32 loc(#loc442)
      %q_81 = arith.constant 1 : i32 loc(#loc442)
      %q_82 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc442)
      %q_83 = arith.extsi %q_79 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc442)
      %q_84 = arith.extsi %q_82 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc442)
      %q_85 = arith.muli %q_83, %q_84 : tensor<1x64xi64> loc(#loc442)
      %q_86 = arith.constant 2147483647 : i64 loc(#loc442)
      %q_87 = arith.constant -2147483648 : i64 loc(#loc442)
      %q_88 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc442)
      %q_89 = arith.cmpi sle, %q_85, %q_88 : tensor<1x64xi64> loc(#loc442)
      %q_90 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc442)
      %q_91 = arith.cmpi sge, %q_85, %q_90 : tensor<1x64xi64> loc(#loc442)
      %q_92 = arith.andi %q_89, %q_91 : tensor<1x64xi1> loc(#loc442)
      %q_93 = arith.muli %q_79, %q_82 : tensor<1x64xi32> loc(#loc442)
      %q_94 = tt.broadcast %q_78 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc443)
      %q_95 = tt.broadcast %q_93 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc443)
      %q_96 = tt.addptr %q_94, %q_95 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc443)
      %q_97 = tt.load %q_96, %qmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc444)
      %do = tt.expand_dims %offs_m_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc445)
      %do_98 = tt.splat %stride_dom : i32 -> tensor<128x1xi32> loc(#loc446)
      %do_99 = arith.extsi %do : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc446)
      %do_100 = arith.extsi %do_98 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc446)
      %do_101 = arith.muli %do_99, %do_100 : tensor<128x1xi64> loc(#loc446)
      %do_102 = arith.constant 2147483647 : i64 loc(#loc446)
      %do_103 = arith.constant -2147483648 : i64 loc(#loc446)
      %do_104 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc446)
      %do_105 = arith.cmpi sle, %do_101, %do_104 : tensor<128x1xi64> loc(#loc446)
      %do_106 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc446)
      %do_107 = arith.cmpi sge, %do_101, %do_106 : tensor<128x1xi64> loc(#loc446)
      %do_108 = arith.andi %do_105, %do_107 : tensor<128x1xi1> loc(#loc446)
      %do_109 = arith.muli %do, %do_98 : tensor<128x1xi32> loc(#loc446)
      %do_110 = tt.splat %3#3 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc447)
      %do_111 = tt.addptr %do_110, %do_109 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc447)
      %do_112 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc448)
      %do_113 = arith.constant 1 : i32 loc(#loc449)
      %do_114 = arith.constant 1 : i32 loc(#loc449)
      %do_115 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc449)
      %do_116 = arith.extsi %do_112 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc449)
      %do_117 = arith.extsi %do_115 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc449)
      %do_118 = arith.muli %do_116, %do_117 : tensor<1x64xi64> loc(#loc449)
      %do_119 = arith.constant 2147483647 : i64 loc(#loc449)
      %do_120 = arith.constant -2147483648 : i64 loc(#loc449)
      %do_121 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc449)
      %do_122 = arith.cmpi sle, %do_118, %do_121 : tensor<1x64xi64> loc(#loc449)
      %do_123 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc449)
      %do_124 = arith.cmpi sge, %do_118, %do_123 : tensor<1x64xi64> loc(#loc449)
      %do_125 = arith.andi %do_122, %do_124 : tensor<1x64xi1> loc(#loc449)
      %do_126 = arith.muli %do_112, %do_115 : tensor<1x64xi32> loc(#loc449)
      %do_127 = tt.broadcast %do_111 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc450)
      %do_128 = tt.broadcast %do_126 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc450)
      %do_129 = tt.addptr %do_127, %do_128 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc450)
      %do_130 = tt.load %do_129, %qmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc451)
      %dq = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc452)
      %start_n_inner = arith.constant 0 : i32 loc(#loc453)
      %num_steps = tt.call @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%klen_23) : (i32) -> i32 loc(#loc454)
      %dq_131 = tt.call @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_dq__fp32S128_64S_bf16S128_64S_Pbf16_Pbf16_bf16S128_64S_i32_i32_i32_i32_fp32_i32_i32_i32_i32_i32_i32_i32S64S_i32__(4,)cconstexpr_None__(5,)cconstexpr_None__(8,)cconstexpr_1__(13,)cconstexpr_128__(14,)cconstexpr_64__(15,)cconstexpr_64__(16,)cconstexpr_64__(25,)cconstexpr_False__(26,)cconstexpr_None__(27,)cconstexpr_False__(28,)cconstexpr_1__(29,)cconstexpr_2_"(%dq, %q_97, %3#1, %3#2, %do_130, %stride_km, %stride_kh, %H, %N_CTX, %qk_scale, %start_m_43, %start_n_inner, %qlen_11, %klen_23, %num_steps, %begin_k_12, %offs_k, %off_h_kv) : (tensor<128x64xf32>, tensor<128x64xbf16>, !tt.ptr<bf16>, !tt.ptr<bf16>, tensor<128x64xbf16>, i32, i32, i32, i32, f32, i32, i32, i32, i32, i32, i32, tensor<64xi32>, i32) -> tensor<128x64xf32> loc(#loc455)
      %dq_ptrs = tt.expand_dims %offs_m_55 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc456)
      %dq_ptrs_132 = tt.splat %stride_qm : i32 -> tensor<128x1xi32> loc(#loc457)
      %dq_ptrs_133 = arith.extsi %dq_ptrs : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_134 = arith.extsi %dq_ptrs_132 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_135 = arith.muli %dq_ptrs_133, %dq_ptrs_134 : tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_136 = arith.constant 2147483647 : i64 loc(#loc457)
      %dq_ptrs_137 = arith.constant -2147483648 : i64 loc(#loc457)
      %dq_ptrs_138 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_139 = arith.cmpi sle, %dq_ptrs_135, %dq_ptrs_138 : tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_140 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_141 = arith.cmpi sge, %dq_ptrs_135, %dq_ptrs_140 : tensor<128x1xi64> loc(#loc457)
      %dq_ptrs_142 = arith.andi %dq_ptrs_139, %dq_ptrs_141 : tensor<128x1xi1> loc(#loc457)
      %dq_ptrs_143 = arith.muli %dq_ptrs, %dq_ptrs_132 : tensor<128x1xi32> loc(#loc457)
      %dq_ptrs_144 = tt.splat %3#4 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc458)
      %dq_ptrs_145 = tt.addptr %dq_ptrs_144, %dq_ptrs_143 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc458)
      %dq_ptrs_146 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc459)
      %dq_ptrs_147 = arith.constant 1 : i32 loc(#loc460)
      %dq_ptrs_148 = arith.constant 1 : i32 loc(#loc460)
      %dq_ptrs_149 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc460)
      %dq_ptrs_150 = arith.extsi %dq_ptrs_146 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_151 = arith.extsi %dq_ptrs_149 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_152 = arith.muli %dq_ptrs_150, %dq_ptrs_151 : tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_153 = arith.constant 2147483647 : i64 loc(#loc460)
      %dq_ptrs_154 = arith.constant -2147483648 : i64 loc(#loc460)
      %dq_ptrs_155 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_156 = arith.cmpi sle, %dq_ptrs_152, %dq_ptrs_155 : tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_157 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_158 = arith.cmpi sge, %dq_ptrs_152, %dq_ptrs_157 : tensor<1x64xi64> loc(#loc460)
      %dq_ptrs_159 = arith.andi %dq_ptrs_156, %dq_ptrs_158 : tensor<1x64xi1> loc(#loc460)
      %dq_ptrs_160 = arith.muli %dq_ptrs_146, %dq_ptrs_149 : tensor<1x64xi32> loc(#loc460)
      %dq_ptrs_161 = tt.broadcast %dq_ptrs_145 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc461)
      %dq_ptrs_162 = tt.broadcast %dq_ptrs_160 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc461)
      %dq_ptrs_163 = tt.addptr %dq_ptrs_161, %dq_ptrs_162 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc461)
      %6 = arith.truncf %dq_131 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc139)
      tt.store %dq_ptrs_163, %6, %qmask_64 : tensor<128x64x!tt.ptr<bf16>> loc(#loc139)
    } else {
    } loc(#loc106)
    tt.return loc(#loc140)
  } loc(#loc21)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc142)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc142)
    tt.return %cst_0 : tensor<128x64xf32> loc(#loc143)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128x64xf32> loc(#loc144)
    tt.return %0 : tensor<128x64xf32> loc(#loc144)
  } loc(#loc141)
  tt.func private @"triton.language.standard.cdiv__i32__(1,)cconstexpr_64_"(%x: i32 loc("x"(#loc145))) -> i32 attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc146)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc146)
    %0 = arith.extsi %x : i32 to i64 loc(#loc146)
    %1 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc146)
    %2 = arith.addi %0, %1 : i64 loc(#loc146)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc146)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc146)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc146)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc146)
    %5 = arith.andi %3, %4 : i1 loc(#loc146)
    %6 = arith.addi %x, %c64_i32_0 : i32 loc(#loc146)
    %c1_i32 = arith.constant 1 : i32 loc(#loc147)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc147)
    %7 = arith.extsi %6 : i32 to i64 loc(#loc147)
    %8 = arith.extsi %c1_i32_1 : i32 to i64 loc(#loc147)
    %9 = arith.subi %7, %8 : i64 loc(#loc147)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc147)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc147)
    %10 = arith.cmpi sle, %9, %c2147483647_i64_2 : i64 loc(#loc147)
    %11 = arith.cmpi sge, %9, %c-2147483648_i64_3 : i64 loc(#loc147)
    %12 = arith.andi %10, %11 : i1 loc(#loc147)
    %13 = arith.subi %6, %c1_i32_1 : i32 loc(#loc147)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc148)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc148)
    %14 = arith.divsi %13, %c64_i32_5 : i32 loc(#loc148)
    tt.return %14 : i32 loc(#loc149)
  ^bb1:  // no predecessors
    %15 = ub.poison : i32 loc(#loc150)
    tt.return %15 : i32 loc(#loc150)
  } loc(#loc145)
  tt.func private @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_dkdv__fp32S128_64S_fp32S128_64S_Pbf16_bf16S128_64S_bf16S128_64S_Pbf16_i32_i32_i32_i32_i32_fp32_i32_i32_i32_i32_i32_i32_i32S64S_i64_Pbf16__(3,)cNone_(4,)cNone_(5,)cNone_(10,)cconstexpr_1__(16,)cconstexpr_64__(17,)cconstexpr_128__(18,)cconstexpr_64__(19,)cconstexpr_64__(28,)cconstexpr_False__(29,)cconstexpr_None__(31,)cconstexpr_False__(32,)cconstexpr_False__(33,)cconstexpr_1__(34,)cconstexpr_2_"(%dk: tensor<128x64xf32> loc("dk"(#loc151)), %dv: tensor<128x64xf32> loc("dv"(#loc151)), %Q: !tt.ptr<bf16> loc("Q"(#loc151)), %k: tensor<128x64xbf16> loc("k"(#loc151)), %v: tensor<128x64xbf16> loc("v"(#loc151)), %DO: !tt.ptr<bf16> loc("DO"(#loc151)), %stride_qm: i32 loc("stride_qm"(#loc151)), %stride_dom: i32 loc("stride_dom"(#loc151)), %stride_qh: i32 loc("stride_qh"(#loc151)), %H: i32 loc("H"(#loc151)), %N_CTX: i32 loc("N_CTX"(#loc151)), %qk_scale: f32 loc("qk_scale"(#loc151)), %start_n: i32 loc("start_n"(#loc151)), %start_m: i32 loc("start_m"(#loc151)), %qlen: i32 loc("qlen"(#loc151)), %klen: i32 loc("klen"(#loc151)), %num_steps: i32 loc("num_steps"(#loc151)), %begin_q: i32 loc("begin_q"(#loc151)), %offs_k: tensor<64xi32> loc("offs_k"(#loc151)), %off_h2: i64 loc("off_h2"(#loc151)), %DQ: !tt.ptr<bf16> loc("DQ"(#loc151))) -> (tensor<128x64xf32>, tensor<128x64xf32>) attributes {noinline = false} {
    %offs_m = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc484)
    %offs_m_0 = tt.splat %start_m : i32 -> tensor<64xi32> loc(#loc485)
    %offs_m_1 = arith.extsi %offs_m_0 : tensor<64xi32> to tensor<64xi64> loc(#loc485)
    %offs_m_2 = arith.extsi %offs_m : tensor<64xi32> to tensor<64xi64> loc(#loc485)
    %offs_m_3 = arith.addi %offs_m_1, %offs_m_2 : tensor<64xi64> loc(#loc485)
    %offs_m_4 = arith.constant 2147483647 : i64 loc(#loc485)
    %offs_m_5 = arith.constant -2147483648 : i64 loc(#loc485)
    %offs_m_6 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc485)
    %offs_m_7 = arith.cmpi sle, %offs_m_3, %offs_m_6 : tensor<64xi64> loc(#loc485)
    %offs_m_8 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc485)
    %offs_m_9 = arith.cmpi sge, %offs_m_3, %offs_m_8 : tensor<64xi64> loc(#loc485)
    %offs_m_10 = arith.andi %offs_m_7, %offs_m_9 : tensor<64xi1> loc(#loc485)
    %offs_m_11 = arith.addi %offs_m_0, %offs_m : tensor<64xi32> loc(#loc485)
    %offs_n = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc486)
    %offs_n_12 = tt.splat %start_n : i32 -> tensor<128xi32> loc(#loc487)
    %offs_n_13 = arith.extsi %offs_n_12 : tensor<128xi32> to tensor<128xi64> loc(#loc487)
    %offs_n_14 = arith.extsi %offs_n : tensor<128xi32> to tensor<128xi64> loc(#loc487)
    %offs_n_15 = arith.addi %offs_n_13, %offs_n_14 : tensor<128xi64> loc(#loc487)
    %offs_n_16 = arith.constant 2147483647 : i64 loc(#loc487)
    %offs_n_17 = arith.constant -2147483648 : i64 loc(#loc487)
    %offs_n_18 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc487)
    %offs_n_19 = arith.cmpi sle, %offs_n_15, %offs_n_18 : tensor<128xi64> loc(#loc487)
    %offs_n_20 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc487)
    %offs_n_21 = arith.cmpi sge, %offs_n_15, %offs_n_20 : tensor<128xi64> loc(#loc487)
    %offs_n_22 = arith.andi %offs_n_19, %offs_n_21 : tensor<128xi1> loc(#loc487)
    %offs_n_23 = arith.addi %offs_n_12, %offs_n : tensor<128xi32> loc(#loc487)
    %qT_ptrs = tt.expand_dims %offs_m_11 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc488)
    %qT_ptrs_24 = tt.splat %stride_qm : i32 -> tensor<1x64xi32> loc(#loc489)
    %qT_ptrs_25 = arith.extsi %qT_ptrs : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_26 = arith.extsi %qT_ptrs_24 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_27 = arith.muli %qT_ptrs_25, %qT_ptrs_26 : tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_28 = arith.constant 2147483647 : i64 loc(#loc489)
    %qT_ptrs_29 = arith.constant -2147483648 : i64 loc(#loc489)
    %qT_ptrs_30 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_31 = arith.cmpi sle, %qT_ptrs_27, %qT_ptrs_30 : tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_33 = arith.cmpi sge, %qT_ptrs_27, %qT_ptrs_32 : tensor<1x64xi64> loc(#loc489)
    %qT_ptrs_34 = arith.andi %qT_ptrs_31, %qT_ptrs_33 : tensor<1x64xi1> loc(#loc489)
    %qT_ptrs_35 = arith.muli %qT_ptrs, %qT_ptrs_24 : tensor<1x64xi32> loc(#loc489)
    %qT_ptrs_36 = tt.splat %Q : !tt.ptr<bf16> -> tensor<1x64x!tt.ptr<bf16>> loc(#loc490)
    %qT_ptrs_37 = tt.addptr %qT_ptrs_36, %qT_ptrs_35 : tensor<1x64x!tt.ptr<bf16>>, tensor<1x64xi32> loc(#loc490)
    %qT_ptrs_38 = tt.expand_dims %offs_k {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc491)
    %qT_ptrs_39 = arith.constant 1 : i32 loc(#loc492)
    %qT_ptrs_40 = arith.constant 1 : i32 loc(#loc492)
    %qT_ptrs_41 = arith.constant dense<1> : tensor<64x1xi32> loc(#loc492)
    %qT_ptrs_42 = arith.extsi %qT_ptrs_38 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_43 = arith.extsi %qT_ptrs_41 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_44 = arith.muli %qT_ptrs_42, %qT_ptrs_43 : tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_45 = arith.constant 2147483647 : i64 loc(#loc492)
    %qT_ptrs_46 = arith.constant -2147483648 : i64 loc(#loc492)
    %qT_ptrs_47 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_48 = arith.cmpi sle, %qT_ptrs_44, %qT_ptrs_47 : tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_49 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_50 = arith.cmpi sge, %qT_ptrs_44, %qT_ptrs_49 : tensor<64x1xi64> loc(#loc492)
    %qT_ptrs_51 = arith.andi %qT_ptrs_48, %qT_ptrs_50 : tensor<64x1xi1> loc(#loc492)
    %qT_ptrs_52 = arith.muli %qT_ptrs_38, %qT_ptrs_41 : tensor<64x1xi32> loc(#loc492)
    %qT_ptrs_53 = tt.broadcast %qT_ptrs_37 : tensor<1x64x!tt.ptr<bf16>> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc493)
    %qT_ptrs_54 = tt.broadcast %qT_ptrs_52 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc493)
    %qT_ptrs_55 = tt.addptr %qT_ptrs_53, %qT_ptrs_54 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc493)
    %do_ptrs = tt.expand_dims %offs_m_11 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc494)
    %do_ptrs_56 = tt.splat %stride_dom : i32 -> tensor<64x1xi32> loc(#loc495)
    %do_ptrs_57 = arith.extsi %do_ptrs : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc495)
    %do_ptrs_58 = arith.extsi %do_ptrs_56 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc495)
    %do_ptrs_59 = arith.muli %do_ptrs_57, %do_ptrs_58 : tensor<64x1xi64> loc(#loc495)
    %do_ptrs_60 = arith.constant 2147483647 : i64 loc(#loc495)
    %do_ptrs_61 = arith.constant -2147483648 : i64 loc(#loc495)
    %do_ptrs_62 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc495)
    %do_ptrs_63 = arith.cmpi sle, %do_ptrs_59, %do_ptrs_62 : tensor<64x1xi64> loc(#loc495)
    %do_ptrs_64 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc495)
    %do_ptrs_65 = arith.cmpi sge, %do_ptrs_59, %do_ptrs_64 : tensor<64x1xi64> loc(#loc495)
    %do_ptrs_66 = arith.andi %do_ptrs_63, %do_ptrs_65 : tensor<64x1xi1> loc(#loc495)
    %do_ptrs_67 = arith.muli %do_ptrs, %do_ptrs_56 : tensor<64x1xi32> loc(#loc495)
    %do_ptrs_68 = tt.splat %DO : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc496)
    %do_ptrs_69 = tt.addptr %do_ptrs_68, %do_ptrs_67 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc496)
    %do_ptrs_70 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc497)
    %do_ptrs_71 = arith.constant 1 : i32 loc(#loc498)
    %do_ptrs_72 = arith.constant 1 : i32 loc(#loc498)
    %do_ptrs_73 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc498)
    %do_ptrs_74 = arith.extsi %do_ptrs_70 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc498)
    %do_ptrs_75 = arith.extsi %do_ptrs_73 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc498)
    %do_ptrs_76 = arith.muli %do_ptrs_74, %do_ptrs_75 : tensor<1x64xi64> loc(#loc498)
    %do_ptrs_77 = arith.constant 2147483647 : i64 loc(#loc498)
    %do_ptrs_78 = arith.constant -2147483648 : i64 loc(#loc498)
    %do_ptrs_79 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc498)
    %do_ptrs_80 = arith.cmpi sle, %do_ptrs_76, %do_ptrs_79 : tensor<1x64xi64> loc(#loc498)
    %do_ptrs_81 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc498)
    %do_ptrs_82 = arith.cmpi sge, %do_ptrs_76, %do_ptrs_81 : tensor<1x64xi64> loc(#loc498)
    %do_ptrs_83 = arith.andi %do_ptrs_80, %do_ptrs_82 : tensor<1x64xi1> loc(#loc498)
    %do_ptrs_84 = arith.muli %do_ptrs_70, %do_ptrs_73 : tensor<1x64xi32> loc(#loc498)
    %do_ptrs_85 = tt.broadcast %do_ptrs_69 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc499)
    %do_ptrs_86 = tt.broadcast %do_ptrs_84 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc499)
    %do_ptrs_87 = tt.addptr %do_ptrs_85, %do_ptrs_86 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc499)
    %step_m = arith.constant 64 : i32 loc(#loc500)
    %c0_i32 = arith.constant 0 : i32 loc(#loc169)
    %c1_i32 = arith.constant 1 : i32 loc(#loc169)
    %0 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc169)
    %1 = arith.bitcast %num_steps : i32 to i32 loc(#loc169)
    %2 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc169)
    %3 = ub.poison : i32 loc(#loc169)
    %curr_m:6 = scf.for %_blk_idx = %0 to %1 step %2 iter_args(%dk_88 = %dk, %dv_89 = %dv, %offs_m_90 = %offs_m_11, %qT_ptrs_91 = %qT_ptrs_55, %do_ptrs_92 = %do_ptrs_87, %curr_m_93 = %start_m) -> (tensor<128x64xf32>, tensor<128x64xf32>, tensor<64xi32>, tensor<64x64x!tt.ptr<bf16>>, tensor<64x64x!tt.ptr<bf16>>, i32)  : i32 {
      %offs_m_94 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc502)
      %offs_m_95 = tt.splat %curr_m_93 : i32 -> tensor<64xi32> loc(#loc503)
      %offs_m_96 = arith.extsi %offs_m_95 : tensor<64xi32> to tensor<64xi64> loc(#loc503)
      %offs_m_97 = arith.extsi %offs_m_94 : tensor<64xi32> to tensor<64xi64> loc(#loc503)
      %offs_m_98 = arith.addi %offs_m_96, %offs_m_97 : tensor<64xi64> loc(#loc503)
      %offs_m_99 = arith.constant 2147483647 : i64 loc(#loc503)
      %offs_m_100 = arith.constant -2147483648 : i64 loc(#loc503)
      %offs_m_101 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc503)
      %offs_m_102 = arith.cmpi sle, %offs_m_98, %offs_m_101 : tensor<64xi64> loc(#loc503)
      %offs_m_103 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc503)
      %offs_m_104 = arith.cmpi sge, %offs_m_98, %offs_m_103 : tensor<64xi64> loc(#loc503)
      %offs_m_105 = arith.andi %offs_m_102, %offs_m_104 : tensor<64xi1> loc(#loc503)
      %offs_m_106 = arith.addi %offs_m_95, %offs_m_94 : tensor<64xi32> loc(#loc503)
      %qmask = tt.expand_dims %offs_k {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc504)
      %qmask_107 = arith.constant 64 : i32 loc(#loc505)
      %qmask_108 = arith.constant dense<64> : tensor<64x1xi32> loc(#loc505)
      %qmask_109 = arith.cmpi slt, %qmask, %qmask_108 : tensor<64x1xi32> loc(#loc505)
      %qmask_110 = tt.expand_dims %offs_m_106 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc506)
      %qmask_111 = tt.splat %qlen : i32 -> tensor<1x64xi32> loc(#loc507)
      %qmask_112 = arith.cmpi slt, %qmask_110, %qmask_111 : tensor<1x64xi32> loc(#loc507)
      %qmask_113 = tt.broadcast %qmask_109 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc508)
      %qmask_114 = tt.broadcast %qmask_112 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc508)
      %qmask_115 = arith.andi %qmask_113, %qmask_114 : tensor<64x64xi1> loc(#loc508)
      %qT = tt.load %qT_ptrs_91, %qmask_115 : tensor<64x64x!tt.ptr<bf16>> loc(#loc509)
      %qkT = arith.constant 0.000000e+00 : f32 loc(#loc510)
      %qkT_116 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc510)
      %qkT_117 = tt.dot %k, %qT, %qkT_116 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc510)
      %omask = tt.expand_dims %offs_m_106 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc511)
      %omask_118 = tt.splat %qlen : i32 -> tensor<64x1xi32> loc(#loc512)
      %omask_119 = arith.cmpi slt, %omask, %omask_118 : tensor<64x1xi32> loc(#loc512)
      %omask_120 = tt.expand_dims %offs_k {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc513)
      %omask_121 = arith.constant 64 : i32 loc(#loc514)
      %omask_122 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc514)
      %omask_123 = arith.cmpi slt, %omask_120, %omask_122 : tensor<1x64xi32> loc(#loc514)
      %omask_124 = tt.broadcast %omask_119 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc515)
      %omask_125 = tt.broadcast %omask_123 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc515)
      %omask_126 = arith.andi %omask_124, %omask_125 : tensor<64x64xi1> loc(#loc515)
      %do = tt.load %do_ptrs_92, %omask_126 : tensor<64x64x!tt.ptr<bf16>> loc(#loc516)
      %dpT = tt.trans %do {order = array<i32: 1, 0>} : tensor<64x64xbf16> -> tensor<64x64xbf16> loc(#loc517)
      %dpT_127 = arith.constant 0.000000e+00 : f32 loc(#loc518)
      %dpT_128 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc518)
      %dpT_129 = tt.dot %v, %dpT, %dpT_128 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc518)
      %tanh_out = arith.constant 0.797884583 : f32 loc(#loc519)
      %tanh_out_130 = arith.constant 0.797884583 : f32 loc(#loc519)
      %tanh_out_131 = arith.constant dense<0.797884583> : tensor<128x64xf32> loc(#loc519)
      %tanh_out_132 = arith.mulf %tanh_out_131, %qkT_117 : tensor<128x64xf32> loc(#loc519)
      %tanh_out_133 = arith.constant 4.471500e-02 : f32 loc(#loc520)
      %tanh_out_134 = arith.constant 4.471500e-02 : f32 loc(#loc520)
      %tanh_out_135 = arith.constant dense<4.471500e-02> : tensor<128x64xf32> loc(#loc520)
      %tanh_out_136 = arith.mulf %tanh_out_135, %qkT_117 : tensor<128x64xf32> loc(#loc520)
      %tanh_out_137 = arith.mulf %tanh_out_136, %qkT_117 : tensor<128x64xf32> loc(#loc521)
      %tanh_out_138 = arith.constant 1 : i32 loc(#loc522)
      %tanh_out_139 = arith.constant 1.000000e+00 : f32 loc(#loc522)
      %tanh_out_140 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc522)
      %tanh_out_141 = arith.addf %tanh_out_140, %tanh_out_137 : tensor<128x64xf32> loc(#loc522)
      %tanh_out_142 = arith.mulf %tanh_out_132, %tanh_out_141 : tensor<128x64xf32> loc(#loc523)
      %tanh_out_143 = tt.call @tritonbench.operators.gdpa.math.tanh_approx_fp32__fp32S128_64S__(%tanh_out_142) : (tensor<128x64xf32>) -> tensor<128x64xf32> loc(#loc524)
      %ppT = arith.constant 5.000000e-01 : f32 loc(#loc525)
      %ppT_144 = arith.constant 5.000000e-01 : f32 loc(#loc525)
      %ppT_145 = arith.constant dense<5.000000e-01> : tensor<128x64xf32> loc(#loc525)
      %ppT_146 = arith.mulf %ppT_145, %qkT_117 : tensor<128x64xf32> loc(#loc525)
      %ppT_147 = arith.constant 1 : i32 loc(#loc526)
      %ppT_148 = arith.constant 1.000000e+00 : f32 loc(#loc526)
      %ppT_149 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc526)
      %ppT_150 = arith.addf %ppT_149, %tanh_out_143 : tensor<128x64xf32> loc(#loc526)
      %ppT_151 = arith.mulf %ppT_146, %ppT_150 : tensor<128x64xf32> loc(#loc527)
      %ppT_152 = tt.splat %qk_scale : f32 -> tensor<128x64xf32> loc(#loc528)
      %ppT_153 = arith.mulf %ppT_151, %ppT_152 : tensor<128x64xf32> loc(#loc528)
      %ppT_154 = arith.truncf %ppT_153 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc529)
      %dv_155 = arith.constant 0.000000e+00 : f32 loc(#loc530)
      %dv_156 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc530)
      %dv_157 = tt.dot %ppT_154, %do, %dv_156 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc530)
      %dv_158 = arith.addf %dv_89, %dv_157 : tensor<128x64xf32> loc(#loc531)
      %pT = arith.constant 5.000000e-01 : f32 loc(#loc532)
      %pT_159 = arith.constant 5.000000e-01 : f32 loc(#loc532)
      %pT_160 = arith.constant dense<5.000000e-01> : tensor<128x64xf32> loc(#loc532)
      %pT_161 = arith.mulf %pT_160, %qkT_117 : tensor<128x64xf32> loc(#loc532)
      %pT_162 = arith.mulf %tanh_out_143, %tanh_out_143 : tensor<128x64xf32> loc(#loc533)
      %pT_163 = arith.constant 1 : i32 loc(#loc534)
      %pT_164 = arith.constant 1.000000e+00 : f32 loc(#loc534)
      %pT_165 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc534)
      %pT_166 = arith.subf %pT_165, %pT_162 : tensor<128x64xf32> loc(#loc534)
      %pT_167 = arith.mulf %pT_161, %pT_166 : tensor<128x64xf32> loc(#loc535)
      %pT_168 = arith.constant 0.107032225 : f32 loc(#loc536)
      %pT_169 = arith.constant 0.107032225 : f32 loc(#loc536)
      %pT_170 = arith.constant dense<0.107032225> : tensor<128x64xf32> loc(#loc536)
      %pT_171 = arith.mulf %pT_170, %qkT_117 : tensor<128x64xf32> loc(#loc536)
      %pT_172 = arith.mulf %pT_171, %qkT_117 : tensor<128x64xf32> loc(#loc537)
      %pT_173 = arith.constant 0.797884583 : f32 loc(#loc538)
      %pT_174 = arith.constant 0.797884583 : f32 loc(#loc538)
      %pT_175 = arith.constant dense<0.797884583> : tensor<128x64xf32> loc(#loc538)
      %pT_176 = arith.addf %pT_175, %pT_172 : tensor<128x64xf32> loc(#loc538)
      %pT_177 = arith.mulf %pT_167, %pT_176 : tensor<128x64xf32> loc(#loc539)
      %pT_178 = arith.constant 1 : i32 loc(#loc540)
      %pT_179 = arith.constant 1.000000e+00 : f32 loc(#loc540)
      %pT_180 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc540)
      %pT_181 = arith.addf %pT_180, %tanh_out_143 : tensor<128x64xf32> loc(#loc540)
      %pT_182 = arith.constant 5.000000e-01 : f32 loc(#loc541)
      %pT_183 = arith.constant 5.000000e-01 : f32 loc(#loc541)
      %pT_184 = arith.constant dense<5.000000e-01> : tensor<128x64xf32> loc(#loc541)
      %pT_185 = arith.mulf %pT_184, %pT_181 : tensor<128x64xf32> loc(#loc541)
      %pT_186 = arith.addf %pT_177, %pT_185 : tensor<128x64xf32> loc(#loc542)
      %pT_187 = tt.splat %qk_scale : f32 -> tensor<128x64xf32> loc(#loc543)
      %pT_188 = arith.mulf %pT_186, %pT_187 : tensor<128x64xf32> loc(#loc543)
      %dsT = arith.mulf %pT_188, %dpT_129 : tensor<128x64xf32> loc(#loc544)
      %dsT_189 = arith.truncf %dsT : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc545)
      %dk_190 = tt.trans %qT {order = array<i32: 1, 0>} : tensor<64x64xbf16> -> tensor<64x64xbf16> loc(#loc546)
      %dk_191 = arith.constant 0.000000e+00 : f32 loc(#loc547)
      %dk_192 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc547)
      %dk_193 = tt.dot %dsT_189, %dk_190, %dk_192 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc547)
      %dk_194 = arith.addf %dk_88, %dk_193 : tensor<128x64xf32> loc(#loc548)
      %curr_m_195 = arith.extsi %curr_m_93 : i32 to i64 loc(#loc549)
      %curr_m_196 = arith.extsi %step_m : i32 to i64 loc(#loc549)
      %curr_m_197 = arith.addi %curr_m_195, %curr_m_196 : i64 loc(#loc549)
      %curr_m_198 = arith.constant 2147483647 : i64 loc(#loc549)
      %curr_m_199 = arith.constant -2147483648 : i64 loc(#loc549)
      %curr_m_200 = arith.cmpi sle, %curr_m_197, %curr_m_198 : i64 loc(#loc549)
      %curr_m_201 = arith.cmpi sge, %curr_m_197, %curr_m_199 : i64 loc(#loc549)
      %curr_m_202 = arith.andi %curr_m_200, %curr_m_201 : i1 loc(#loc549)
      %curr_m_203 = arith.addi %curr_m_93, %step_m : i32 loc(#loc549)
      %qT_ptrs_204 = arith.extsi %step_m : i32 to i64 loc(#loc550)
      %qT_ptrs_205 = arith.extsi %stride_qm : i32 to i64 loc(#loc550)
      %qT_ptrs_206 = arith.muli %qT_ptrs_204, %qT_ptrs_205 : i64 loc(#loc550)
      %qT_ptrs_207 = arith.constant 2147483647 : i64 loc(#loc550)
      %qT_ptrs_208 = arith.constant -2147483648 : i64 loc(#loc550)
      %qT_ptrs_209 = arith.cmpi sle, %qT_ptrs_206, %qT_ptrs_207 : i64 loc(#loc550)
      %qT_ptrs_210 = arith.cmpi sge, %qT_ptrs_206, %qT_ptrs_208 : i64 loc(#loc550)
      %qT_ptrs_211 = arith.andi %qT_ptrs_209, %qT_ptrs_210 : i1 loc(#loc550)
      %qT_ptrs_212 = arith.muli %step_m, %stride_qm : i32 loc(#loc550)
      %qT_ptrs_213 = tt.splat %qT_ptrs_212 : i32 -> tensor<64x64xi32> loc(#loc551)
      %qT_ptrs_214 = tt.addptr %qT_ptrs_91, %qT_ptrs_213 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc551)
      %do_ptrs_215 = arith.extsi %step_m : i32 to i64 loc(#loc552)
      %do_ptrs_216 = arith.extsi %stride_dom : i32 to i64 loc(#loc552)
      %do_ptrs_217 = arith.muli %do_ptrs_215, %do_ptrs_216 : i64 loc(#loc552)
      %do_ptrs_218 = arith.constant 2147483647 : i64 loc(#loc552)
      %do_ptrs_219 = arith.constant -2147483648 : i64 loc(#loc552)
      %do_ptrs_220 = arith.cmpi sle, %do_ptrs_217, %do_ptrs_218 : i64 loc(#loc552)
      %do_ptrs_221 = arith.cmpi sge, %do_ptrs_217, %do_ptrs_219 : i64 loc(#loc552)
      %do_ptrs_222 = arith.andi %do_ptrs_220, %do_ptrs_221 : i1 loc(#loc552)
      %do_ptrs_223 = arith.muli %step_m, %stride_dom : i32 loc(#loc552)
      %do_ptrs_224 = tt.splat %do_ptrs_223 : i32 -> tensor<64x64xi32> loc(#loc553)
      %do_ptrs_225 = tt.addptr %do_ptrs_92, %do_ptrs_224 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc553)
      scf.yield %dk_194, %dv_158, %offs_m_106, %qT_ptrs_214, %do_ptrs_225, %curr_m_203 : tensor<128x64xf32>, tensor<128x64xf32>, tensor<64xi32>, tensor<64x64x!tt.ptr<bf16>>, tensor<64x64x!tt.ptr<bf16>>, i32 loc(#loc222)
    } {tt.loop_unroll_factor = 1 : i32} loc(#loc645)
    tt.return %curr_m#0, %curr_m#1 : tensor<128x64xf32>, tensor<128x64xf32> loc(#loc223)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x64xf32> loc(#loc224)
    %5 = ub.poison : tensor<128x64xf32> loc(#loc224)
    tt.return %4, %5 : tensor<128x64xf32>, tensor<128x64xf32> loc(#loc224)
  } loc(#loc151)
  tt.func private @tritonbench.operators.gdpa.math.tanh_approx_fp32__fp32S128_64S__(%x: tensor<128x64xf32> loc("x"(#loc225))) -> tensor<128x64xf32> attributes {noinline = false} {
    %0 = tt.call @tritonbench.operators.gdpa.math.tanh__fp32S128_64S__(%x) : (tensor<128x64xf32>) -> tensor<128x64xf32> loc(#loc226)
    tt.return %0 : tensor<128x64xf32> loc(#loc227)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<128x64xf32> loc(#loc228)
    tt.return %1 : tensor<128x64xf32> loc(#loc228)
  } loc(#loc225)
  tt.func private @tritonbench.operators.gdpa.math.tanh__fp32S128_64S__(%x: tensor<128x64xf32> loc("x"(#loc229))) -> tensor<128x64xf32> attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc230)
    %cst = arith.constant 2.000000e+00 : f32 loc(#loc230)
    %cst_0 = arith.constant dense<2.000000e+00> : tensor<128x64xf32> loc(#loc230)
    %0 = arith.mulf %cst_0, %x : tensor<128x64xf32> loc(#loc230)
    %1 = tt.call @triton.language.standard.sigmoid__fp32S128_64S__(%0) : (tensor<128x64xf32>) -> tensor<128x64xf32> loc(#loc231)
    %c2_i32_1 = arith.constant 2 : i32 loc(#loc232)
    %cst_2 = arith.constant 2.000000e+00 : f32 loc(#loc232)
    %cst_3 = arith.constant dense<2.000000e+00> : tensor<128x64xf32> loc(#loc232)
    %2 = arith.mulf %cst_3, %1 : tensor<128x64xf32> loc(#loc232)
    %c1_i32 = arith.constant 1 : i32 loc(#loc233)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc233)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc233)
    %3 = arith.subf %2, %cst_5 : tensor<128x64xf32> loc(#loc233)
    tt.return %3 : tensor<128x64xf32> loc(#loc234)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x64xf32> loc(#loc235)
    tt.return %4 : tensor<128x64xf32> loc(#loc235)
  } loc(#loc229)
  tt.func private @triton.language.standard.sigmoid__fp32S128_64S__(%x: tensor<128x64xf32> loc("x"(#loc236))) -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc237)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc237)
    %0 = arith.subf %cst_0, %x : tensor<128x64xf32> loc(#loc237)
    %1 = math.exp %0 : tensor<128x64xf32> loc(#loc238)
    %c1_i32 = arith.constant 1 : i32 loc(#loc239)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc239)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc239)
    %2 = arith.addf %cst_2, %1 : tensor<128x64xf32> loc(#loc239)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc240)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc240)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc240)
    %3 = arith.divf %cst_5, %2 : tensor<128x64xf32> loc(#loc240)
    tt.return %3 : tensor<128x64xf32> loc(#loc241)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x64xf32> loc(#loc242)
    tt.return %4 : tensor<128x64xf32> loc(#loc242)
  } loc(#loc236)
  tt.func private @"tritonbench.operators.gdpa.gdpa._gdpa_bwd_dq__fp32S128_64S_bf16S128_64S_Pbf16_Pbf16_bf16S128_64S_i32_i32_i32_i32_fp32_i32_i32_i32_i32_i32_i32_i32S64S_i32__(4,)cconstexpr_None__(5,)cconstexpr_None__(8,)cconstexpr_1__(13,)cconstexpr_128__(14,)cconstexpr_64__(15,)cconstexpr_64__(16,)cconstexpr_64__(25,)cconstexpr_False__(26,)cconstexpr_None__(27,)cconstexpr_False__(28,)cconstexpr_1__(29,)cconstexpr_2_"(%dq: tensor<128x64xf32> loc("dq"(#loc243)), %q: tensor<128x64xbf16> loc("q"(#loc243)), %K: !tt.ptr<bf16> loc("K"(#loc243)), %V: !tt.ptr<bf16> loc("V"(#loc243)), %do: tensor<128x64xbf16> loc("do"(#loc243)), %stride_km: i32 loc("stride_km"(#loc243)), %stride_kh: i32 loc("stride_kh"(#loc243)), %H: i32 loc("H"(#loc243)), %N_CTX: i32 loc("N_CTX"(#loc243)), %qk_scale: f32 loc("qk_scale"(#loc243)), %start_m: i32 loc("start_m"(#loc243)), %start_n: i32 loc("start_n"(#loc243)), %qlen: i32 loc("qlen"(#loc243)), %klen: i32 loc("klen"(#loc243)), %num_steps: i32 loc("num_steps"(#loc243)), %begin_k: i32 loc("begin_k"(#loc243)), %offs_k: tensor<64xi32> loc("offs_k"(#loc243)), %off_h_kv: i32 loc("off_h_kv"(#loc243))) -> tensor<128x64xf32> attributes {noinline = false} {
    %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc575)
    %offs_m_0 = tt.splat %start_m : i32 -> tensor<128xi32> loc(#loc576)
    %offs_m_1 = arith.extsi %offs_m_0 : tensor<128xi32> to tensor<128xi64> loc(#loc576)
    %offs_m_2 = arith.extsi %offs_m : tensor<128xi32> to tensor<128xi64> loc(#loc576)
    %offs_m_3 = arith.addi %offs_m_1, %offs_m_2 : tensor<128xi64> loc(#loc576)
    %offs_m_4 = arith.constant 2147483647 : i64 loc(#loc576)
    %offs_m_5 = arith.constant -2147483648 : i64 loc(#loc576)
    %offs_m_6 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc576)
    %offs_m_7 = arith.cmpi sle, %offs_m_3, %offs_m_6 : tensor<128xi64> loc(#loc576)
    %offs_m_8 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc576)
    %offs_m_9 = arith.cmpi sge, %offs_m_3, %offs_m_8 : tensor<128xi64> loc(#loc576)
    %offs_m_10 = arith.andi %offs_m_7, %offs_m_9 : tensor<128xi1> loc(#loc576)
    %offs_m_11 = arith.addi %offs_m_0, %offs_m : tensor<128xi32> loc(#loc576)
    %offs_n = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc577)
    %offs_n_12 = tt.splat %start_n : i32 -> tensor<64xi32> loc(#loc578)
    %offs_n_13 = arith.extsi %offs_n_12 : tensor<64xi32> to tensor<64xi64> loc(#loc578)
    %offs_n_14 = arith.extsi %offs_n : tensor<64xi32> to tensor<64xi64> loc(#loc578)
    %offs_n_15 = arith.addi %offs_n_13, %offs_n_14 : tensor<64xi64> loc(#loc578)
    %offs_n_16 = arith.constant 2147483647 : i64 loc(#loc578)
    %offs_n_17 = arith.constant -2147483648 : i64 loc(#loc578)
    %offs_n_18 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc578)
    %offs_n_19 = arith.cmpi sle, %offs_n_15, %offs_n_18 : tensor<64xi64> loc(#loc578)
    %offs_n_20 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc578)
    %offs_n_21 = arith.cmpi sge, %offs_n_15, %offs_n_20 : tensor<64xi64> loc(#loc578)
    %offs_n_22 = arith.andi %offs_n_19, %offs_n_21 : tensor<64xi1> loc(#loc578)
    %offs_n_23 = arith.addi %offs_n_12, %offs_n : tensor<64xi32> loc(#loc578)
    %kT_ptrs = tt.expand_dims %offs_n_23 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc579)
    %kT_ptrs_24 = tt.splat %stride_km : i32 -> tensor<1x64xi32> loc(#loc580)
    %kT_ptrs_25 = arith.extsi %kT_ptrs : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_26 = arith.extsi %kT_ptrs_24 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_27 = arith.muli %kT_ptrs_25, %kT_ptrs_26 : tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_28 = arith.constant 2147483647 : i64 loc(#loc580)
    %kT_ptrs_29 = arith.constant -2147483648 : i64 loc(#loc580)
    %kT_ptrs_30 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_31 = arith.cmpi sle, %kT_ptrs_27, %kT_ptrs_30 : tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_33 = arith.cmpi sge, %kT_ptrs_27, %kT_ptrs_32 : tensor<1x64xi64> loc(#loc580)
    %kT_ptrs_34 = arith.andi %kT_ptrs_31, %kT_ptrs_33 : tensor<1x64xi1> loc(#loc580)
    %kT_ptrs_35 = arith.muli %kT_ptrs, %kT_ptrs_24 : tensor<1x64xi32> loc(#loc580)
    %kT_ptrs_36 = tt.splat %K : !tt.ptr<bf16> -> tensor<1x64x!tt.ptr<bf16>> loc(#loc581)
    %kT_ptrs_37 = tt.addptr %kT_ptrs_36, %kT_ptrs_35 : tensor<1x64x!tt.ptr<bf16>>, tensor<1x64xi32> loc(#loc581)
    %kT_ptrs_38 = tt.expand_dims %offs_k {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc582)
    %kT_ptrs_39 = arith.constant 1 : i32 loc(#loc583)
    %kT_ptrs_40 = arith.constant 1 : i32 loc(#loc583)
    %kT_ptrs_41 = arith.constant dense<1> : tensor<64x1xi32> loc(#loc583)
    %kT_ptrs_42 = arith.extsi %kT_ptrs_38 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_43 = arith.extsi %kT_ptrs_41 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_44 = arith.muli %kT_ptrs_42, %kT_ptrs_43 : tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_45 = arith.constant 2147483647 : i64 loc(#loc583)
    %kT_ptrs_46 = arith.constant -2147483648 : i64 loc(#loc583)
    %kT_ptrs_47 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_48 = arith.cmpi sle, %kT_ptrs_44, %kT_ptrs_47 : tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_49 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_50 = arith.cmpi sge, %kT_ptrs_44, %kT_ptrs_49 : tensor<64x1xi64> loc(#loc583)
    %kT_ptrs_51 = arith.andi %kT_ptrs_48, %kT_ptrs_50 : tensor<64x1xi1> loc(#loc583)
    %kT_ptrs_52 = arith.muli %kT_ptrs_38, %kT_ptrs_41 : tensor<64x1xi32> loc(#loc583)
    %kT_ptrs_53 = tt.broadcast %kT_ptrs_37 : tensor<1x64x!tt.ptr<bf16>> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc584)
    %kT_ptrs_54 = tt.broadcast %kT_ptrs_52 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc584)
    %kT_ptrs_55 = tt.addptr %kT_ptrs_53, %kT_ptrs_54 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc584)
    %vT_ptrs = tt.expand_dims %offs_n_23 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc585)
    %vT_ptrs_56 = tt.splat %stride_km : i32 -> tensor<1x64xi32> loc(#loc586)
    %vT_ptrs_57 = arith.extsi %vT_ptrs : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_58 = arith.extsi %vT_ptrs_56 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_59 = arith.muli %vT_ptrs_57, %vT_ptrs_58 : tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_60 = arith.constant 2147483647 : i64 loc(#loc586)
    %vT_ptrs_61 = arith.constant -2147483648 : i64 loc(#loc586)
    %vT_ptrs_62 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_63 = arith.cmpi sle, %vT_ptrs_59, %vT_ptrs_62 : tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_64 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_65 = arith.cmpi sge, %vT_ptrs_59, %vT_ptrs_64 : tensor<1x64xi64> loc(#loc586)
    %vT_ptrs_66 = arith.andi %vT_ptrs_63, %vT_ptrs_65 : tensor<1x64xi1> loc(#loc586)
    %vT_ptrs_67 = arith.muli %vT_ptrs, %vT_ptrs_56 : tensor<1x64xi32> loc(#loc586)
    %vT_ptrs_68 = tt.splat %V : !tt.ptr<bf16> -> tensor<1x64x!tt.ptr<bf16>> loc(#loc587)
    %vT_ptrs_69 = tt.addptr %vT_ptrs_68, %vT_ptrs_67 : tensor<1x64x!tt.ptr<bf16>>, tensor<1x64xi32> loc(#loc587)
    %vT_ptrs_70 = tt.expand_dims %offs_k {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc588)
    %vT_ptrs_71 = arith.constant 1 : i32 loc(#loc589)
    %vT_ptrs_72 = arith.constant 1 : i32 loc(#loc589)
    %vT_ptrs_73 = arith.constant dense<1> : tensor<64x1xi32> loc(#loc589)
    %vT_ptrs_74 = arith.extsi %vT_ptrs_70 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_75 = arith.extsi %vT_ptrs_73 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_76 = arith.muli %vT_ptrs_74, %vT_ptrs_75 : tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_77 = arith.constant 2147483647 : i64 loc(#loc589)
    %vT_ptrs_78 = arith.constant -2147483648 : i64 loc(#loc589)
    %vT_ptrs_79 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_80 = arith.cmpi sle, %vT_ptrs_76, %vT_ptrs_79 : tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_81 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_82 = arith.cmpi sge, %vT_ptrs_76, %vT_ptrs_81 : tensor<64x1xi64> loc(#loc589)
    %vT_ptrs_83 = arith.andi %vT_ptrs_80, %vT_ptrs_82 : tensor<64x1xi1> loc(#loc589)
    %vT_ptrs_84 = arith.muli %vT_ptrs_70, %vT_ptrs_73 : tensor<64x1xi32> loc(#loc589)
    %vT_ptrs_85 = tt.broadcast %vT_ptrs_69 : tensor<1x64x!tt.ptr<bf16>> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc590)
    %vT_ptrs_86 = tt.broadcast %vT_ptrs_84 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc590)
    %vT_ptrs_87 = tt.addptr %vT_ptrs_85, %vT_ptrs_86 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc590)
    %step_n = arith.constant 64 : i32 loc(#loc591)
    %c0_i32 = arith.constant 0 : i32 loc(#loc261)
    %c1_i32 = arith.constant 1 : i32 loc(#loc261)
    %0 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc261)
    %1 = arith.bitcast %num_steps : i32 to i32 loc(#loc261)
    %2 = arith.bitcast %c1_i32 : i32 to i32 loc(#loc261)
    %3 = ub.poison : i32 loc(#loc261)
    %curr_n:5 = scf.for %_blk_idx = %0 to %1 step %2 iter_args(%dq_88 = %dq, %offs_n_89 = %offs_n_23, %kT_ptrs_90 = %kT_ptrs_55, %vT_ptrs_91 = %vT_ptrs_87, %curr_n_92 = %start_n) -> (tensor<128x64xf32>, tensor<64xi32>, tensor<64x64x!tt.ptr<bf16>>, tensor<64x64x!tt.ptr<bf16>>, i32)  : i32 {
      %offs_n_93 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc593)
      %offs_n_94 = tt.splat %curr_n_92 : i32 -> tensor<64xi32> loc(#loc594)
      %offs_n_95 = arith.extsi %offs_n_94 : tensor<64xi32> to tensor<64xi64> loc(#loc594)
      %offs_n_96 = arith.extsi %offs_n_93 : tensor<64xi32> to tensor<64xi64> loc(#loc594)
      %offs_n_97 = arith.addi %offs_n_95, %offs_n_96 : tensor<64xi64> loc(#loc594)
      %offs_n_98 = arith.constant 2147483647 : i64 loc(#loc594)
      %offs_n_99 = arith.constant -2147483648 : i64 loc(#loc594)
      %offs_n_100 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc594)
      %offs_n_101 = arith.cmpi sle, %offs_n_97, %offs_n_100 : tensor<64xi64> loc(#loc594)
      %offs_n_102 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc594)
      %offs_n_103 = arith.cmpi sge, %offs_n_97, %offs_n_102 : tensor<64xi64> loc(#loc594)
      %offs_n_104 = arith.andi %offs_n_101, %offs_n_103 : tensor<64xi1> loc(#loc594)
      %offs_n_105 = arith.addi %offs_n_94, %offs_n_93 : tensor<64xi32> loc(#loc594)
      %kmask = tt.expand_dims %offs_k {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc595)
      %kmask_106 = arith.constant 64 : i32 loc(#loc596)
      %kmask_107 = arith.constant dense<64> : tensor<64x1xi32> loc(#loc596)
      %kmask_108 = arith.cmpi slt, %kmask, %kmask_107 : tensor<64x1xi32> loc(#loc596)
      %kmask_109 = tt.expand_dims %offs_n_105 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc597)
      %kmask_110 = tt.splat %klen : i32 -> tensor<1x64xi32> loc(#loc598)
      %kmask_111 = arith.cmpi slt, %kmask_109, %kmask_110 : tensor<1x64xi32> loc(#loc598)
      %kmask_112 = tt.broadcast %kmask_108 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc599)
      %kmask_113 = tt.broadcast %kmask_111 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc599)
      %kmask_114 = arith.andi %kmask_112, %kmask_113 : tensor<64x64xi1> loc(#loc599)
      %kT = tt.load %kT_ptrs_90, %kmask_114 : tensor<64x64x!tt.ptr<bf16>> loc(#loc600)
      %vT = tt.load %vT_ptrs_91, %kmask_114 : tensor<64x64x!tt.ptr<bf16>> loc(#loc601)
      %qk = arith.constant 0.000000e+00 : f32 loc(#loc602)
      %qk_115 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc602)
      %qk_116 = tt.dot %q, %kT, %qk_115 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc602)
      %p = tt.call @tritonbench.operators.gdpa.math.fast_gelu_grad__fp32S128_64S__(%qk_116) : (tensor<128x64xf32>) -> tensor<128x64xf32> loc(#loc603)
      %p_117 = tt.splat %qk_scale : f32 -> tensor<128x64xf32> loc(#loc604)
      %p_118 = arith.mulf %p, %p_117 : tensor<128x64xf32> loc(#loc604)
      %dp = arith.constant 0.000000e+00 : f32 loc(#loc605)
      %dp_119 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc605)
      %dp_120 = tt.dot %do, %vT, %dp_119 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc605)
      %ds = arith.mulf %p_118, %dp_120 : tensor<128x64xf32> loc(#loc606)
      %ds_121 = arith.truncf %ds : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc607)
      %dq_122 = tt.trans %kT {order = array<i32: 1, 0>} : tensor<64x64xbf16> -> tensor<64x64xbf16> loc(#loc608)
      %dq_123 = arith.constant 0.000000e+00 : f32 loc(#loc609)
      %dq_124 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc609)
      %dq_125 = tt.dot %ds_121, %dq_122, %dq_124 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc609)
      %dq_126 = arith.addf %dq_88, %dq_125 : tensor<128x64xf32> loc(#loc610)
      %curr_n_127 = arith.extsi %curr_n_92 : i32 to i64 loc(#loc611)
      %curr_n_128 = arith.extsi %step_n : i32 to i64 loc(#loc611)
      %curr_n_129 = arith.addi %curr_n_127, %curr_n_128 : i64 loc(#loc611)
      %curr_n_130 = arith.constant 2147483647 : i64 loc(#loc611)
      %curr_n_131 = arith.constant -2147483648 : i64 loc(#loc611)
      %curr_n_132 = arith.cmpi sle, %curr_n_129, %curr_n_130 : i64 loc(#loc611)
      %curr_n_133 = arith.cmpi sge, %curr_n_129, %curr_n_131 : i64 loc(#loc611)
      %curr_n_134 = arith.andi %curr_n_132, %curr_n_133 : i1 loc(#loc611)
      %curr_n_135 = arith.addi %curr_n_92, %step_n : i32 loc(#loc611)
      %kT_ptrs_136 = arith.extsi %step_n : i32 to i64 loc(#loc612)
      %kT_ptrs_137 = arith.extsi %stride_km : i32 to i64 loc(#loc612)
      %kT_ptrs_138 = arith.muli %kT_ptrs_136, %kT_ptrs_137 : i64 loc(#loc612)
      %kT_ptrs_139 = arith.constant 2147483647 : i64 loc(#loc612)
      %kT_ptrs_140 = arith.constant -2147483648 : i64 loc(#loc612)
      %kT_ptrs_141 = arith.cmpi sle, %kT_ptrs_138, %kT_ptrs_139 : i64 loc(#loc612)
      %kT_ptrs_142 = arith.cmpi sge, %kT_ptrs_138, %kT_ptrs_140 : i64 loc(#loc612)
      %kT_ptrs_143 = arith.andi %kT_ptrs_141, %kT_ptrs_142 : i1 loc(#loc612)
      %kT_ptrs_144 = arith.muli %step_n, %stride_km : i32 loc(#loc612)
      %kT_ptrs_145 = tt.splat %kT_ptrs_144 : i32 -> tensor<64x64xi32> loc(#loc613)
      %kT_ptrs_146 = tt.addptr %kT_ptrs_90, %kT_ptrs_145 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc613)
      %vT_ptrs_147 = arith.extsi %step_n : i32 to i64 loc(#loc614)
      %vT_ptrs_148 = arith.extsi %stride_km : i32 to i64 loc(#loc614)
      %vT_ptrs_149 = arith.muli %vT_ptrs_147, %vT_ptrs_148 : i64 loc(#loc614)
      %vT_ptrs_150 = arith.constant 2147483647 : i64 loc(#loc614)
      %vT_ptrs_151 = arith.constant -2147483648 : i64 loc(#loc614)
      %vT_ptrs_152 = arith.cmpi sle, %vT_ptrs_149, %vT_ptrs_150 : i64 loc(#loc614)
      %vT_ptrs_153 = arith.cmpi sge, %vT_ptrs_149, %vT_ptrs_151 : i64 loc(#loc614)
      %vT_ptrs_154 = arith.andi %vT_ptrs_152, %vT_ptrs_153 : i1 loc(#loc614)
      %vT_ptrs_155 = arith.muli %step_n, %stride_km : i32 loc(#loc614)
      %vT_ptrs_156 = tt.splat %vT_ptrs_155 : i32 -> tensor<64x64xi32> loc(#loc615)
      %vT_ptrs_157 = tt.addptr %vT_ptrs_91, %vT_ptrs_156 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc615)
      scf.yield %dq_126, %offs_n_105, %kT_ptrs_146, %vT_ptrs_157, %curr_n_135 : tensor<128x64xf32>, tensor<64xi32>, tensor<64x64x!tt.ptr<bf16>>, tensor<64x64x!tt.ptr<bf16>>, i32 loc(#loc285)
    } {tt.loop_unroll_factor = 1 : i32} loc(#loc644)
    tt.return %curr_n#0 : tensor<128x64xf32> loc(#loc286)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x64xf32> loc(#loc287)
    tt.return %4 : tensor<128x64xf32> loc(#loc287)
  } loc(#loc243)
  tt.func private @tritonbench.operators.gdpa.math.fast_gelu_grad__fp32S128_64S__(%x: tensor<128x64xf32> loc("x"(#loc288))) -> tensor<128x64xf32> attributes {noinline = false} {
    %tanh_out = arith.constant 0.797884583 : f32 loc(#loc617)
    %tanh_out_0 = arith.constant 0.797884583 : f32 loc(#loc617)
    %tanh_out_1 = arith.constant dense<0.797884583> : tensor<128x64xf32> loc(#loc617)
    %tanh_out_2 = arith.mulf %tanh_out_1, %x : tensor<128x64xf32> loc(#loc617)
    %tanh_out_3 = arith.constant 4.471500e-02 : f32 loc(#loc618)
    %tanh_out_4 = arith.constant 4.471500e-02 : f32 loc(#loc618)
    %tanh_out_5 = arith.constant dense<4.471500e-02> : tensor<128x64xf32> loc(#loc618)
    %tanh_out_6 = arith.mulf %tanh_out_5, %x : tensor<128x64xf32> loc(#loc618)
    %tanh_out_7 = arith.mulf %tanh_out_6, %x : tensor<128x64xf32> loc(#loc619)
    %tanh_out_8 = arith.constant 1.000000e+00 : f32 loc(#loc620)
    %tanh_out_9 = arith.constant 1.000000e+00 : f32 loc(#loc620)
    %tanh_out_10 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc620)
    %tanh_out_11 = arith.addf %tanh_out_10, %tanh_out_7 : tensor<128x64xf32> loc(#loc620)
    %tanh_out_12 = arith.mulf %tanh_out_2, %tanh_out_11 : tensor<128x64xf32> loc(#loc621)
    %tanh_out_13 = tt.call @tritonbench.operators.gdpa.math.tanh_approx_fp32__fp32S128_64S__(%tanh_out_12) : (tensor<128x64xf32>) -> tensor<128x64xf32> loc(#loc622)
    %cst = arith.constant 5.000000e-01 : f32 loc(#loc295)
    %cst_14 = arith.constant 5.000000e-01 : f32 loc(#loc295)
    %cst_15 = arith.constant dense<5.000000e-01> : tensor<128x64xf32> loc(#loc295)
    %0 = arith.mulf %cst_15, %x : tensor<128x64xf32> loc(#loc295)
    %1 = arith.mulf %tanh_out_13, %tanh_out_13 : tensor<128x64xf32> loc(#loc296)
    %c1_i32 = arith.constant 1 : i32 loc(#loc297)
    %cst_16 = arith.constant 1.000000e+00 : f32 loc(#loc297)
    %cst_17 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc297)
    %2 = arith.subf %cst_17, %1 : tensor<128x64xf32> loc(#loc297)
    %cst_18 = arith.constant 0.107032225 : f32 loc(#loc298)
    %cst_19 = arith.constant 0.107032225 : f32 loc(#loc298)
    %cst_20 = arith.constant dense<0.107032225> : tensor<128x64xf32> loc(#loc298)
    %3 = arith.mulf %cst_20, %x : tensor<128x64xf32> loc(#loc298)
    %4 = arith.mulf %3, %x : tensor<128x64xf32> loc(#loc299)
    %cst_21 = arith.constant 0.797884583 : f32 loc(#loc300)
    %cst_22 = arith.constant 0.797884583 : f32 loc(#loc300)
    %cst_23 = arith.constant dense<0.797884583> : tensor<128x64xf32> loc(#loc300)
    %5 = arith.addf %cst_23, %4 : tensor<128x64xf32> loc(#loc300)
    %6 = arith.mulf %2, %5 : tensor<128x64xf32> loc(#loc301)
    %7 = arith.mulf %0, %6 : tensor<128x64xf32> loc(#loc302)
    %c1_i32_24 = arith.constant 1 : i32 loc(#loc303)
    %cst_25 = arith.constant 1.000000e+00 : f32 loc(#loc303)
    %cst_26 = arith.constant dense<1.000000e+00> : tensor<128x64xf32> loc(#loc303)
    %8 = arith.addf %cst_26, %tanh_out_13 : tensor<128x64xf32> loc(#loc303)
    %cst_27 = arith.constant 5.000000e-01 : f32 loc(#loc304)
    %cst_28 = arith.constant 5.000000e-01 : f32 loc(#loc304)
    %cst_29 = arith.constant dense<5.000000e-01> : tensor<128x64xf32> loc(#loc304)
    %9 = arith.mulf %cst_29, %8 : tensor<128x64xf32> loc(#loc304)
    %10 = arith.addf %7, %9 : tensor<128x64xf32> loc(#loc305)
    tt.return %10 : tensor<128x64xf32> loc(#loc306)
  ^bb1:  // no predecessors
    %11 = ub.poison : tensor<128x64xf32> loc(#loc307)
    tt.return %11 : tensor<128x64xf32> loc(#loc307)
  } loc(#loc288)
} loc(#loc)
#loc1 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1564:27)
#loc2 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1564:14)
#loc3 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1565:27)
#loc4 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1565:14)
#loc5 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1566:27)
#loc6 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1566:14)
#loc7 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1567:27)
#loc8 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1567:14)
#loc9 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1568:14)
#loc10 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1569:28)
#loc11 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1569:14)
#loc12 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1570:28)
#loc13 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1570:14)
#loc14 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1575:30)
#loc15 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1583:30)
#loc16 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1584:24)
#loc17 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1585:24)
#loc18 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1586:23)
#loc19 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1641:8)
#loc20 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1594:4)
#loc22 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1158:34)
#loc23 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1158:22)
#loc24 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1159:32)
#loc25 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1159:42)
#loc26 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1159:20)
#loc27 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1161:19)
#loc28 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1173:38)
#loc29 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1173:26)
#loc30 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1174:36)
#loc31 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1174:44)
#loc32 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1174:24)
#loc33 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1176:23)
#loc34 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1182:20)
#loc35 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1184:20)
#loc36 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1186:26)
#loc37 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1287:18)
#loc38 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1287:37)
#loc39 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1287:26)
#loc40 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1287:7)
#loc41 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1288:40)
#loc42 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1288:26)
#loc43 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1290:26)
#loc44 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:24)
#loc45 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:46)
#loc46 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1291:36)
#loc47 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1292:26)
#loc48 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1292:48)
#loc49 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1292:38)
#loc50 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1293:25)
#loc51 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1293:48)
#loc52 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1293:38)
#loc53 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1296:13)
#loc54 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1297:13)
#loc55 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1298:13)
#loc56 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1299:14)
#loc57 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1300:14)
#loc58 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1301:14)
#loc59 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1302:14)
#loc60 = loc(unknown)
#loc61 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1305:17)
#loc62 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1305:7)
#loc63 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1306:40)
#loc64 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1306:27)
#loc65 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1307:24)
#loc66 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1307:35)
#loc67 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1307:55)
#loc68 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1307:66)
#loc69 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1307:48)
#loc70 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1309:22)
#loc71 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1310:22)
#loc72 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:27)
#loc73 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:38)
#loc74 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:20)
#loc75 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:57)
#loc76 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:68)
#loc77 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:50)
#loc78 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1330:16)
#loc79 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:27)
#loc80 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:38)
#loc81 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:20)
#loc82 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:57)
#loc83 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:68)
#loc84 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:50)
#loc85 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1334:16)
#loc86 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1338:24)
#loc87 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1339:36)
#loc88 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1339:52)
#loc89 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1380:21)
#loc90 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1380:12)
#loc91 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:30)
#loc92 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:41)
#loc93 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:23)
#loc94 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:60)
#loc95 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:71)
#loc96 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1391:53)
#loc97 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1404:34)
#loc98 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:30)
#loc99 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:41)
#loc100 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:23)
#loc101 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:60)
#loc102 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:71)
#loc103 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1407:53)
#loc104 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1420:34)
#loc105 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1425:21)
#loc106 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1425:11)
#loc107 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1427:44)
#loc108 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1427:31)
#loc109 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1428:30)
#loc110 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:28)
#loc111 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:39)
#loc112 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:59)
#loc113 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:70)
#loc114 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1429:52)
#loc115 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:31)
#loc116 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:42)
#loc117 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:24)
#loc118 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:61)
#loc119 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:72)
#loc120 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:54)
#loc121 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1446:20)
#loc122 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:32)
#loc123 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:43)
#loc124 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:25)
#loc125 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:63)
#loc126 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:74)
#loc127 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:56)
#loc128 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1450:20)
#loc129 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1453:26)
#loc130 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1455:28)
#loc131 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1456:39)
#loc132 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1492:16)
#loc133 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:34)
#loc134 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:45)
#loc135 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:27)
#loc136 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:64)
#loc137 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:75)
#loc138 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1501:57)
#loc139 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1516:38)
#loc140 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1424:4)
#loc141 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":118:0)
#loc142 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:31)
#loc143 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:11)
#loc144 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:4)
#loc146 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:16)
#loc147 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:22)
#loc148 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:28)
#loc149 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:11)
#loc150 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":41:4)
#loc152 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":767:36)
#loc153 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":767:23)
#loc154 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":768:36)
#loc155 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":768:23)
#loc156 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:29)
#loc157 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:40)
#loc158 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:22)
#loc159 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:59)
#loc160 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:70)
#loc161 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":778:52)
#loc162 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:30)
#loc163 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:41)
#loc164 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:23)
#loc165 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:61)
#loc166 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:72)
#loc167 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":779:54)
#loc168 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":786:13)
#loc169 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":787:46)
#loc170 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:39)
#loc171 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":788:26)
#loc172 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":789:24)
#loc173 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":789:35)
#loc174 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":789:55)
#loc175 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":789:66)
#loc176 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":789:48)
#loc177 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":802:25)
#loc178 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":805:24)
#loc179 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":808:24)
#loc180 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":808:35)
#loc181 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":808:51)
#loc182 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":808:62)
#loc183 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":808:44)
#loc184 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":818:25)
#loc185 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":820:33)
#loc186 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":820:24)
#loc187 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:55)
#loc188 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:76)
#loc189 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:81)
#loc190 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:65)
#loc191 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:61)
#loc192 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":836:40)
#loc193 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":837:24)
#loc194 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":837:34)
#loc195 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":837:30)
#loc196 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":841:15)
#loc197 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":842:21)
#loc198 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":843:26)
#loc199 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":843:14)
#loc200 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":854:18)
#loc201 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:34)
#loc202 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:23)
#loc203 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":855:19)
#loc204 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:49)
#loc205 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:54)
#loc206 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:34)
#loc207 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":856:19)
#loc208 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":857:27)
#loc209 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":857:23)
#loc210 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":857:16)
#loc211 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":860:14)
#loc212 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":870:19)
#loc213 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":871:21)
#loc214 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":872:35)
#loc215 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":872:26)
#loc216 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":872:14)
#loc217 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":891:18)
#loc218 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":893:32)
#loc219 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":893:23)
#loc220 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":894:32)
#loc221 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":894:23)
#loc222 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":896:8)
#loc223 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":899:11)
#loc224 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":899:4)
#loc226 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:16)
#loc227 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:11)
#loc228 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:4)
#loc230 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:30)
#loc231 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:26)
#loc232 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:15)
#loc233 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:35)
#loc234 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:11)
#loc235 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:4)
#loc237 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:30)
#loc238 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:29)
#loc239 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:20)
#loc240 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:16)
#loc241 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:11)
#loc242 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:4)
#loc244 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":939:36)
#loc245 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":939:23)
#loc246 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":940:36)
#loc247 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":940:23)
#loc248 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:29)
#loc249 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:40)
#loc250 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:22)
#loc251 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:59)
#loc252 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:70)
#loc253 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":944:52)
#loc254 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:29)
#loc255 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:40)
#loc256 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:22)
#loc257 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:59)
#loc258 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:70)
#loc259 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":945:52)
#loc260 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":950:13)
#loc261 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":951:46)
#loc262 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:39)
#loc263 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":952:26)
#loc264 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":953:24)
#loc265 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":953:35)
#loc266 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":953:55)
#loc267 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":953:66)
#loc268 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":953:48)
#loc269 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":972:25)
#loc270 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":973:25)
#loc271 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":975:23)
#loc272 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":982:31)
#loc273 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":985:13)
#loc274 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":997:24)
#loc275 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":998:17)
#loc276 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":999:19)
#loc277 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1002:34)
#loc278 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1002:25)
#loc279 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1002:14)
#loc280 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1004:18)
#loc281 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1006:32)
#loc282 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1006:23)
#loc283 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1007:32)
#loc284 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1007:23)
#loc285 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1005:8)
#loc286 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1008:11)
#loc287 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":1008:4)
#loc289 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:47)
#loc290 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:69)
#loc291 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:73)
#loc292 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:58)
#loc293 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:52)
#loc294 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":112:32)
#loc295 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":113:17)
#loc296 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:24)
#loc297 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:13)
#loc298 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:67)
#loc299 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:71)
#loc300 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:52)
#loc301 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:37)
#loc302 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":114:8)
#loc303 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:19)
#loc304 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:15)
#loc305 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":115:8)
#loc306 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":113:11)
#loc307 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":113:4)
#loc329 = loc("off_z"(#loc14))
#loc330 = loc("off_seq_h"(#loc15))
#loc331 = loc("off_h"(#loc16))
#loc332 = loc("off_h_kv"(#loc17))
#loc333 = loc("pid"(#loc18))
#loc358 = loc("begin_q"(#loc22))
#loc359 = loc("begin_q"(#loc23))
#loc360 = loc("end_q"(#loc24))
#loc361 = loc("end_q"(#loc25))
#loc362 = loc("end_q"(#loc26))
#loc363 = loc("qlen"(#loc27))
#loc364 = loc("begin_k"(#loc28))
#loc365 = loc("begin_k"(#loc29))
#loc366 = loc("end_k"(#loc30))
#loc367 = loc("end_k"(#loc31))
#loc368 = loc("end_k"(#loc32))
#loc369 = loc("klen"(#loc33))
#loc370 = loc("start_n"(#loc34))
#loc371 = loc("start_m"(#loc35))
#loc372 = loc("offs_k"(#loc36))
#loc373 = loc("begin_o"(#loc41))
#loc374 = loc("begin_o"(#loc42))
#loc375 = loc("off_h2"(#loc43))
#loc376 = loc("qadj"(#loc44))
#loc377 = loc("qadj"(#loc45))
#loc378 = loc("qadj"(#loc46))
#loc379 = loc("kadj"(#loc47))
#loc380 = loc("kadj"(#loc48))
#loc381 = loc("kadj"(#loc49))
#loc382 = loc("doadj"(#loc50))
#loc383 = loc("doadj"(#loc51))
#loc384 = loc("doadj"(#loc52))
#loc385 = loc("Q"(#loc53))
#loc386 = loc("K"(#loc54))
#loc387 = loc("V"(#loc55))
#loc388 = loc("DO"(#loc56))
#loc389 = loc("DQ"(#loc57))
#loc390 = loc("DK"(#loc58))
#loc391 = loc("DV"(#loc59))
#loc392 = loc("offs_n"(#loc63))
#loc393 = loc("offs_n"(#loc64))
#loc394 = loc("kmask"(#loc65))
#loc395 = loc("kmask"(#loc66))
#loc396 = loc("kmask"(#loc67))
#loc397 = loc("kmask"(#loc68))
#loc398 = loc("kmask"(#loc69))
#loc399 = loc("dv"(#loc70))
#loc400 = loc("dk"(#loc71))
#loc401 = loc("k"(#loc72))
#loc402 = loc("k"(#loc73))
#loc403 = loc("k"(#loc74))
#loc404 = loc("k"(#loc75))
#loc405 = loc("k"(#loc76))
#loc406 = loc("k"(#loc77))
#loc407 = loc("k"(#loc78))
#loc408 = loc("v"(#loc79))
#loc409 = loc("v"(#loc80))
#loc410 = loc("v"(#loc81))
#loc411 = loc("v"(#loc82))
#loc412 = loc("v"(#loc83))
#loc413 = loc("v"(#loc84))
#loc414 = loc("v"(#loc85))
#loc415 = loc("start_m_inner"(#loc86))
#loc416 = loc("num_steps"(#loc87))
#loc417 = loc("num_steps"(#loc88))
#loc418 = loc("dv_ptrs"(#loc91))
#loc419 = loc("dv_ptrs"(#loc92))
#loc420 = loc("dv_ptrs"(#loc93))
#loc421 = loc("dv_ptrs"(#loc94))
#loc422 = loc("dv_ptrs"(#loc95))
#loc423 = loc("dv_ptrs"(#loc96))
#loc424 = loc("dk_ptrs"(#loc98))
#loc425 = loc("dk_ptrs"(#loc99))
#loc426 = loc("dk_ptrs"(#loc100))
#loc427 = loc("dk_ptrs"(#loc101))
#loc428 = loc("dk_ptrs"(#loc102))
#loc429 = loc("dk_ptrs"(#loc103))
#loc430 = loc("offs_m"(#loc107))
#loc431 = loc("offs_m"(#loc108))
#loc432 = loc("off_h2"(#loc109))
#loc433 = loc("qmask"(#loc110))
#loc434 = loc("qmask"(#loc111))
#loc435 = loc("qmask"(#loc112))
#loc436 = loc("qmask"(#loc113))
#loc437 = loc("qmask"(#loc114))
#loc438 = loc("q"(#loc115))
#loc439 = loc("q"(#loc116))
#loc440 = loc("q"(#loc117))
#loc441 = loc("q"(#loc118))
#loc442 = loc("q"(#loc119))
#loc443 = loc("q"(#loc120))
#loc444 = loc("q"(#loc121))
#loc445 = loc("do"(#loc122))
#loc446 = loc("do"(#loc123))
#loc447 = loc("do"(#loc124))
#loc448 = loc("do"(#loc125))
#loc449 = loc("do"(#loc126))
#loc450 = loc("do"(#loc127))
#loc451 = loc("do"(#loc128))
#loc452 = loc("dq"(#loc129))
#loc453 = loc("start_n_inner"(#loc130))
#loc454 = loc("num_steps"(#loc131))
#loc455 = loc("dq"(#loc132))
#loc456 = loc("dq_ptrs"(#loc133))
#loc457 = loc("dq_ptrs"(#loc134))
#loc458 = loc("dq_ptrs"(#loc135))
#loc459 = loc("dq_ptrs"(#loc136))
#loc460 = loc("dq_ptrs"(#loc137))
#loc461 = loc("dq_ptrs"(#loc138))
#loc484 = loc("offs_m"(#loc152))
#loc485 = loc("offs_m"(#loc153))
#loc486 = loc("offs_n"(#loc154))
#loc487 = loc("offs_n"(#loc155))
#loc488 = loc("qT_ptrs"(#loc156))
#loc489 = loc("qT_ptrs"(#loc157))
#loc490 = loc("qT_ptrs"(#loc158))
#loc491 = loc("qT_ptrs"(#loc159))
#loc492 = loc("qT_ptrs"(#loc160))
#loc493 = loc("qT_ptrs"(#loc161))
#loc494 = loc("do_ptrs"(#loc162))
#loc495 = loc("do_ptrs"(#loc163))
#loc496 = loc("do_ptrs"(#loc164))
#loc497 = loc("do_ptrs"(#loc165))
#loc498 = loc("do_ptrs"(#loc166))
#loc499 = loc("do_ptrs"(#loc167))
#loc500 = loc("step_m"(#loc168))
#loc501 = loc("dk"(#loc169))
#loc502 = loc("offs_m"(#loc170))
#loc503 = loc("offs_m"(#loc171))
#loc504 = loc("qmask"(#loc172))
#loc505 = loc("qmask"(#loc173))
#loc506 = loc("qmask"(#loc174))
#loc507 = loc("qmask"(#loc175))
#loc508 = loc("qmask"(#loc176))
#loc509 = loc("qT"(#loc177))
#loc510 = loc("qkT"(#loc178))
#loc511 = loc("omask"(#loc179))
#loc512 = loc("omask"(#loc180))
#loc513 = loc("omask"(#loc181))
#loc514 = loc("omask"(#loc182))
#loc515 = loc("omask"(#loc183))
#loc516 = loc("do"(#loc184))
#loc517 = loc("dpT"(#loc185))
#loc518 = loc("dpT"(#loc186))
#loc519 = loc("tanh_out"(#loc187))
#loc520 = loc("tanh_out"(#loc188))
#loc521 = loc("tanh_out"(#loc189))
#loc522 = loc("tanh_out"(#loc190))
#loc523 = loc("tanh_out"(#loc191))
#loc524 = loc("tanh_out"(#loc192))
#loc525 = loc("ppT"(#loc193))
#loc526 = loc("ppT"(#loc194))
#loc527 = loc("ppT"(#loc195))
#loc528 = loc("ppT"(#loc196))
#loc529 = loc("ppT"(#loc197))
#loc530 = loc("dv"(#loc198))
#loc531 = loc("dv"(#loc199))
#loc532 = loc("pT"(#loc200))
#loc533 = loc("pT"(#loc201))
#loc534 = loc("pT"(#loc202))
#loc535 = loc("pT"(#loc203))
#loc536 = loc("pT"(#loc204))
#loc537 = loc("pT"(#loc205))
#loc538 = loc("pT"(#loc206))
#loc539 = loc("pT"(#loc207))
#loc540 = loc("pT"(#loc208))
#loc541 = loc("pT"(#loc209))
#loc542 = loc("pT"(#loc210))
#loc543 = loc("pT"(#loc211))
#loc544 = loc("dsT"(#loc212))
#loc545 = loc("dsT"(#loc213))
#loc546 = loc("dk"(#loc214))
#loc547 = loc("dk"(#loc215))
#loc548 = loc("dk"(#loc216))
#loc549 = loc("curr_m"(#loc217))
#loc550 = loc("qT_ptrs"(#loc218))
#loc551 = loc("qT_ptrs"(#loc219))
#loc552 = loc("do_ptrs"(#loc220))
#loc553 = loc("do_ptrs"(#loc221))
#loc575 = loc("offs_m"(#loc244))
#loc576 = loc("offs_m"(#loc245))
#loc577 = loc("offs_n"(#loc246))
#loc578 = loc("offs_n"(#loc247))
#loc579 = loc("kT_ptrs"(#loc248))
#loc580 = loc("kT_ptrs"(#loc249))
#loc581 = loc("kT_ptrs"(#loc250))
#loc582 = loc("kT_ptrs"(#loc251))
#loc583 = loc("kT_ptrs"(#loc252))
#loc584 = loc("kT_ptrs"(#loc253))
#loc585 = loc("vT_ptrs"(#loc254))
#loc586 = loc("vT_ptrs"(#loc255))
#loc587 = loc("vT_ptrs"(#loc256))
#loc588 = loc("vT_ptrs"(#loc257))
#loc589 = loc("vT_ptrs"(#loc258))
#loc590 = loc("vT_ptrs"(#loc259))
#loc591 = loc("step_n"(#loc260))
#loc592 = loc("dq"(#loc261))
#loc593 = loc("offs_n"(#loc262))
#loc594 = loc("offs_n"(#loc263))
#loc595 = loc("kmask"(#loc264))
#loc596 = loc("kmask"(#loc265))
#loc597 = loc("kmask"(#loc266))
#loc598 = loc("kmask"(#loc267))
#loc599 = loc("kmask"(#loc268))
#loc600 = loc("kT"(#loc269))
#loc601 = loc("vT"(#loc270))
#loc602 = loc("qk"(#loc271))
#loc603 = loc("p"(#loc272))
#loc604 = loc("p"(#loc273))
#loc605 = loc("dp"(#loc274))
#loc606 = loc("ds"(#loc275))
#loc607 = loc("ds"(#loc276))
#loc608 = loc("dq"(#loc277))
#loc609 = loc("dq"(#loc278))
#loc610 = loc("dq"(#loc279))
#loc611 = loc("curr_n"(#loc280))
#loc612 = loc("kT_ptrs"(#loc281))
#loc613 = loc("kT_ptrs"(#loc282))
#loc614 = loc("vT_ptrs"(#loc283))
#loc615 = loc("vT_ptrs"(#loc284))
#loc617 = loc("tanh_out"(#loc289))
#loc618 = loc("tanh_out"(#loc290))
#loc619 = loc("tanh_out"(#loc291))
#loc620 = loc("tanh_out"(#loc292))
#loc621 = loc("tanh_out"(#loc293))
#loc622 = loc("tanh_out"(#loc294))
#loc630 = loc("Q"(#loc385))
#loc631 = loc("K"(#loc386))
#loc632 = loc("V"(#loc387))
#loc633 = loc("DO"(#loc388))
#loc634 = loc("DQ"(#loc389))
#loc635 = loc("DK"(#loc390))
#loc636 = loc("DV"(#loc391))
#loc637 = loc("dv"(#loc501))
#loc638 = loc("offs_n"(#loc592))
#loc639 = loc("offs_m"(#loc637))
#loc640 = loc("kT_ptrs"(#loc638))
#loc641 = loc("qT_ptrs"(#loc639))
#loc642 = loc("vT_ptrs"(#loc640))
#loc643 = loc("do_ptrs"(#loc641))
#loc644 = loc("curr_n"(#loc642))
#loc645 = loc("curr_m"(#loc643))
