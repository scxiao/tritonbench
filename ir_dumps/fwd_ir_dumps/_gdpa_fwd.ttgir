#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16], [0, 32]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [64, 0]], block = []}>
#loc = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":458:0)
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [0, 1]}>
#shared2 = #ttg.swizzled_shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
#loc96 = loc("Q"(#loc))
#loc97 = loc("Q_offsets"(#loc))
#loc98 = loc("K"(#loc))
#loc99 = loc("K_offsets"(#loc))
#loc100 = loc("V"(#loc))
#loc101 = loc("Out"(#loc))
#loc102 = loc("Out_offsets"(#loc))
#loc103 = loc("ad_to_request_offset_ptr"(#loc))
#loc104 = loc("stride_qm"(#loc))
#loc105 = loc("stride_qh"(#loc))
#loc106 = loc("stride_kn"(#loc))
#loc107 = loc("stride_kh"(#loc))
#loc108 = loc("stride_vn"(#loc))
#loc109 = loc("stride_vh"(#loc))
#loc110 = loc("stride_om"(#loc))
#loc111 = loc("stride_oh"(#loc))
#loc112 = loc("Z"(#loc))
#loc113 = loc("H"(#loc))
#loc114 = loc("N_CTX"(#loc))
#loc115 = loc("N_CTX_KV"(#loc))
#loc116 = loc("qk_scale"(#loc))
#loc117 = loc("Q_SHAPE_0"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gdpa_fwd(%Q: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q"(#loc)), %Q_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q_offsets"(#loc)), %K: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K"(#loc)), %K_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K_offsets"(#loc)), %V: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("V"(#loc)), %Out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out"(#loc)), %Out_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out_offsets"(#loc)), %ad_to_request_offset_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("ad_to_request_offset_ptr"(#loc)), %stride_qm: i32 {tt.divisibility = 16 : i32} loc("stride_qm"(#loc)), %stride_qh: i32 {tt.divisibility = 16 : i32} loc("stride_qh"(#loc)), %stride_kn: i32 {tt.divisibility = 16 : i32} loc("stride_kn"(#loc)), %stride_kh: i32 {tt.divisibility = 16 : i32} loc("stride_kh"(#loc)), %stride_vn: i32 {tt.divisibility = 16 : i32} loc("stride_vn"(#loc)), %stride_vh: i32 {tt.divisibility = 16 : i32} loc("stride_vh"(#loc)), %stride_om: i32 {tt.divisibility = 16 : i32} loc("stride_om"(#loc)), %stride_oh: i32 {tt.divisibility = 16 : i32} loc("stride_oh"(#loc)), %Z: i32 {tt.divisibility = 16 : i32} loc("Z"(#loc)), %H: i32 loc("H"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc)), %N_CTX_KV: i32 {tt.divisibility = 16 : i32} loc("N_CTX_KV"(#loc)), %qk_scale: f32 loc("qk_scale"(#loc)), %Q_SHAPE_0: i32 loc("Q_SHAPE_0"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc118)
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<128x32xf32, #mma> loc(#loc118)
    %cst_1 = arith.constant dense<0.797884583> : tensor<128x32xf32, #mma> loc(#loc118)
    %cst_2 = arith.constant dense<4.471500e-02> : tensor<128x32xf32, #mma> loc(#loc118)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_4 = arith.constant dense<2.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc118)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc118)
    %c32_i64 = arith.constant 32 : i64 loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<32x1xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<0> : tensor<128x1xi64, #blocked> loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<1x64xi32, #linear> loc(#loc118)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    llvm.intr.assume %true : i1 loc(#loc12)
    llvm.intr.assume %true : i1 loc(#loc13)
    llvm.intr.assume %true : i1 loc(#loc14)
    %off_hz = tt.get_program_id y : i32 loc(#loc119)
    %off_z = arith.divsi %off_hz, %H : i32 loc(#loc120)
    %off_h = arith.remsi %off_hz, %H : i32 loc(#loc121)
    %pid = tt.get_program_id x : i32 loc(#loc122)
    %q_offset = arith.extsi %off_h : i32 to i64 loc(#loc181)
    %q_offset_14 = arith.extsi %stride_qh : i32 to i64 loc(#loc182)
    %q_offset_15 = arith.muli %q_offset, %q_offset_14 : i64 loc(#loc182)
    %kv_offset = arith.extsi %stride_kh : i32 to i64 loc(#loc183)
    %kv_offset_16 = arith.muli %q_offset, %kv_offset : i64 loc(#loc183)
    %begin_q = tt.addptr %Q_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc184)
    %begin_q_17 = tt.load %begin_q : !tt.ptr<i32> loc(#loc185)
    %end_q = tt.addptr %begin_q, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc186)
    %end_q_18 = tt.load %end_q : !tt.ptr<i32> loc(#loc187)
    %qlen = arith.subi %end_q_18, %begin_q_17 : i32 loc(#loc188)
    %qlen_19 = arith.minsi %qlen, %N_CTX : i32 loc(#loc189)
    %begin_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc190)
    %begin_k_20 = tt.load %begin_k : !tt.ptr<i32> loc(#loc191)
    %end_k = tt.addptr %begin_k, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc192)
    %end_k_21 = tt.load %end_k : !tt.ptr<i32> loc(#loc193)
    %klen = arith.subi %end_k_21, %begin_k_20 : i32 loc(#loc194)
    %0 = arith.muli %pid, %c128_i32 : i32 loc(#loc137)
    %1 = arith.cmpi slt, %0, %qlen_19 : i32 loc(#loc138)
    scf.if %1 {
      %begin_o = tt.addptr %Out_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc195)
      %begin_o_22 = tt.load %begin_o : !tt.ptr<i32> loc(#loc196)
      %Q_block_ptr = tt.addptr %Q, %q_offset_15 : !tt.ptr<bf16>, i64 loc(#loc197)
      %Q_block_ptr_23 = arith.muli %begin_q_17, %stride_qm : i32 loc(#loc198)
      %Q_block_ptr_24 = tt.addptr %Q_block_ptr, %Q_block_ptr_23 : !tt.ptr<bf16>, i32 loc(#loc199)
      %Q_block_ptr_25 = arith.extsi %qlen_19 : i32 to i64 loc(#loc200)
      %Q_block_ptr_26 = arith.extsi %stride_qm : i32 to i64 loc(#loc200)
      %Q_block_ptr_27 = arith.extsi %0 : i32 to i64 loc(#loc200)
      %V_block_ptr = tt.addptr %V, %kv_offset_16 : !tt.ptr<bf16>, i64 loc(#loc201)
      %V_block_ptr_28 = arith.muli %begin_k_20, %stride_vn : i32 loc(#loc202)
      %V_block_ptr_29 = tt.addptr %V_block_ptr, %V_block_ptr_28 : !tt.ptr<bf16>, i32 loc(#loc203)
      %V_block_ptr_30 = arith.extsi %klen : i32 to i64 loc(#loc204)
      %V_block_ptr_31 = arith.extsi %stride_vn : i32 to i64 loc(#loc204)
      %K_block_ptr = tt.addptr %K, %kv_offset_16 : !tt.ptr<bf16>, i64 loc(#loc205)
      %K_block_ptr_32 = arith.muli %begin_k_20, %stride_kn : i32 loc(#loc206)
      %K_block_ptr_33 = tt.addptr %K_block_ptr, %K_block_ptr_32 : !tt.ptr<bf16>, i32 loc(#loc207)
      %K_block_ptr_34 = arith.extsi %stride_kn : i32 to i64 loc(#loc208)
      %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc209)
      %offs_m_35 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc209)
      %offs_m_36 = tt.splat %0 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc210)
      %offs_m_37 = arith.addi %offs_m_36, %offs_m : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc210)
      %offs_d = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc211)
      %offs_d_38 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc211)
      %o_ptrs = arith.extsi %stride_oh : i32 to i64 loc(#loc212)
      %o_ptrs_39 = arith.muli %q_offset, %o_ptrs : i64 loc(#loc212)
      %o_ptrs_40 = tt.addptr %Out, %o_ptrs_39 : !tt.ptr<bf16>, i64 loc(#loc213)
      %o_ptrs_41 = arith.muli %begin_o_22, %stride_om : i32 loc(#loc214)
      %o_ptrs_42 = tt.addptr %o_ptrs_40, %o_ptrs_41 : !tt.ptr<bf16>, i32 loc(#loc215)
      %o_ptrs_43 = tt.expand_dims %offs_m_37 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc216)
      %o_ptrs_44 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc217)
      %o_ptrs_45 = tt.expand_dims %o_ptrs_44 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x64xi32, #linear> loc(#loc217)
      %o_ptrs_46 = tt.expand_dims %offs_m {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc218)
      %o_ptrs_47 = arith.muli %0, %stride_om : i32 loc(#loc218)
      %o_ptrs_48 = tt.splat %stride_om : i32 -> tensor<128x1xi32, #linear> loc(#loc218)
      %o_ptrs_49 = arith.muli %o_ptrs_46, %o_ptrs_48 : tensor<128x1xi32, #linear> loc(#loc218)
      %o_ptrs_50 = tt.broadcast %o_ptrs_49 : tensor<128x1xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc218)
      %o_ptrs_51 = tt.broadcast %o_ptrs_45 : tensor<1x64xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc218)
      %o_ptrs_52 = arith.addi %o_ptrs_50, %o_ptrs_51 : tensor<128x64xi32, #linear> loc(#loc218)
      %o_ptrs_53 = tt.addptr %o_ptrs_42, %o_ptrs_47 : !tt.ptr<bf16>, i32 loc(#loc218)
      %q = tt.splat %Q_block_ptr_27 : i64 -> tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc219)
      %q_54 = arith.extsi %offs_m_35 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc219)
      %q_55 = arith.addi %q, %q_54 : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc219)
      %q_56 = tt.expand_dims %q_55 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc219)
      %q_57 = arith.extsi %offs_d : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc219)
      %q_58 = arith.extsi %offs_d_38 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc219)
      %q_59 = tt.expand_dims %q_57 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc219)
      %q_60 = tt.expand_dims %q_54 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc219)
      %q_61 = arith.muli %Q_block_ptr_27, %Q_block_ptr_26 : i64 loc(#loc219)
      %q_62 = tt.splat %Q_block_ptr_26 : i64 -> tensor<128x1xi64, #blocked> loc(#loc219)
      %q_63 = arith.muli %q_60, %q_62 : tensor<128x1xi64, #blocked> loc(#loc219)
      %q_64 = tt.broadcast %q_63 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc219)
      %q_65 = tt.broadcast %q_59 : tensor<1x64xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc219)
      %q_66 = arith.addi %q_64, %q_65 : tensor<128x64xi64, #blocked> loc(#loc219)
      %q_67 = tt.addptr %Q_block_ptr_24, %q_61 : !tt.ptr<bf16>, i64 loc(#loc219)
      %q_68 = arith.trunci %q_66 : tensor<128x64xi64, #blocked> to tensor<128x64xi32, #blocked> loc(#loc219)
      %q_69 = arith.cmpi sge, %q_56, %cst_12 : tensor<128x1xi64, #blocked> loc(#loc219)
      %q_70 = tt.splat %Q_block_ptr_25 : i64 -> tensor<128x1xi64, #blocked> loc(#loc219)
      %q_71 = arith.cmpi slt, %q_56, %q_70 : tensor<128x1xi64, #blocked> loc(#loc219)
      %q_72 = arith.andi %q_69, %q_71 : tensor<128x1xi1, #blocked> loc(#loc219)
      %q_73 = tt.broadcast %q_72 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc219)
      %q_74 = arith.cmpi sge, %q_59, %cst_11 : tensor<1x64xi64, #blocked> loc(#loc219)
      %q_75 = arith.cmpi slt, %q_59, %cst_10 : tensor<1x64xi64, #blocked> loc(#loc219)
      %q_76 = arith.andi %q_74, %q_75 : tensor<1x64xi1, #blocked> loc(#loc219)
      %q_77 = tt.broadcast %q_76 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc219)
      %q_78 = arith.andi %q_73, %q_77 : tensor<128x64xi1, #blocked> loc(#loc219)
      %q_79 = amdgpu.buffer_load %q_67[%q_68], %q_78 : tensor<128x64xbf16, #blocked> loc(#loc219)
      %q_80 = ttg.local_alloc %q_79 : (tensor<128x64xbf16, #blocked>) -> !ttg.memdesc<128x64xbf16, #shared, #smem> loc(#loc219)
      %q_81 = ttg.local_load %q_80 : !ttg.memdesc<128x64xbf16, #shared, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc219)
      %k = tt.expand_dims %q_58 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc225)
      %k_82 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc225)
      %k_83 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc225)
      %k_84 = arith.extsi %k_82 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc225)
      %k_85 = arith.extsi %k_83 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc225)
      %k_86 = arith.cmpi sge, %k, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc225)
      %k_87 = arith.cmpi slt, %k, %cst_8 : tensor<64x1xi64, #blocked1> loc(#loc225)
      %k_88 = arith.andi %k_86, %k_87 : tensor<64x1xi1, #blocked1> loc(#loc225)
      %k_89 = tt.broadcast %k_88 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc225)
      %k_90 = tt.splat %V_block_ptr_30 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc225)
      %p = tt.splat %qk_scale : f32 -> tensor<128x32xf32, #mma> loc(#loc226)
      %v = tt.splat %V_block_ptr_30 : i64 -> tensor<32x1xi64, #blocked> loc(#loc227)
      %v_91 = tt.broadcast %q_76 : tensor<1x64xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc227)
      %k_92 = ttg.local_alloc : () -> !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> loc(#loc225)
      %v_93 = ttg.local_alloc : () -> !ttg.memdesc<1x32x64xbf16, #shared2, #smem, mutable> loc(#loc227)
      %V_block_ptr_94 = arith.cmpi sgt, %klen, %c0_i32 : i32 loc(#loc235)
      %k_95 = tt.expand_dims %k_84 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc225)
      %k_96 = tt.broadcast %k : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc225)
      %k_97 = tt.splat %K_block_ptr_34 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc225)
      %k_98 = arith.muli %k_95, %k_97 : tensor<1x32xi64, #blocked1> loc(#loc225)
      %k_99 = tt.broadcast %k_98 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc225)
      %k_100 = arith.addi %k_96, %k_99 : tensor<64x32xi64, #blocked1> loc(#loc225)
      %k_101 = arith.trunci %k_100 : tensor<64x32xi64, #blocked1> to tensor<64x32xi32, #blocked1> loc(#loc225)
      %k_102 = arith.cmpi sge, %k_95, %cst_7 : tensor<1x32xi64, #blocked1> loc(#loc225)
      %k_103 = arith.cmpi slt, %k_95, %k_90 : tensor<1x32xi64, #blocked1> loc(#loc225)
      %k_104 = arith.andi %k_102, %k_103 : tensor<1x32xi1, #blocked1> loc(#loc225)
      %k_105 = tt.broadcast %k_104 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc225)
      %k_106 = arith.andi %k_89, %k_105 : tensor<64x32xi1, #blocked1> loc(#loc225)
      %V_block_ptr_107 = tt.splat %V_block_ptr_94 : i1 -> tensor<64x32xi1, #blocked1> loc(#loc235)
      %V_block_ptr_108 = arith.andi %V_block_ptr_107, %k_106 : tensor<64x32xi1, #blocked1> loc(#loc235)
      %k_109 = amdgpu.buffer_load %K_block_ptr_33[%k_101], %V_block_ptr_108 : tensor<64x32xbf16, #blocked1> loc(#loc225)
      %v_110 = tt.expand_dims %k_85 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc227)
      %v_111 = tt.splat %V_block_ptr_31 : i64 -> tensor<32x1xi64, #blocked> loc(#loc227)
      %v_112 = arith.muli %v_110, %v_111 : tensor<32x1xi64, #blocked> loc(#loc227)
      %v_113 = tt.broadcast %v_112 : tensor<32x1xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc227)
      %v_114 = tt.broadcast %q_59 : tensor<1x64xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc227)
      %v_115 = arith.addi %v_113, %v_114 : tensor<32x64xi64, #blocked> loc(#loc227)
      %v_116 = arith.trunci %v_115 : tensor<32x64xi64, #blocked> to tensor<32x64xi32, #blocked> loc(#loc227)
      %v_117 = arith.cmpi sge, %v_110, %cst_6 : tensor<32x1xi64, #blocked> loc(#loc227)
      %v_118 = arith.cmpi slt, %v_110, %v : tensor<32x1xi64, #blocked> loc(#loc227)
      %v_119 = arith.andi %v_117, %v_118 : tensor<32x1xi1, #blocked> loc(#loc227)
      %v_120 = tt.broadcast %v_119 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc227)
      %v_121 = arith.andi %v_120, %v_91 : tensor<32x64xi1, #blocked> loc(#loc227)
      %V_block_ptr_122 = tt.splat %V_block_ptr_94 : i1 -> tensor<32x64xi1, #blocked> loc(#loc235)
      %V_block_ptr_123 = arith.andi %V_block_ptr_122, %v_121 : tensor<32x64xi1, #blocked> loc(#loc235)
      %v_124 = amdgpu.buffer_load %V_block_ptr_29[%v_116], %V_block_ptr_123 : tensor<32x64xbf16, #blocked> loc(#loc227)
      %k_125 = ttg.memdesc_index %k_92[%c0_i32] : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc225)
      ttg.local_store %k_109, %k_125 : tensor<64x32xbf16, #blocked1> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc225)
      %v_126 = ttg.memdesc_index %v_93[%c0_i32] : !ttg.memdesc<1x32x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> loc(#loc227)
      ttg.local_store %v_124, %v_126 : tensor<32x64xbf16, #blocked> -> !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> loc(#loc227)
      %V_block_ptr_127 = arith.subi %klen, %c32_i32 : i32 loc(#loc235)
      %V_block_ptr_128:6 = scf.for %V_block_ptr_158 = %c0_i32 to %V_block_ptr_127 step %c32_i32 iter_args(%arg23 = %cst, %arg24 = %c0_i64, %arg25 = %c0_i64, %V_block_ptr_159 = %c0_i32, %k_160 = %k_125, %v_161 = %v_126) -> (tensor<128x64xf32, #mma>, i64, i64, i32, !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32>, !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64>)  : i32 {
        %V_block_ptr_162 = arith.addi %arg25, %c32_i64 : i64 loc(#loc229)
        %K_block_ptr_163 = arith.addi %arg24, %c32_i64 : i64 loc(#loc230)
        %k_164 = tt.splat %K_block_ptr_163 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc225)
        %k_165 = arith.addi %k_164, %k_84 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc225)
        %k_166 = tt.expand_dims %k_165 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc225)
        %k_167 = arith.muli %K_block_ptr_163, %K_block_ptr_34 : i64 loc(#loc225)
        %k_168 = tt.addptr %K_block_ptr_33, %k_167 : !tt.ptr<bf16>, i64 loc(#loc225)
        %k_169 = arith.cmpi sge, %k_166, %cst_7 : tensor<1x32xi64, #blocked1> loc(#loc225)
        %k_170 = arith.cmpi slt, %k_166, %k_90 : tensor<1x32xi64, #blocked1> loc(#loc225)
        %k_171 = arith.andi %k_169, %k_170 : tensor<1x32xi1, #blocked1> loc(#loc225)
        %k_172 = tt.broadcast %k_171 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc225)
        %k_173 = arith.andi %k_89, %k_172 : tensor<64x32xi1, #blocked1> loc(#loc225)
        %k_174 = amdgpu.buffer_load %k_168[%k_101], %k_173 : tensor<64x32xbf16, #blocked1> loc(#loc225)
        %k_175 = ttg.local_load %k_160 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc225)
        %qk_176 = tt.dot %q_81, %k_175, %cst_5 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc231)
        %p_177 = arith.mulf %qk_176, %cst_0 : tensor<128x32xf32, #mma> loc(#loc236)
        %p_178 = arith.mulf %qk_176, %cst_1 : tensor<128x32xf32, #mma> loc(#loc237)
        %p_179 = arith.mulf %qk_176, %cst_2 : tensor<128x32xf32, #mma> loc(#loc238)
        %p_180 = arith.mulf %p_179, %qk_176 : tensor<128x32xf32, #mma> loc(#loc239)
        %p_181 = arith.addf %p_180, %cst_3 : tensor<128x32xf32, #mma> loc(#loc240)
        %p_182 = arith.mulf %p_178, %p_181 : tensor<128x32xf32, #mma> loc(#loc241)
        %p_183 = arith.mulf %p_182, %cst_4 : tensor<128x32xf32, #mma> loc(#loc247)
        %p_184 = arith.subf %cst_5, %p_183 : tensor<128x32xf32, #mma> loc(#loc251)
        %p_185 = math.exp %p_184 : tensor<128x32xf32, #mma> loc(#loc252)
        %p_186 = arith.addf %p_185, %cst_3 : tensor<128x32xf32, #mma> loc(#loc253)
        %p_187 = arith.divf %cst_3, %p_186 : tensor<128x32xf32, #mma> loc(#loc254)
        %p_188 = arith.mulf %p_187, %cst_4 : tensor<128x32xf32, #mma> loc(#loc249)
        %p_189 = arith.subf %p_188, %cst_3 : tensor<128x32xf32, #mma> loc(#loc250)
        %p_190 = arith.addf %p_189, %cst_3 : tensor<128x32xf32, #mma> loc(#loc243)
        %p_191 = arith.mulf %p_177, %p_190 : tensor<128x32xf32, #mma> loc(#loc244)
        %p_192 = arith.mulf %p_191, %p : tensor<128x32xf32, #mma> loc(#loc226)
        %p_193 = arith.truncf %p_192 : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc233)
        %v_194 = tt.splat %V_block_ptr_162 : i64 -> tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc227)
        %v_195 = arith.addi %v_194, %k_85 : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc227)
        %v_196 = tt.expand_dims %v_195 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc227)
        %v_197 = arith.muli %V_block_ptr_162, %V_block_ptr_31 : i64 loc(#loc227)
        %v_198 = tt.addptr %V_block_ptr_29, %v_197 : !tt.ptr<bf16>, i64 loc(#loc227)
        %v_199 = arith.cmpi sge, %v_196, %cst_6 : tensor<32x1xi64, #blocked> loc(#loc227)
        %v_200 = arith.cmpi slt, %v_196, %v : tensor<32x1xi64, #blocked> loc(#loc227)
        %v_201 = arith.andi %v_199, %v_200 : tensor<32x1xi1, #blocked> loc(#loc227)
        %v_202 = tt.broadcast %v_201 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc227)
        %v_203 = arith.andi %v_202, %v_91 : tensor<32x64xi1, #blocked> loc(#loc227)
        %v_204 = amdgpu.buffer_load %v_198[%v_116], %v_203 : tensor<32x64xbf16, #blocked> loc(#loc227)
        %v_205 = ttg.local_load %v_161 : !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc227)
        %p_206 = ttg.convert_layout %p_193 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc233)
        %acc_207 = tt.dot %p_206, %v_205, %arg23 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x64xf32, #mma> loc(#loc234)
        %V_block_ptr_208 = arith.addi %V_block_ptr_159, %c1_i32 : i32 loc(#loc235)
        %V_block_ptr_209 = arith.cmpi slt, %V_block_ptr_208, %c1_i32 : i32 loc(#loc235)
        %V_block_ptr_210 = arith.select %V_block_ptr_209, %V_block_ptr_208, %c0_i32 : i32 loc(#loc235)
        %k_211 = ttg.memdesc_index %k_92[%V_block_ptr_210] : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc225)
        ttg.local_store %k_174, %k_211 : tensor<64x32xbf16, #blocked1> -> !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> loc(#loc225)
        %v_212 = ttg.memdesc_index %v_93[%V_block_ptr_210] : !ttg.memdesc<1x32x64xbf16, #shared2, #smem, mutable> -> !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> loc(#loc227)
        ttg.local_store %v_204, %v_212 : tensor<32x64xbf16, #blocked> -> !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> loc(#loc227)
        scf.yield %acc_207, %K_block_ptr_163, %V_block_ptr_162, %V_block_ptr_210, %k_211, %v_212 : tensor<128x64xf32, #mma>, i64, i64, i32, !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32>, !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> loc(#loc235)
      } loc(#loc235)
      %V_block_ptr_129 = arith.addi %klen, %c31_i32 : i32 loc(#loc246)
      %V_block_ptr_130 = arith.divsi %V_block_ptr_129, %c32_i32 : i32 loc(#loc235)
      %V_block_ptr_131 = arith.cmpi sge, %V_block_ptr_130, %c1_i32 : i32 loc(#loc235)
      %k_132 = ttg.local_load %V_block_ptr_128#4 : !ttg.memdesc<64x32xbf16, #shared1, #smem, mutable, 1x64x32> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc225)
      %qk = scf.if %V_block_ptr_131 -> (tensor<128x32xf32, #mma>) {
        %qk_158 = tt.dot %q_81, %k_132, %cst_5 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc231)
        scf.yield %qk_158 : tensor<128x32xf32, #mma> loc(#loc231)
      } else {
        scf.yield %cst_5 : tensor<128x32xf32, #mma> loc(#loc231)
      } loc(#loc231)
      %p_133 = arith.mulf %qk, %cst_0 : tensor<128x32xf32, #mma> loc(#loc236)
      %p_134 = arith.mulf %qk, %cst_1 : tensor<128x32xf32, #mma> loc(#loc237)
      %p_135 = arith.mulf %qk, %cst_2 : tensor<128x32xf32, #mma> loc(#loc238)
      %p_136 = arith.mulf %p_135, %qk : tensor<128x32xf32, #mma> loc(#loc239)
      %p_137 = arith.addf %p_136, %cst_3 : tensor<128x32xf32, #mma> loc(#loc240)
      %p_138 = arith.mulf %p_134, %p_137 : tensor<128x32xf32, #mma> loc(#loc241)
      %p_139 = arith.mulf %p_138, %cst_4 : tensor<128x32xf32, #mma> loc(#loc247)
      %p_140 = arith.subf %cst_5, %p_139 : tensor<128x32xf32, #mma> loc(#loc251)
      %p_141 = math.exp %p_140 : tensor<128x32xf32, #mma> loc(#loc252)
      %p_142 = arith.addf %p_141, %cst_3 : tensor<128x32xf32, #mma> loc(#loc253)
      %p_143 = arith.divf %cst_3, %p_142 : tensor<128x32xf32, #mma> loc(#loc254)
      %p_144 = arith.mulf %p_143, %cst_4 : tensor<128x32xf32, #mma> loc(#loc249)
      %p_145 = arith.subf %p_144, %cst_3 : tensor<128x32xf32, #mma> loc(#loc250)
      %p_146 = arith.addf %p_145, %cst_3 : tensor<128x32xf32, #mma> loc(#loc243)
      %p_147 = arith.mulf %p_133, %p_146 : tensor<128x32xf32, #mma> loc(#loc244)
      %p_148 = arith.mulf %p_147, %p : tensor<128x32xf32, #mma> loc(#loc226)
      %p_149 = arith.truncf %p_148 : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc233)
      %v_150 = ttg.local_load %V_block_ptr_128#5 : !ttg.memdesc<32x64xbf16, #shared2, #smem, mutable, 1x32x64> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc227)
      %p_151 = ttg.convert_layout %p_149 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc233)
      %acc = scf.if %V_block_ptr_131 -> (tensor<128x64xf32, #mma>) {
        %acc_158 = tt.dot %p_151, %v_150, %V_block_ptr_128#0 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x64xf32, #mma> loc(#loc234)
        scf.yield %acc_158 : tensor<128x64xf32, #mma> loc(#loc234)
      } else {
        scf.yield %V_block_ptr_128#0 : tensor<128x64xf32, #mma> loc(#loc234)
      } loc(#loc234)
      %V_block_ptr_152 = arith.select %V_block_ptr_131, %acc, %V_block_ptr_128#0 : tensor<128x64xf32, #mma> loc(#loc235)
      ttg.local_dealloc %v_93 : !ttg.memdesc<1x32x64xbf16, #shared2, #smem, mutable> loc(#loc235)
      ttg.local_dealloc %k_92 : !ttg.memdesc<1x64x32xbf16, #shared1, #smem, mutable> loc(#loc235)
      %o_mask = tt.splat %qlen_19 : i32 -> tensor<128x1xi32, #linear> loc(#loc222)
      %o_mask_153 = arith.cmpi slt, %o_ptrs_43, %o_mask : tensor<128x1xi32, #linear> loc(#loc222)
      %o_mask_154 = arith.cmpi slt, %o_ptrs_45, %cst_13 : tensor<1x64xi32, #linear> loc(#loc223)
      %o_mask_155 = tt.broadcast %o_mask_153 : tensor<128x1xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc224)
      %o_mask_156 = tt.broadcast %o_mask_154 : tensor<1x64xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc224)
      %o_mask_157 = arith.andi %o_mask_155, %o_mask_156 : tensor<128x64xi1, #linear> loc(#loc224)
      %2 = arith.truncf %V_block_ptr_152 : tensor<128x64xf32, #mma> to tensor<128x64xbf16, #mma> loc(#loc179)
      %3 = ttg.convert_layout %2 : tensor<128x64xbf16, #mma> -> tensor<128x64xbf16, #linear> loc(#loc179)
      amdgpu.buffer_store %3, %o_ptrs_53[%o_ptrs_52], %o_mask_157 stride = %stride_om : tensor<128x64xbf16, #linear> loc(#loc180)
    } loc(#loc139)
    tt.return loc(#loc95)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":579:8)
#loc3 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":505:14)
#loc4 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":506:14)
#loc5 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":507:14)
#loc6 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":508:14)
#loc7 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":509:14)
#loc8 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":510:14)
#loc9 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":511:14)
#loc10 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":512:14)
#loc11 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":513:14)
#loc12 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":514:14)
#loc13 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":515:14)
#loc14 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":516:14)
#loc15 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":518:27)
#loc16 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":522:26)
#loc17 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":529:21)
#loc18 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":531:24)
#loc19 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":302:24)
#loc20 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":302:36)
#loc21 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":303:40)
#loc22 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:34)
#loc23 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:22)
#loc24 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":306:42)
#loc25 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":306:20)
#loc26 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":308:19)
#loc27 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":309:28)
#loc28 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:42)
#loc29 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:30)
#loc30 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:48)
#loc31 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:28)
#loc32 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":325:23)
#loc33 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:17)
#loc34 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:27)
#loc35 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:7)
#loc36 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":331:40)
#loc37 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":331:26)
#loc38 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:25)
#loc39 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:46)
#loc40 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:36)
#loc41 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":348:16)
#loc42 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:25)
#loc43 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:47)
#loc44 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:37)
#loc45 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":359:16)
#loc46 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:25)
#loc47 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:47)
#loc48 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:37)
#loc49 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":367:16)
#loc50 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":391:50)
#loc51 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":391:37)
#loc52 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":393:30)
#loc53 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:35)
#loc54 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:14)
#loc55 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:24)
#loc56 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:14)
#loc57 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:22)
#loc58 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:52)
#loc59 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:15)
#loc60 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":413:24)
#loc61 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":131:24)
#loc62 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":446:12)
#loc63 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":152:13)
#loc64 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":163:24)
#loc65 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":119:33)
#loc66 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":169:50)
#loc67 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":170:50)
#loc68 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":134:23)
#loc69 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:15)
#loc70 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":147:26)
#loc71 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:58)
#loc72 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:80)
#loc73 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:84)
#loc74 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:69)
#loc75 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:63)
#loc76 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:30)
#loc77 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:16)
#loc78 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:43)
#loc79 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:30)
#loc80 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:26)
#loc81 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:29)
#loc82 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:20)
#loc83 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:16)
#loc84 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:15)
#loc85 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:35)
#loc86 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:26)
#loc87 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:22)
#loc88 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":153:17)
#loc89 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":166:27)
#loc90 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:36)
#loc91 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:63)
#loc92 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:45)
#loc93 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":454:32)
#loc94 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":454:25)
#loc95 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":533:4)
#loc118 = loc(callsite(#loc1 at #loc2))
#loc119 = loc("off_hz"(#loc15))
#loc120 = loc("off_z"(#loc16))
#loc121 = loc("off_h"(#loc17))
#loc122 = loc("pid"(#loc18))
#loc123 = loc("q_offset"(#loc19))
#loc124 = loc("q_offset"(#loc20))
#loc125 = loc("kv_offset"(#loc21))
#loc126 = loc("begin_q"(#loc22))
#loc127 = loc("begin_q"(#loc23))
#loc128 = loc("end_q"(#loc24))
#loc129 = loc("end_q"(#loc25))
#loc130 = loc("qlen"(#loc26))
#loc131 = loc("qlen"(#loc27))
#loc132 = loc("begin_k"(#loc28))
#loc133 = loc("begin_k"(#loc29))
#loc134 = loc("end_k"(#loc30))
#loc135 = loc("end_k"(#loc31))
#loc136 = loc("klen"(#loc32))
#loc137 = loc(callsite(#loc33 at #loc2))
#loc138 = loc(callsite(#loc34 at #loc2))
#loc139 = loc(callsite(#loc35 at #loc2))
#loc140 = loc("begin_o"(#loc36))
#loc141 = loc("begin_o"(#loc37))
#loc142 = loc("Q_block_ptr"(#loc38))
#loc143 = loc("Q_block_ptr"(#loc39))
#loc144 = loc("Q_block_ptr"(#loc40))
#loc145 = loc("Q_block_ptr"(#loc41))
#loc146 = loc("V_block_ptr"(#loc42))
#loc147 = loc("V_block_ptr"(#loc43))
#loc148 = loc("V_block_ptr"(#loc44))
#loc149 = loc("V_block_ptr"(#loc45))
#loc150 = loc("K_block_ptr"(#loc46))
#loc151 = loc("K_block_ptr"(#loc47))
#loc152 = loc("K_block_ptr"(#loc48))
#loc153 = loc("K_block_ptr"(#loc49))
#loc154 = loc("offs_m"(#loc50))
#loc155 = loc("offs_m"(#loc51))
#loc156 = loc("offs_d"(#loc52))
#loc157 = loc("o_ptrs"(#loc53))
#loc158 = loc("o_ptrs"(#loc54))
#loc159 = loc("o_ptrs"(#loc55))
#loc160 = loc("o_ptrs"(#loc56))
#loc161 = loc("o_ptrs"(#loc57))
#loc162 = loc("o_ptrs"(#loc58))
#loc163 = loc("o_ptrs"(#loc59))
#loc164 = loc("q"(#loc60))
#loc165 = loc("k"(#loc61))
#loc166 = loc("acc"(#loc62))
#loc167 = loc("p"(#loc63))
#loc168 = loc("v"(#loc64))
#loc169 = loc("acc"(#loc65))
#loc170 = loc("V_block_ptr"(#loc66))
#loc171 = loc("K_block_ptr"(#loc67))
#loc172 = loc("qk"(#loc68))
#loc173 = loc("p"(#loc70))
#loc174 = loc("p"(#loc88))
#loc175 = loc("acc"(#loc89))
#loc176 = loc("o_mask"(#loc90))
#loc177 = loc("o_mask"(#loc91))
#loc178 = loc("o_mask"(#loc92))
#loc179 = loc(callsite(#loc93 at #loc2))
#loc180 = loc(callsite(#loc94 at #loc2))
#loc181 = loc(callsite(#loc123 at #loc2))
#loc182 = loc(callsite(#loc124 at #loc2))
#loc183 = loc(callsite(#loc125 at #loc2))
#loc184 = loc(callsite(#loc126 at #loc2))
#loc185 = loc(callsite(#loc127 at #loc2))
#loc186 = loc(callsite(#loc128 at #loc2))
#loc187 = loc(callsite(#loc129 at #loc2))
#loc188 = loc(callsite(#loc130 at #loc2))
#loc189 = loc(callsite(#loc131 at #loc2))
#loc190 = loc(callsite(#loc132 at #loc2))
#loc191 = loc(callsite(#loc133 at #loc2))
#loc192 = loc(callsite(#loc134 at #loc2))
#loc193 = loc(callsite(#loc135 at #loc2))
#loc194 = loc(callsite(#loc136 at #loc2))
#loc195 = loc(callsite(#loc140 at #loc2))
#loc196 = loc(callsite(#loc141 at #loc2))
#loc197 = loc(callsite(#loc142 at #loc2))
#loc198 = loc(callsite(#loc143 at #loc2))
#loc199 = loc(callsite(#loc144 at #loc2))
#loc200 = loc(callsite(#loc145 at #loc2))
#loc201 = loc(callsite(#loc146 at #loc2))
#loc202 = loc(callsite(#loc147 at #loc2))
#loc203 = loc(callsite(#loc148 at #loc2))
#loc204 = loc(callsite(#loc149 at #loc2))
#loc205 = loc(callsite(#loc150 at #loc2))
#loc206 = loc(callsite(#loc151 at #loc2))
#loc207 = loc(callsite(#loc152 at #loc2))
#loc208 = loc(callsite(#loc153 at #loc2))
#loc209 = loc(callsite(#loc154 at #loc2))
#loc210 = loc(callsite(#loc155 at #loc2))
#loc211 = loc(callsite(#loc156 at #loc2))
#loc212 = loc(callsite(#loc157 at #loc2))
#loc213 = loc(callsite(#loc158 at #loc2))
#loc214 = loc(callsite(#loc159 at #loc2))
#loc215 = loc(callsite(#loc160 at #loc2))
#loc216 = loc(callsite(#loc161 at #loc2))
#loc217 = loc(callsite(#loc162 at #loc2))
#loc218 = loc(callsite(#loc163 at #loc2))
#loc219 = loc(callsite(#loc164 at #loc2))
#loc220 = loc(callsite(#loc166 at #loc2))
#loc221 = loc("K_block_ptr"(#loc169))
#loc222 = loc(callsite(#loc176 at #loc2))
#loc223 = loc(callsite(#loc177 at #loc2))
#loc224 = loc(callsite(#loc178 at #loc2))
#loc225 = loc(callsite(#loc165 at #loc220))
#loc226 = loc(callsite(#loc167 at #loc220))
#loc227 = loc(callsite(#loc168 at #loc220))
#loc228 = loc("V_block_ptr"(#loc221))
#loc229 = loc(callsite(#loc170 at #loc220))
#loc230 = loc(callsite(#loc171 at #loc220))
#loc231 = loc(callsite(#loc172 at #loc220))
#loc232 = loc(callsite(#loc173 at #loc220))
#loc233 = loc(callsite(#loc174 at #loc220))
#loc234 = loc(callsite(#loc175 at #loc220))
#loc235 = loc(callsite(#loc228 at #loc220))
#loc236 = loc(callsite(#loc69 at #loc232))
#loc237 = loc(callsite(#loc71 at #loc232))
#loc238 = loc(callsite(#loc72 at #loc232))
#loc239 = loc(callsite(#loc73 at #loc232))
#loc240 = loc(callsite(#loc74 at #loc232))
#loc241 = loc(callsite(#loc75 at #loc232))
#loc242 = loc(callsite(#loc78 at #loc232))
#loc243 = loc(callsite(#loc86 at #loc232))
#loc244 = loc(callsite(#loc87 at #loc232))
#loc245 = loc(callsite(#loc77 at #loc242))
#loc246 = loc(fused[#loc235, #loc118])
#loc247 = loc(callsite(#loc76 at #loc245))
#loc248 = loc(callsite(#loc80 at #loc245))
#loc249 = loc(callsite(#loc84 at #loc245))
#loc250 = loc(callsite(#loc85 at #loc245))
#loc251 = loc(callsite(#loc79 at #loc248))
#loc252 = loc(callsite(#loc81 at #loc248))
#loc253 = loc(callsite(#loc82 at #loc248))
#loc254 = loc(callsite(#loc83 at #loc248))
