; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_gdpa_fwd(ptr addrspace(1) inreg readonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg readonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, ptr addrspace(1) inreg writeonly captures(none) %5, ptr addrspace(1) inreg readonly captures(none) %6, ptr addrspace(1) inreg readnone captures(none) %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, float inreg %20, i32 inreg %21, ptr addrspace(1) inreg readnone captures(none) %22, ptr addrspace(1) inreg readnone captures(none) %23) local_unnamed_addr #1 !dbg !7 {
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !8
  %.frozen = freeze i32 %17, !dbg !9
  %26 = sdiv i32 %25, %.frozen, !dbg !9
  %27 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !10
  %28 = sext i32 %26 to i64, !dbg !11
  %29 = getelementptr i32, ptr addrspace(1) %1, i64 %28, !dbg !11
  %30 = load <1 x i32>, ptr addrspace(1) %29, align 4, !dbg !14
  %31 = getelementptr i8, ptr addrspace(1) %29, i64 4, !dbg !15
  %32 = load <1 x i32>, ptr addrspace(1) %31, align 4, !dbg !16
  %33 = extractelement <1 x i32> %32, i64 0, !dbg !17
  %34 = extractelement <1 x i32> %30, i64 0, !dbg !17
  %35 = sub i32 %33, %34, !dbg !17
  %36 = tail call i32 @llvm.smin.i32(i32 %35, i32 %18), !dbg !18
  %37 = getelementptr i32, ptr addrspace(1) %3, i64 %28, !dbg !19
  %38 = load <1 x i32>, ptr addrspace(1) %37, align 4, !dbg !20
  %39 = getelementptr i8, ptr addrspace(1) %37, i64 4, !dbg !21
  %40 = load <1 x i32>, ptr addrspace(1) %39, align 4, !dbg !22
  %41 = extractelement <1 x i32> %40, i64 0, !dbg !23
  %42 = extractelement <1 x i32> %38, i64 0, !dbg !23
  %43 = sub i32 %41, %42, !dbg !23
  %44 = shl i32 %27, 7, !dbg !24
  %45 = icmp slt i32 %44, %36, !dbg !25
  br i1 %45, label %46, label %1361, !dbg !26

46:                                               ; preds = %24
  %47 = extractelement <1 x i32> %38, i64 0, !dbg !20
  %48 = extractelement <1 x i32> %30, i64 0, !dbg !14
  %49 = mul i32 %26, %.frozen, !dbg !27
  %.decomposed = sub i32 %25, %49, !dbg !27
  %50 = sext i32 %.decomposed to i64, !dbg !28
  %51 = sext i32 %11 to i64, !dbg !29
  %52 = mul nsw i64 %50, %51, !dbg !29
  %53 = sext i32 %9 to i64, !dbg !30
  %54 = mul nsw i64 %50, %53, !dbg !30
  %55 = getelementptr i32, ptr addrspace(1) %6, i64 %28, !dbg !31
  %56 = load <1 x i32>, ptr addrspace(1) %55, align 4, !dbg !32
  %57 = extractelement <1 x i32> %56, i64 0, !dbg !32
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !33
  %59 = mul i32 %48, %8, !dbg !34
  %60 = sext i32 %59 to i64, !dbg !35
  %61 = getelementptr bfloat, ptr addrspace(1) %58, i64 %60, !dbg !35
  %62 = sext i32 %36 to i64, !dbg !36
  %63 = sext i32 %8 to i64, !dbg !36
  %64 = sext i32 %44 to i64, !dbg !36
  %65 = getelementptr bfloat, ptr addrspace(1) %4, i64 %52, !dbg !37
  %66 = mul i32 %47, %12, !dbg !38
  %67 = sext i32 %66 to i64, !dbg !39
  %68 = getelementptr bfloat, ptr addrspace(1) %65, i64 %67, !dbg !39
  %69 = sext i32 %43 to i64, !dbg !40
  %70 = sext i32 %12 to i64, !dbg !40
  %71 = getelementptr bfloat, ptr addrspace(1) %2, i64 %52, !dbg !41
  %72 = mul i32 %47, %10, !dbg !42
  %73 = sext i32 %72 to i64, !dbg !43
  %74 = getelementptr bfloat, ptr addrspace(1) %71, i64 %73, !dbg !43
  %75 = sext i32 %10 to i64, !dbg !44
  %76 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !45
  %77 = and i32 %76, 31, !dbg !45
  %78 = and i32 %76, 192, !dbg !45
  %79 = lshr exact i32 %78, 1, !dbg !45
  %80 = or disjoint i32 %79, %77, !dbg !45
  %81 = lshr i32 %76, 3, !dbg !45
  %82 = and i32 %81, 31, !dbg !45
  %83 = or disjoint i32 %82, 32, !dbg !45
  %84 = or disjoint i32 %82, 64, !dbg !45
  %85 = or i32 %81, 96, !dbg !45
  %86 = or disjoint i32 %80, %44, !dbg !46
  %87 = shl nuw nsw i32 %76, 3, !dbg !47
  %88 = and i32 %87, 56, !dbg !47
  %89 = sext i32 %15 to i64, !dbg !48
  %90 = mul nsw i64 %50, %89, !dbg !48
  %91 = getelementptr bfloat, ptr addrspace(1) %5, i64 %90, !dbg !49
  %92 = mul i32 %57, %14, !dbg !50
  %93 = sext i32 %92 to i64, !dbg !51
  %94 = getelementptr bfloat, ptr addrspace(1) %91, i64 %93, !dbg !51
  %95 = and i32 %76, 32, !dbg !52
  %96 = icmp eq i32 %95, 0, !dbg !52
  %97 = lshr exact i32 %95, 2, !dbg !52
  %98 = or disjoint i32 %97, 16, !dbg !52
  %99 = or disjoint i32 %97, 32, !dbg !52
  %100 = or disjoint i32 %97, 48, !dbg !52
  %101 = mul i32 %14, %44, !dbg !53
  %102 = mul i32 %14, %80, !dbg !53
  %103 = add i32 %102, %97, !dbg !53
  %104 = add i32 %98, %102, !dbg !53
  %105 = add i32 %99, %102, !dbg !53
  %106 = add i32 %100, %102, !dbg !53
  %107 = sext i32 %101 to i64, !dbg !53
  %108 = getelementptr bfloat, ptr addrspace(1) %94, i64 %107, !dbg !53
  %109 = zext nneg i32 %82 to i64, !dbg !54
  %110 = zext nneg i32 %83 to i64, !dbg !54
  %111 = zext nneg i32 %84 to i64, !dbg !54
  %112 = zext nneg i32 %85 to i64, !dbg !54
  %113 = or disjoint i64 %109, %64, !dbg !54
  %114 = or disjoint i64 %110, %64, !dbg !54
  %115 = or disjoint i64 %111, %64, !dbg !54
  %116 = or disjoint i64 %112, %64, !dbg !54
  %117 = mul nsw i64 %63, %64, !dbg !54
  %118 = mul i32 %8, %82, !dbg !54
  %119 = mul i32 %8, %83, !dbg !54
  %120 = mul i32 %8, %84, !dbg !54
  %121 = mul i32 %8, %85, !dbg !54
  %122 = add i32 %118, %88, !dbg !54
  %123 = add i32 %119, %88, !dbg !54
  %124 = add i32 %120, %88, !dbg !54
  %125 = add i32 %121, %88, !dbg !54
  %126 = getelementptr bfloat, ptr addrspace(1) %61, i64 %117, !dbg !54
  %127 = icmp sgt i32 %44, -1, !dbg !54
  %128 = icmp slt i64 %113, %62, !dbg !54
  %129 = icmp slt i64 %114, %62, !dbg !54
  %130 = icmp slt i64 %115, %62, !dbg !54
  %131 = icmp slt i64 %116, %62, !dbg !54
  %132 = and i1 %127, %128, !dbg !54
  %133 = and i1 %127, %129, !dbg !54
  %134 = and i1 %127, %130, !dbg !54
  %135 = and i1 %127, %131, !dbg !54
  %136 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %126, i16 0, i32 2147483646, i32 159744), !dbg !54
  %137 = shl i32 %122, 1, !dbg !54
  %138 = select i1 %132, i32 %137, i32 -2147483648, !dbg !54
  %139 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %136, i32 %138, i32 0, i32 0), !dbg !54
  %140 = shl i32 %123, 1, !dbg !54
  %141 = select i1 %133, i32 %140, i32 -2147483648, !dbg !54
  %142 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %136, i32 %141, i32 0, i32 0), !dbg !54
  %143 = shl i32 %124, 1, !dbg !54
  %144 = select i1 %134, i32 %143, i32 -2147483648, !dbg !54
  %145 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %136, i32 %144, i32 0, i32 0), !dbg !54
  %146 = shl i32 %125, 1, !dbg !54
  %147 = select i1 %135, i32 %146, i32 -2147483648, !dbg !54
  %148 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %136, i32 %147, i32 0, i32 0), !dbg !54
  %149 = shl nuw nsw i32 %76, 4, !dbg !54
  %150 = and i32 %149, 4080, !dbg !54
  %151 = and i32 %76, 112, !dbg !54
  %152 = xor i32 %150, %151, !dbg !54
  %153 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %152, !dbg !54
  store <4 x i32> %139, ptr addrspace(3) %153, align 16, !dbg !54
  %154 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 4096, !dbg !54
  store <4 x i32> %142, ptr addrspace(3) %154, align 16, !dbg !54
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 8192, !dbg !54
  store <4 x i32> %145, ptr addrspace(3) %155, align 16, !dbg !54
  %156 = getelementptr inbounds nuw i8, ptr addrspace(3) %153, i32 12288, !dbg !54
  store <4 x i32> %148, ptr addrspace(3) %156, align 16, !dbg !54
  fence syncscope("workgroup") release, !dbg !54
  tail call void @llvm.amdgcn.s.barrier(), !dbg !54
  fence syncscope("workgroup") acquire, !dbg !54
  %157 = shl nuw nsw i32 %77, 7, !dbg !54
  %158 = shl nuw nsw i32 %78, 6, !dbg !54
  %159 = and i32 %87, 112, !dbg !54
  %160 = lshr exact i32 %95, 1, !dbg !54
  %161 = or disjoint i32 %157, %158, !dbg !54
  %162 = xor i32 %159, %160, !dbg !54
  %163 = or disjoint i32 %161, %162, !dbg !54
  %164 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %163, !dbg !54
  %165 = load <8 x bfloat>, ptr addrspace(3) %164, align 16, !dbg !54
  %166 = xor i32 %163, 32, !dbg !54
  %167 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %166, !dbg !54
  %168 = load <8 x bfloat>, ptr addrspace(3) %167, align 16, !dbg !54
  %169 = xor i32 %163, 64, !dbg !54
  %170 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %169, !dbg !54
  %171 = load <8 x bfloat>, ptr addrspace(3) %170, align 16, !dbg !54
  %172 = xor i32 %163, 96, !dbg !54
  %173 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %172, !dbg !54
  %174 = load <8 x bfloat>, ptr addrspace(3) %173, align 16, !dbg !54
  %175 = mul i32 %10, %82, !dbg !55
  %176 = add i32 %175, %88, !dbg !55
  %177 = icmp slt i32 %82, %43, !dbg !55
  %178 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %74, i16 0, i32 2147483646, i32 159744), !dbg !55
  %179 = shl i32 %176, 1, !dbg !55
  %180 = select i1 %177, i32 %179, i32 -2147483648, !dbg !55
  %181 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %178, i32 %180, i32 0, i32 0), !dbg !55
  %182 = mul i32 %12, %82, !dbg !56
  %183 = add i32 %182, %88, !dbg !56
  %184 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %68, i16 0, i32 2147483646, i32 159744), !dbg !56
  %185 = shl i32 %183, 1, !dbg !56
  %186 = select i1 %177, i32 %185, i32 -2147483648, !dbg !56
  %187 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %184, i32 %186, i32 0, i32 0), !dbg !56
  %188 = bitcast <4 x i32> %187 to <8 x bfloat>, !dbg !56
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  store <4 x i32> %181, ptr addrspace(3) %153, align 16, !dbg !55
  %189 = lshr exact i32 %151, 1, !dbg !56
  %190 = xor i32 %150, %189, !dbg !56
  %191 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %190, !dbg !56
  %192 = shufflevector <8 x bfloat> %188, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  store <4 x bfloat> %192, ptr addrspace(3) %191, align 8, !dbg !56
  %193 = xor i32 %190, 8, !dbg !56
  %194 = getelementptr inbounds nuw i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %193, !dbg !56
  %195 = shufflevector <8 x bfloat> %188, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !56
  store <4 x bfloat> %195, ptr addrspace(3) %194, align 8, !dbg !56
  %196 = add i32 %43, -32, !dbg !57
  %197 = icmp sgt i32 %196, 0, !dbg !57
  br i1 %197, label %.lr.ph, label %._crit_edge, !dbg !57

.lr.ph:                                           ; preds = %46
  %198 = or disjoint i32 %162, %157
  %199 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %198
  %200 = xor i32 %198, 32
  %201 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %200
  %202 = xor i32 %198, 64
  %203 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %202
  %204 = xor i32 %198, 96
  %205 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %204
  %206 = shl nuw nsw i32 %76, 2
  %207 = and i32 %206, 12
  %208 = and i32 %149, 64
  %209 = and i32 %76, 8
  %210 = icmp eq i32 %209, 0
  %211 = select i1 %210, i32 0, i32 132
  %212 = and i32 %76, 16
  %213 = select i1 %96, i32 0, i32 264
  %214 = or disjoint i32 %208, %212
  %215 = xor i32 %211, %207
  %216 = xor i32 %215, %213
  %217 = or disjoint i32 %214, %216
  %218 = xor i32 %217, 528
  %219 = xor i32 %217, 1552
  %220 = xor i32 %217, 560
  %221 = xor i32 %217, 1584
  %222 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %217
  %223 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %218
  %224 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 2048
  %225 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %219
  %226 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 64
  %227 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %220
  %228 = getelementptr inbounds nuw i8, ptr addrspace(3) %222, i32 2112
  %229 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %221
  br label %230, !dbg !57

230:                                              ; preds = %.lr.ph, %230
  %231 = phi i64 [ 0, %.lr.ph ], [ %264, %230 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %640, %230 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %641, %230 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %642, %230 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %643, %230 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %644, %230 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %645, %230 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %646, %230 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %647, %230 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %648, %230 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %649, %230 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %650, %230 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %651, %230 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %652, %230 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %653, %230 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %654, %230 ]
  %247 = phi float [ 0.000000e+00, %.lr.ph ], [ %655, %230 ]
  %248 = phi float [ 0.000000e+00, %.lr.ph ], [ %674, %230 ]
  %249 = phi float [ 0.000000e+00, %.lr.ph ], [ %675, %230 ]
  %250 = phi float [ 0.000000e+00, %.lr.ph ], [ %676, %230 ]
  %251 = phi float [ 0.000000e+00, %.lr.ph ], [ %677, %230 ]
  %252 = phi float [ 0.000000e+00, %.lr.ph ], [ %678, %230 ]
  %253 = phi float [ 0.000000e+00, %.lr.ph ], [ %679, %230 ]
  %254 = phi float [ 0.000000e+00, %.lr.ph ], [ %680, %230 ]
  %255 = phi float [ 0.000000e+00, %.lr.ph ], [ %681, %230 ]
  %256 = phi float [ 0.000000e+00, %.lr.ph ], [ %682, %230 ]
  %257 = phi float [ 0.000000e+00, %.lr.ph ], [ %683, %230 ]
  %258 = phi float [ 0.000000e+00, %.lr.ph ], [ %684, %230 ]
  %259 = phi float [ 0.000000e+00, %.lr.ph ], [ %685, %230 ]
  %260 = phi float [ 0.000000e+00, %.lr.ph ], [ %686, %230 ]
  %261 = phi float [ 0.000000e+00, %.lr.ph ], [ %687, %230 ]
  %262 = phi float [ 0.000000e+00, %.lr.ph ], [ %688, %230 ]
  %263 = phi float [ 0.000000e+00, %.lr.ph ], [ %689, %230 ]
  %264 = add i64 %231, 32, !dbg !58
  %indvars = trunc i64 %264 to i32, !dbg !57
  %265 = or disjoint i64 %264, %109, !dbg !55
  %266 = mul i64 %264, %75, !dbg !55
  %267 = getelementptr bfloat, ptr addrspace(1) %74, i64 %266, !dbg !55
  %268 = icmp sgt i64 %264, -1, !dbg !55
  %269 = icmp slt i64 %265, %69, !dbg !55
  %270 = and i1 %268, %269, !dbg !55
  %271 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %267, i16 0, i32 2147483646, i32 159744), !dbg !55
  %272 = select i1 %270, i32 %179, i32 -2147483648, !dbg !55
  %273 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %271, i32 %272, i32 0, i32 0), !dbg !55
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  %274 = load <8 x bfloat>, ptr addrspace(3) %199, align 16, !dbg !55
  %275 = load <8 x bfloat>, ptr addrspace(3) %201, align 16, !dbg !55
  %276 = load <8 x bfloat>, ptr addrspace(3) %203, align 16, !dbg !55
  %277 = load <8 x bfloat>, ptr addrspace(3) %205, align 16, !dbg !55
  %278 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %274, <8 x bfloat> %165, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !59
  %279 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %275, <8 x bfloat> %168, <16 x float> %278, i32 0, i32 0, i32 0), !dbg !59
  %280 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %276, <8 x bfloat> %171, <16 x float> %279, i32 0, i32 0, i32 0), !dbg !59
  %281 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %277, <8 x bfloat> %174, <16 x float> %280, i32 0, i32 0, i32 0), !dbg !59
  %282 = extractelement <16 x float> %281, i64 0, !dbg !59
  %283 = extractelement <16 x float> %281, i64 1, !dbg !59
  %284 = extractelement <16 x float> %281, i64 2, !dbg !59
  %285 = extractelement <16 x float> %281, i64 3, !dbg !59
  %286 = extractelement <16 x float> %281, i64 4, !dbg !59
  %287 = extractelement <16 x float> %281, i64 5, !dbg !59
  %288 = extractelement <16 x float> %281, i64 6, !dbg !59
  %289 = extractelement <16 x float> %281, i64 7, !dbg !59
  %290 = extractelement <16 x float> %281, i64 8, !dbg !59
  %291 = extractelement <16 x float> %281, i64 9, !dbg !59
  %292 = extractelement <16 x float> %281, i64 10, !dbg !59
  %293 = extractelement <16 x float> %281, i64 11, !dbg !59
  %294 = extractelement <16 x float> %281, i64 12, !dbg !59
  %295 = extractelement <16 x float> %281, i64 13, !dbg !59
  %296 = extractelement <16 x float> %281, i64 14, !dbg !59
  %297 = extractelement <16 x float> %281, i64 15, !dbg !59
  %298 = fmul float %282, 5.000000e-01, !dbg !60
  %299 = fmul float %283, 5.000000e-01, !dbg !60
  %300 = fmul float %284, 5.000000e-01, !dbg !60
  %301 = fmul float %285, 5.000000e-01, !dbg !60
  %302 = fmul float %286, 5.000000e-01, !dbg !60
  %303 = fmul float %287, 5.000000e-01, !dbg !60
  %304 = fmul float %288, 5.000000e-01, !dbg !60
  %305 = fmul float %289, 5.000000e-01, !dbg !60
  %306 = fmul float %290, 5.000000e-01, !dbg !60
  %307 = fmul float %291, 5.000000e-01, !dbg !60
  %308 = fmul float %292, 5.000000e-01, !dbg !60
  %309 = fmul float %293, 5.000000e-01, !dbg !60
  %310 = fmul float %294, 5.000000e-01, !dbg !60
  %311 = fmul float %295, 5.000000e-01, !dbg !60
  %312 = fmul float %296, 5.000000e-01, !dbg !60
  %313 = fmul float %297, 5.000000e-01, !dbg !60
  %314 = fmul float %282, 0x3FE9884540000000, !dbg !63
  %315 = fmul float %283, 0x3FE9884540000000, !dbg !63
  %316 = fmul float %284, 0x3FE9884540000000, !dbg !63
  %317 = fmul float %285, 0x3FE9884540000000, !dbg !63
  %318 = fmul float %286, 0x3FE9884540000000, !dbg !63
  %319 = fmul float %287, 0x3FE9884540000000, !dbg !63
  %320 = fmul float %288, 0x3FE9884540000000, !dbg !63
  %321 = fmul float %289, 0x3FE9884540000000, !dbg !63
  %322 = fmul float %290, 0x3FE9884540000000, !dbg !63
  %323 = fmul float %291, 0x3FE9884540000000, !dbg !63
  %324 = fmul float %292, 0x3FE9884540000000, !dbg !63
  %325 = fmul float %293, 0x3FE9884540000000, !dbg !63
  %326 = fmul float %294, 0x3FE9884540000000, !dbg !63
  %327 = fmul float %295, 0x3FE9884540000000, !dbg !63
  %328 = fmul float %296, 0x3FE9884540000000, !dbg !63
  %329 = fmul float %297, 0x3FE9884540000000, !dbg !63
  %330 = fmul float %282, 0x3FA6E4E260000000, !dbg !64
  %331 = fmul float %283, 0x3FA6E4E260000000, !dbg !64
  %332 = fmul float %284, 0x3FA6E4E260000000, !dbg !64
  %333 = fmul float %285, 0x3FA6E4E260000000, !dbg !64
  %334 = fmul float %286, 0x3FA6E4E260000000, !dbg !64
  %335 = fmul float %287, 0x3FA6E4E260000000, !dbg !64
  %336 = fmul float %288, 0x3FA6E4E260000000, !dbg !64
  %337 = fmul float %289, 0x3FA6E4E260000000, !dbg !64
  %338 = fmul float %290, 0x3FA6E4E260000000, !dbg !64
  %339 = fmul float %291, 0x3FA6E4E260000000, !dbg !64
  %340 = fmul float %292, 0x3FA6E4E260000000, !dbg !64
  %341 = fmul float %293, 0x3FA6E4E260000000, !dbg !64
  %342 = fmul float %294, 0x3FA6E4E260000000, !dbg !64
  %343 = fmul float %295, 0x3FA6E4E260000000, !dbg !64
  %344 = fmul float %296, 0x3FA6E4E260000000, !dbg !64
  %345 = fmul float %297, 0x3FA6E4E260000000, !dbg !64
  %346 = fmul float %282, %330, !dbg !65
  %347 = fmul float %283, %331, !dbg !65
  %348 = fmul float %284, %332, !dbg !65
  %349 = fmul float %285, %333, !dbg !65
  %350 = fmul float %286, %334, !dbg !65
  %351 = fmul float %287, %335, !dbg !65
  %352 = fmul float %288, %336, !dbg !65
  %353 = fmul float %289, %337, !dbg !65
  %354 = fmul float %290, %338, !dbg !65
  %355 = fmul float %291, %339, !dbg !65
  %356 = fmul float %292, %340, !dbg !65
  %357 = fmul float %293, %341, !dbg !65
  %358 = fmul float %294, %342, !dbg !65
  %359 = fmul float %295, %343, !dbg !65
  %360 = fmul float %296, %344, !dbg !65
  %361 = fmul float %297, %345, !dbg !65
  %362 = fadd float %346, 1.000000e+00, !dbg !66
  %363 = fadd float %347, 1.000000e+00, !dbg !66
  %364 = fadd float %348, 1.000000e+00, !dbg !66
  %365 = fadd float %349, 1.000000e+00, !dbg !66
  %366 = fadd float %350, 1.000000e+00, !dbg !66
  %367 = fadd float %351, 1.000000e+00, !dbg !66
  %368 = fadd float %352, 1.000000e+00, !dbg !66
  %369 = fadd float %353, 1.000000e+00, !dbg !66
  %370 = fadd float %354, 1.000000e+00, !dbg !66
  %371 = fadd float %355, 1.000000e+00, !dbg !66
  %372 = fadd float %356, 1.000000e+00, !dbg !66
  %373 = fadd float %357, 1.000000e+00, !dbg !66
  %374 = fadd float %358, 1.000000e+00, !dbg !66
  %375 = fadd float %359, 1.000000e+00, !dbg !66
  %376 = fadd float %360, 1.000000e+00, !dbg !66
  %377 = fadd float %361, 1.000000e+00, !dbg !66
  %378 = fmul float %314, %362, !dbg !67
  %379 = fmul float %315, %363, !dbg !67
  %380 = fmul float %316, %364, !dbg !67
  %381 = fmul float %317, %365, !dbg !67
  %382 = fmul float %318, %366, !dbg !67
  %383 = fmul float %319, %367, !dbg !67
  %384 = fmul float %320, %368, !dbg !67
  %385 = fmul float %321, %369, !dbg !67
  %386 = fmul float %322, %370, !dbg !67
  %387 = fmul float %323, %371, !dbg !67
  %388 = fmul float %324, %372, !dbg !67
  %389 = fmul float %325, %373, !dbg !67
  %390 = fmul float %326, %374, !dbg !67
  %391 = fmul float %327, %375, !dbg !67
  %392 = fmul float %328, %376, !dbg !67
  %393 = fmul float %329, %377, !dbg !67
  %394 = fmul float %378, 2.000000e+00, !dbg !68
  %395 = fmul float %379, 2.000000e+00, !dbg !68
  %396 = fmul float %380, 2.000000e+00, !dbg !68
  %397 = fmul float %381, 2.000000e+00, !dbg !68
  %398 = fmul float %382, 2.000000e+00, !dbg !68
  %399 = fmul float %383, 2.000000e+00, !dbg !68
  %400 = fmul float %384, 2.000000e+00, !dbg !68
  %401 = fmul float %385, 2.000000e+00, !dbg !68
  %402 = fmul float %386, 2.000000e+00, !dbg !68
  %403 = fmul float %387, 2.000000e+00, !dbg !68
  %404 = fmul float %388, 2.000000e+00, !dbg !68
  %405 = fmul float %389, 2.000000e+00, !dbg !68
  %406 = fmul float %390, 2.000000e+00, !dbg !68
  %407 = fmul float %391, 2.000000e+00, !dbg !68
  %408 = fmul float %392, 2.000000e+00, !dbg !68
  %409 = fmul float %393, 2.000000e+00, !dbg !68
  %410 = fsub float 0.000000e+00, %394, !dbg !69
  %411 = fsub float 0.000000e+00, %395, !dbg !69
  %412 = fsub float 0.000000e+00, %396, !dbg !69
  %413 = fsub float 0.000000e+00, %397, !dbg !69
  %414 = fsub float 0.000000e+00, %398, !dbg !69
  %415 = fsub float 0.000000e+00, %399, !dbg !69
  %416 = fsub float 0.000000e+00, %400, !dbg !69
  %417 = fsub float 0.000000e+00, %401, !dbg !69
  %418 = fsub float 0.000000e+00, %402, !dbg !69
  %419 = fsub float 0.000000e+00, %403, !dbg !69
  %420 = fsub float 0.000000e+00, %404, !dbg !69
  %421 = fsub float 0.000000e+00, %405, !dbg !69
  %422 = fsub float 0.000000e+00, %406, !dbg !69
  %423 = fsub float 0.000000e+00, %407, !dbg !69
  %424 = fsub float 0.000000e+00, %408, !dbg !69
  %425 = fsub float 0.000000e+00, %409, !dbg !69
  %426 = fmul float %410, 0x3FF7154760000000, !dbg !72
  %427 = tail call float @llvm.exp2.f32(float %426), !dbg !72
  %428 = fmul float %411, 0x3FF7154760000000, !dbg !72
  %429 = tail call float @llvm.exp2.f32(float %428), !dbg !72
  %430 = fmul float %412, 0x3FF7154760000000, !dbg !72
  %431 = tail call float @llvm.exp2.f32(float %430), !dbg !72
  %432 = fmul float %413, 0x3FF7154760000000, !dbg !72
  %433 = tail call float @llvm.exp2.f32(float %432), !dbg !72
  %434 = fmul float %414, 0x3FF7154760000000, !dbg !72
  %435 = tail call float @llvm.exp2.f32(float %434), !dbg !72
  %436 = fmul float %415, 0x3FF7154760000000, !dbg !72
  %437 = tail call float @llvm.exp2.f32(float %436), !dbg !72
  %438 = fmul float %416, 0x3FF7154760000000, !dbg !72
  %439 = tail call float @llvm.exp2.f32(float %438), !dbg !72
  %440 = fmul float %417, 0x3FF7154760000000, !dbg !72
  %441 = tail call float @llvm.exp2.f32(float %440), !dbg !72
  %442 = fmul float %418, 0x3FF7154760000000, !dbg !72
  %443 = tail call float @llvm.exp2.f32(float %442), !dbg !72
  %444 = fmul float %419, 0x3FF7154760000000, !dbg !72
  %445 = tail call float @llvm.exp2.f32(float %444), !dbg !72
  %446 = fmul float %420, 0x3FF7154760000000, !dbg !72
  %447 = tail call float @llvm.exp2.f32(float %446), !dbg !72
  %448 = fmul float %421, 0x3FF7154760000000, !dbg !72
  %449 = tail call float @llvm.exp2.f32(float %448), !dbg !72
  %450 = fmul float %422, 0x3FF7154760000000, !dbg !72
  %451 = tail call float @llvm.exp2.f32(float %450), !dbg !72
  %452 = fmul float %423, 0x3FF7154760000000, !dbg !72
  %453 = tail call float @llvm.exp2.f32(float %452), !dbg !72
  %454 = fmul float %424, 0x3FF7154760000000, !dbg !72
  %455 = tail call float @llvm.exp2.f32(float %454), !dbg !72
  %456 = fmul float %425, 0x3FF7154760000000, !dbg !72
  %457 = tail call float @llvm.exp2.f32(float %456), !dbg !72
  %458 = fadd float %427, 1.000000e+00, !dbg !73
  %459 = fadd float %429, 1.000000e+00, !dbg !73
  %460 = fadd float %431, 1.000000e+00, !dbg !73
  %461 = fadd float %433, 1.000000e+00, !dbg !73
  %462 = fadd float %435, 1.000000e+00, !dbg !73
  %463 = fadd float %437, 1.000000e+00, !dbg !73
  %464 = fadd float %439, 1.000000e+00, !dbg !73
  %465 = fadd float %441, 1.000000e+00, !dbg !73
  %466 = fadd float %443, 1.000000e+00, !dbg !73
  %467 = fadd float %445, 1.000000e+00, !dbg !73
  %468 = fadd float %447, 1.000000e+00, !dbg !73
  %469 = fadd float %449, 1.000000e+00, !dbg !73
  %470 = fadd float %451, 1.000000e+00, !dbg !73
  %471 = fadd float %453, 1.000000e+00, !dbg !73
  %472 = fadd float %455, 1.000000e+00, !dbg !73
  %473 = fadd float %457, 1.000000e+00, !dbg !73
  %474 = fdiv float 1.000000e+00, %458, !dbg !74
  %475 = fdiv float 1.000000e+00, %459, !dbg !74
  %476 = fdiv float 1.000000e+00, %460, !dbg !74
  %477 = fdiv float 1.000000e+00, %461, !dbg !74
  %478 = fdiv float 1.000000e+00, %462, !dbg !74
  %479 = fdiv float 1.000000e+00, %463, !dbg !74
  %480 = fdiv float 1.000000e+00, %464, !dbg !74
  %481 = fdiv float 1.000000e+00, %465, !dbg !74
  %482 = fdiv float 1.000000e+00, %466, !dbg !74
  %483 = fdiv float 1.000000e+00, %467, !dbg !74
  %484 = fdiv float 1.000000e+00, %468, !dbg !74
  %485 = fdiv float 1.000000e+00, %469, !dbg !74
  %486 = fdiv float 1.000000e+00, %470, !dbg !74
  %487 = fdiv float 1.000000e+00, %471, !dbg !74
  %488 = fdiv float 1.000000e+00, %472, !dbg !74
  %489 = fdiv float 1.000000e+00, %473, !dbg !74
  %490 = fmul float %474, 2.000000e+00, !dbg !75
  %491 = fmul float %475, 2.000000e+00, !dbg !75
  %492 = fmul float %476, 2.000000e+00, !dbg !75
  %493 = fmul float %477, 2.000000e+00, !dbg !75
  %494 = fmul float %478, 2.000000e+00, !dbg !75
  %495 = fmul float %479, 2.000000e+00, !dbg !75
  %496 = fmul float %480, 2.000000e+00, !dbg !75
  %497 = fmul float %481, 2.000000e+00, !dbg !75
  %498 = fmul float %482, 2.000000e+00, !dbg !75
  %499 = fmul float %483, 2.000000e+00, !dbg !75
  %500 = fmul float %484, 2.000000e+00, !dbg !75
  %501 = fmul float %485, 2.000000e+00, !dbg !75
  %502 = fmul float %486, 2.000000e+00, !dbg !75
  %503 = fmul float %487, 2.000000e+00, !dbg !75
  %504 = fmul float %488, 2.000000e+00, !dbg !75
  %505 = fmul float %489, 2.000000e+00, !dbg !75
  %506 = fadd float %490, -1.000000e+00, !dbg !76
  %507 = fadd float %491, -1.000000e+00, !dbg !76
  %508 = fadd float %492, -1.000000e+00, !dbg !76
  %509 = fadd float %493, -1.000000e+00, !dbg !76
  %510 = fadd float %494, -1.000000e+00, !dbg !76
  %511 = fadd float %495, -1.000000e+00, !dbg !76
  %512 = fadd float %496, -1.000000e+00, !dbg !76
  %513 = fadd float %497, -1.000000e+00, !dbg !76
  %514 = fadd float %498, -1.000000e+00, !dbg !76
  %515 = fadd float %499, -1.000000e+00, !dbg !76
  %516 = fadd float %500, -1.000000e+00, !dbg !76
  %517 = fadd float %501, -1.000000e+00, !dbg !76
  %518 = fadd float %502, -1.000000e+00, !dbg !76
  %519 = fadd float %503, -1.000000e+00, !dbg !76
  %520 = fadd float %504, -1.000000e+00, !dbg !76
  %521 = fadd float %505, -1.000000e+00, !dbg !76
  %522 = fadd float %506, 1.000000e+00, !dbg !77
  %523 = fadd float %507, 1.000000e+00, !dbg !77
  %524 = fadd float %508, 1.000000e+00, !dbg !77
  %525 = fadd float %509, 1.000000e+00, !dbg !77
  %526 = fadd float %510, 1.000000e+00, !dbg !77
  %527 = fadd float %511, 1.000000e+00, !dbg !77
  %528 = fadd float %512, 1.000000e+00, !dbg !77
  %529 = fadd float %513, 1.000000e+00, !dbg !77
  %530 = fadd float %514, 1.000000e+00, !dbg !77
  %531 = fadd float %515, 1.000000e+00, !dbg !77
  %532 = fadd float %516, 1.000000e+00, !dbg !77
  %533 = fadd float %517, 1.000000e+00, !dbg !77
  %534 = fadd float %518, 1.000000e+00, !dbg !77
  %535 = fadd float %519, 1.000000e+00, !dbg !77
  %536 = fadd float %520, 1.000000e+00, !dbg !77
  %537 = fadd float %521, 1.000000e+00, !dbg !77
  %538 = fmul float %298, %522, !dbg !78
  %539 = fmul float %299, %523, !dbg !78
  %540 = fmul float %300, %524, !dbg !78
  %541 = fmul float %301, %525, !dbg !78
  %542 = fmul float %302, %526, !dbg !78
  %543 = fmul float %303, %527, !dbg !78
  %544 = fmul float %304, %528, !dbg !78
  %545 = fmul float %305, %529, !dbg !78
  %546 = fmul float %306, %530, !dbg !78
  %547 = fmul float %307, %531, !dbg !78
  %548 = fmul float %308, %532, !dbg !78
  %549 = fmul float %309, %533, !dbg !78
  %550 = fmul float %310, %534, !dbg !78
  %551 = fmul float %311, %535, !dbg !78
  %552 = fmul float %312, %536, !dbg !78
  %553 = fmul float %313, %537, !dbg !78
  %554 = fmul float %20, %538, !dbg !79
  %555 = fmul float %20, %539, !dbg !79
  %556 = fmul float %20, %540, !dbg !79
  %557 = fmul float %20, %541, !dbg !79
  %558 = fmul float %20, %542, !dbg !79
  %559 = fmul float %20, %543, !dbg !79
  %560 = fmul float %20, %544, !dbg !79
  %561 = fmul float %20, %545, !dbg !79
  %562 = fmul float %20, %546, !dbg !79
  %563 = fmul float %20, %547, !dbg !79
  %564 = fmul float %20, %548, !dbg !79
  %565 = fmul float %20, %549, !dbg !79
  %566 = fmul float %20, %550, !dbg !79
  %567 = fmul float %20, %551, !dbg !79
  %568 = fmul float %20, %552, !dbg !79
  %569 = fmul float %20, %553, !dbg !79
  %570 = insertelement <2 x float> poison, float %554, i64 0, !dbg !80
  %571 = insertelement <2 x float> %570, float %555, i64 1, !dbg !80
  %572 = fptrunc <2 x float> %571 to <2 x bfloat>, !dbg !80
  %573 = insertelement <2 x float> poison, float %556, i64 0, !dbg !80
  %574 = insertelement <2 x float> %573, float %557, i64 1, !dbg !80
  %575 = fptrunc <2 x float> %574 to <2 x bfloat>, !dbg !80
  %576 = insertelement <2 x float> poison, float %558, i64 0, !dbg !80
  %577 = insertelement <2 x float> %576, float %559, i64 1, !dbg !80
  %578 = fptrunc <2 x float> %577 to <2 x bfloat>, !dbg !80
  %579 = shufflevector <2 x bfloat> %578, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %580 = insertelement <2 x float> poison, float %560, i64 0, !dbg !80
  %581 = insertelement <2 x float> %580, float %561, i64 1, !dbg !80
  %582 = fptrunc <2 x float> %581 to <2 x bfloat>, !dbg !80
  %583 = shufflevector <2 x bfloat> %582, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %584 = insertelement <2 x float> poison, float %562, i64 0, !dbg !80
  %585 = insertelement <2 x float> %584, float %563, i64 1, !dbg !80
  %586 = fptrunc <2 x float> %585 to <2 x bfloat>, !dbg !80
  %587 = insertelement <2 x float> poison, float %564, i64 0, !dbg !80
  %588 = insertelement <2 x float> %587, float %565, i64 1, !dbg !80
  %589 = fptrunc <2 x float> %588 to <2 x bfloat>, !dbg !80
  %590 = insertelement <2 x float> poison, float %566, i64 0, !dbg !80
  %591 = insertelement <2 x float> %590, float %567, i64 1, !dbg !80
  %592 = fptrunc <2 x float> %591 to <2 x bfloat>, !dbg !80
  %593 = shufflevector <2 x bfloat> %592, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %594 = insertelement <2 x float> poison, float %568, i64 0, !dbg !80
  %595 = insertelement <2 x float> %594, float %569, i64 1, !dbg !80
  %596 = fptrunc <2 x float> %595 to <2 x bfloat>, !dbg !80
  %597 = shufflevector <2 x bfloat> %596, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %598 = mul i64 %264, %70, !dbg !56
  %599 = getelementptr bfloat, ptr addrspace(1) %68, i64 %598, !dbg !56
  %600 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %599, i16 0, i32 2147483646, i32 159744), !dbg !56
  %601 = select i1 %270, i32 %185, i32 -2147483648, !dbg !56
  %602 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %600, i32 %601, i32 0, i32 0), !dbg !56
  %603 = bitcast <4 x i32> %602 to <8 x bfloat>, !dbg !56
  %604 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %222), !dbg !56
  %605 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %223), !dbg !56
  %606 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %224), !dbg !56
  %607 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %225), !dbg !56
  %608 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %226), !dbg !56
  %609 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %227), !dbg !56
  %610 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %228), !dbg !56
  %611 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %229), !dbg !56
  %612 = shufflevector <2 x bfloat> %572, <2 x bfloat> %575, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %613 = shufflevector <8 x bfloat> %612, <8 x bfloat> %579, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !81
  %614 = shufflevector <8 x bfloat> %613, <8 x bfloat> %583, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !81
  %615 = shufflevector <2 x bfloat> %586, <2 x bfloat> %589, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %616 = shufflevector <8 x bfloat> %615, <8 x bfloat> %593, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !81
  %617 = shufflevector <8 x bfloat> %616, <8 x bfloat> %597, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !81
  %618 = shufflevector <4 x bfloat> %604, <4 x bfloat> %605, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %619 = shufflevector <4 x bfloat> %606, <4 x bfloat> %607, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %620 = shufflevector <4 x bfloat> %608, <4 x bfloat> %609, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %621 = shufflevector <4 x bfloat> %610, <4 x bfloat> %611, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %622 = insertelement <16 x float> <float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float undef, float undef, float undef, float undef, float undef, float undef>, float %232, i64 0, !dbg !81
  %623 = insertelement <16 x float> %622, float %233, i64 1, !dbg !81
  %624 = insertelement <16 x float> %623, float %234, i64 2, !dbg !81
  %625 = insertelement <16 x float> %624, float %235, i64 3, !dbg !81
  %626 = insertelement <16 x float> %625, float %236, i64 4, !dbg !81
  %627 = insertelement <16 x float> %626, float %237, i64 5, !dbg !81
  %628 = insertelement <16 x float> %627, float %238, i64 6, !dbg !81
  %629 = insertelement <16 x float> %628, float %239, i64 7, !dbg !81
  %630 = insertelement <16 x float> %629, float %240, i64 8, !dbg !81
  %631 = insertelement <16 x float> %630, float %241, i64 9, !dbg !81
  %632 = insertelement <16 x float> %631, float %242, i64 10, !dbg !81
  %633 = insertelement <16 x float> %632, float %243, i64 11, !dbg !81
  %634 = insertelement <16 x float> %633, float %244, i64 12, !dbg !81
  %635 = insertelement <16 x float> %634, float %245, i64 13, !dbg !81
  %636 = insertelement <16 x float> %635, float %246, i64 14, !dbg !81
  %637 = insertelement <16 x float> %636, float %247, i64 15, !dbg !81
  %638 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %618, <8 x bfloat> %614, <16 x float> %637, i32 0, i32 0, i32 0), !dbg !81
  %639 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %619, <8 x bfloat> %617, <16 x float> %638, i32 0, i32 0, i32 0), !dbg !81
  %640 = extractelement <16 x float> %639, i64 0, !dbg !81
  %641 = extractelement <16 x float> %639, i64 1, !dbg !81
  %642 = extractelement <16 x float> %639, i64 2, !dbg !81
  %643 = extractelement <16 x float> %639, i64 3, !dbg !81
  %644 = extractelement <16 x float> %639, i64 4, !dbg !81
  %645 = extractelement <16 x float> %639, i64 5, !dbg !81
  %646 = extractelement <16 x float> %639, i64 6, !dbg !81
  %647 = extractelement <16 x float> %639, i64 7, !dbg !81
  %648 = extractelement <16 x float> %639, i64 8, !dbg !81
  %649 = extractelement <16 x float> %639, i64 9, !dbg !81
  %650 = extractelement <16 x float> %639, i64 10, !dbg !81
  %651 = extractelement <16 x float> %639, i64 11, !dbg !81
  %652 = extractelement <16 x float> %639, i64 12, !dbg !81
  %653 = extractelement <16 x float> %639, i64 13, !dbg !81
  %654 = extractelement <16 x float> %639, i64 14, !dbg !81
  %655 = extractelement <16 x float> %639, i64 15, !dbg !81
  %656 = insertelement <16 x float> <float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float undef, float undef, float undef, float undef, float undef, float undef>, float %248, i64 0, !dbg !81
  %657 = insertelement <16 x float> %656, float %249, i64 1, !dbg !81
  %658 = insertelement <16 x float> %657, float %250, i64 2, !dbg !81
  %659 = insertelement <16 x float> %658, float %251, i64 3, !dbg !81
  %660 = insertelement <16 x float> %659, float %252, i64 4, !dbg !81
  %661 = insertelement <16 x float> %660, float %253, i64 5, !dbg !81
  %662 = insertelement <16 x float> %661, float %254, i64 6, !dbg !81
  %663 = insertelement <16 x float> %662, float %255, i64 7, !dbg !81
  %664 = insertelement <16 x float> %663, float %256, i64 8, !dbg !81
  %665 = insertelement <16 x float> %664, float %257, i64 9, !dbg !81
  %666 = insertelement <16 x float> %665, float %258, i64 10, !dbg !81
  %667 = insertelement <16 x float> %666, float %259, i64 11, !dbg !81
  %668 = insertelement <16 x float> %667, float %260, i64 12, !dbg !81
  %669 = insertelement <16 x float> %668, float %261, i64 13, !dbg !81
  %670 = insertelement <16 x float> %669, float %262, i64 14, !dbg !81
  %671 = insertelement <16 x float> %670, float %263, i64 15, !dbg !81
  %672 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %620, <8 x bfloat> %614, <16 x float> %671, i32 0, i32 0, i32 0), !dbg !81
  %673 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %621, <8 x bfloat> %617, <16 x float> %672, i32 0, i32 0, i32 0), !dbg !81
  %674 = extractelement <16 x float> %673, i64 0, !dbg !81
  %675 = extractelement <16 x float> %673, i64 1, !dbg !81
  %676 = extractelement <16 x float> %673, i64 2, !dbg !81
  %677 = extractelement <16 x float> %673, i64 3, !dbg !81
  %678 = extractelement <16 x float> %673, i64 4, !dbg !81
  %679 = extractelement <16 x float> %673, i64 5, !dbg !81
  %680 = extractelement <16 x float> %673, i64 6, !dbg !81
  %681 = extractelement <16 x float> %673, i64 7, !dbg !81
  %682 = extractelement <16 x float> %673, i64 8, !dbg !81
  %683 = extractelement <16 x float> %673, i64 9, !dbg !81
  %684 = extractelement <16 x float> %673, i64 10, !dbg !81
  %685 = extractelement <16 x float> %673, i64 11, !dbg !81
  %686 = extractelement <16 x float> %673, i64 12, !dbg !81
  %687 = extractelement <16 x float> %673, i64 13, !dbg !81
  %688 = extractelement <16 x float> %673, i64 14, !dbg !81
  %689 = extractelement <16 x float> %673, i64 15, !dbg !81
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  store <4 x i32> %273, ptr addrspace(3) %153, align 16, !dbg !55
  %690 = shufflevector <8 x bfloat> %603, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !56
  store <4 x bfloat> %690, ptr addrspace(3) %191, align 8, !dbg !56
  %691 = shufflevector <8 x bfloat> %603, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !56
  store <4 x bfloat> %691, ptr addrspace(3) %194, align 8, !dbg !56
  %692 = icmp sgt i32 %196, %indvars, !dbg !57
  br i1 %692, label %230, label %._crit_edge, !dbg !57

._crit_edge:                                      ; preds = %230, %46
  %693 = phi float [ 0.000000e+00, %46 ], [ %640, %230 ], !dbg !13
  %694 = phi float [ 0.000000e+00, %46 ], [ %641, %230 ], !dbg !13
  %695 = phi float [ 0.000000e+00, %46 ], [ %642, %230 ], !dbg !13
  %696 = phi float [ 0.000000e+00, %46 ], [ %643, %230 ], !dbg !13
  %697 = phi float [ 0.000000e+00, %46 ], [ %644, %230 ], !dbg !13
  %698 = phi float [ 0.000000e+00, %46 ], [ %645, %230 ], !dbg !13
  %699 = phi float [ 0.000000e+00, %46 ], [ %646, %230 ], !dbg !13
  %700 = phi float [ 0.000000e+00, %46 ], [ %647, %230 ], !dbg !13
  %701 = phi float [ 0.000000e+00, %46 ], [ %648, %230 ], !dbg !13
  %702 = phi float [ 0.000000e+00, %46 ], [ %649, %230 ], !dbg !13
  %703 = phi float [ 0.000000e+00, %46 ], [ %650, %230 ], !dbg !13
  %704 = phi float [ 0.000000e+00, %46 ], [ %651, %230 ], !dbg !13
  %705 = phi float [ 0.000000e+00, %46 ], [ %652, %230 ], !dbg !13
  %706 = phi float [ 0.000000e+00, %46 ], [ %653, %230 ], !dbg !13
  %707 = phi float [ 0.000000e+00, %46 ], [ %654, %230 ], !dbg !13
  %708 = phi float [ 0.000000e+00, %46 ], [ %655, %230 ], !dbg !13
  %709 = phi float [ 0.000000e+00, %46 ], [ %674, %230 ], !dbg !13
  %710 = phi float [ 0.000000e+00, %46 ], [ %675, %230 ], !dbg !13
  %711 = phi float [ 0.000000e+00, %46 ], [ %676, %230 ], !dbg !13
  %712 = phi float [ 0.000000e+00, %46 ], [ %677, %230 ], !dbg !13
  %713 = phi float [ 0.000000e+00, %46 ], [ %678, %230 ], !dbg !13
  %714 = phi float [ 0.000000e+00, %46 ], [ %679, %230 ], !dbg !13
  %715 = phi float [ 0.000000e+00, %46 ], [ %680, %230 ], !dbg !13
  %716 = phi float [ 0.000000e+00, %46 ], [ %681, %230 ], !dbg !13
  %717 = phi float [ 0.000000e+00, %46 ], [ %682, %230 ], !dbg !13
  %718 = phi float [ 0.000000e+00, %46 ], [ %683, %230 ], !dbg !13
  %719 = phi float [ 0.000000e+00, %46 ], [ %684, %230 ], !dbg !13
  %720 = phi float [ 0.000000e+00, %46 ], [ %685, %230 ], !dbg !13
  %721 = phi float [ 0.000000e+00, %46 ], [ %686, %230 ], !dbg !13
  %722 = phi float [ 0.000000e+00, %46 ], [ %687, %230 ], !dbg !13
  %723 = phi float [ 0.000000e+00, %46 ], [ %688, %230 ], !dbg !13
  %724 = phi float [ 0.000000e+00, %46 ], [ %689, %230 ], !dbg !13
  %725 = add i32 %43, 31, !dbg !13
  %726 = icmp sgt i32 %725, 31, !dbg !57
  fence syncscope("workgroup") release, !dbg !55
  tail call void @llvm.amdgcn.s.barrier(), !dbg !55
  fence syncscope("workgroup") acquire, !dbg !55
  br i1 %726, label %727, label %760, !dbg !59

727:                                              ; preds = %._crit_edge
  %728 = or disjoint i32 %162, %157, !dbg !55
  %729 = xor i32 %728, 96, !dbg !55
  %730 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %729, !dbg !55
  %731 = load <8 x bfloat>, ptr addrspace(3) %730, align 16, !dbg !55
  %732 = xor i32 %728, 64, !dbg !55
  %733 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %732, !dbg !55
  %734 = load <8 x bfloat>, ptr addrspace(3) %733, align 16, !dbg !55
  %735 = xor i32 %728, 32, !dbg !55
  %736 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %735, !dbg !55
  %737 = load <8 x bfloat>, ptr addrspace(3) %736, align 16, !dbg !55
  %738 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %728, !dbg !55
  %739 = load <8 x bfloat>, ptr addrspace(3) %738, align 16, !dbg !55
  %740 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %739, <8 x bfloat> %165, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !59
  %741 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %737, <8 x bfloat> %168, <16 x float> %740, i32 0, i32 0, i32 0), !dbg !59
  %742 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %734, <8 x bfloat> %171, <16 x float> %741, i32 0, i32 0, i32 0), !dbg !59
  %743 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %731, <8 x bfloat> %174, <16 x float> %742, i32 0, i32 0, i32 0), !dbg !59
  %744 = extractelement <16 x float> %743, i64 0, !dbg !59
  %745 = extractelement <16 x float> %743, i64 1, !dbg !59
  %746 = extractelement <16 x float> %743, i64 2, !dbg !59
  %747 = extractelement <16 x float> %743, i64 3, !dbg !59
  %748 = extractelement <16 x float> %743, i64 4, !dbg !59
  %749 = extractelement <16 x float> %743, i64 5, !dbg !59
  %750 = extractelement <16 x float> %743, i64 6, !dbg !59
  %751 = extractelement <16 x float> %743, i64 7, !dbg !59
  %752 = extractelement <16 x float> %743, i64 8, !dbg !59
  %753 = extractelement <16 x float> %743, i64 9, !dbg !59
  %754 = extractelement <16 x float> %743, i64 10, !dbg !59
  %755 = extractelement <16 x float> %743, i64 11, !dbg !59
  %756 = extractelement <16 x float> %743, i64 12, !dbg !59
  %757 = extractelement <16 x float> %743, i64 13, !dbg !59
  %758 = extractelement <16 x float> %743, i64 14, !dbg !59
  %759 = extractelement <16 x float> %743, i64 15, !dbg !59
  br label %760, !dbg !59

760:                                              ; preds = %727, %._crit_edge
  %761 = phi float [ %744, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %762 = phi float [ %745, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %763 = phi float [ %746, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %764 = phi float [ %747, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %765 = phi float [ %748, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %766 = phi float [ %749, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %767 = phi float [ %750, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %768 = phi float [ %751, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %769 = phi float [ %752, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %770 = phi float [ %753, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %771 = phi float [ %754, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %772 = phi float [ %755, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %773 = phi float [ %756, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %774 = phi float [ %757, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %775 = phi float [ %758, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %776 = phi float [ %759, %727 ], [ 0.000000e+00, %._crit_edge ], !dbg !13
  %777 = shl nuw nsw i32 %76, 2, !dbg !56
  %778 = and i32 %777, 12, !dbg !56
  %779 = and i32 %149, 64, !dbg !56
  %780 = and i32 %76, 8, !dbg !56
  %781 = icmp eq i32 %780, 0, !dbg !56
  %782 = select i1 %781, i32 0, i32 132, !dbg !56
  %783 = and i32 %76, 16, !dbg !56
  %784 = select i1 %96, i32 0, i32 264, !dbg !56
  %785 = or disjoint i32 %779, %783, !dbg !56
  %786 = xor i32 %782, %778, !dbg !56
  %787 = xor i32 %786, %784, !dbg !56
  %788 = or disjoint i32 %785, %787, !dbg !56
  %789 = xor i32 %788, 528, !dbg !56
  %790 = xor i32 %788, 1552, !dbg !56
  %791 = xor i32 %788, 560, !dbg !56
  %792 = xor i32 %788, 1584, !dbg !56
  %793 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %788, !dbg !56
  %794 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %789, !dbg !56
  %795 = getelementptr inbounds nuw i8, ptr addrspace(3) %793, i32 2048, !dbg !56
  %796 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %790, !dbg !56
  %797 = getelementptr inbounds nuw i8, ptr addrspace(3) %793, i32 64, !dbg !56
  %798 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %791, !dbg !56
  %799 = getelementptr inbounds nuw i8, ptr addrspace(3) %793, i32 2112, !dbg !56
  %800 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %792, !dbg !56
  %801 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %793), !dbg !56
  %802 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %794), !dbg !56
  %803 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %795), !dbg !56
  %804 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %796), !dbg !56
  %805 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %797), !dbg !56
  %806 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %798), !dbg !56
  %807 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %799), !dbg !56
  %808 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %800), !dbg !56
  br i1 %726, label %809, label %._crit_edge7, !dbg !81

809:                                              ; preds = %760
  %810 = fmul float %775, 5.000000e-01, !dbg !60
  %811 = fmul float %775, 0x3FE9884540000000, !dbg !63
  %812 = fmul float %775, 0x3FA6E4E260000000, !dbg !64
  %813 = fmul float %775, %812, !dbg !65
  %814 = fadd float %813, 1.000000e+00, !dbg !66
  %815 = fmul float %811, %814, !dbg !67
  %816 = fmul float %815, 2.000000e+00, !dbg !68
  %817 = fsub float 0.000000e+00, %816, !dbg !69
  %818 = fmul float %817, 0x3FF7154760000000, !dbg !72
  %819 = tail call float @llvm.exp2.f32(float %818), !dbg !72
  %820 = fadd float %819, 1.000000e+00, !dbg !73
  %821 = fdiv float 1.000000e+00, %820, !dbg !74
  %822 = fmul float %821, 2.000000e+00, !dbg !75
  %823 = fadd float %822, -1.000000e+00, !dbg !76
  %824 = fadd float %823, 1.000000e+00, !dbg !77
  %825 = fmul float %810, %824, !dbg !78
  %826 = fmul float %20, %825, !dbg !79
  %827 = insertelement <2 x float> poison, float %826, i64 0, !dbg !80
  %828 = fmul float %776, 5.000000e-01, !dbg !60
  %829 = fmul float %776, 0x3FE9884540000000, !dbg !63
  %830 = fmul float %776, 0x3FA6E4E260000000, !dbg !64
  %831 = fmul float %776, %830, !dbg !65
  %832 = fadd float %831, 1.000000e+00, !dbg !66
  %833 = fmul float %829, %832, !dbg !67
  %834 = fmul float %833, 2.000000e+00, !dbg !68
  %835 = fsub float 0.000000e+00, %834, !dbg !69
  %836 = fmul float %835, 0x3FF7154760000000, !dbg !72
  %837 = tail call float @llvm.exp2.f32(float %836), !dbg !72
  %838 = fadd float %837, 1.000000e+00, !dbg !73
  %839 = fdiv float 1.000000e+00, %838, !dbg !74
  %840 = fmul float %839, 2.000000e+00, !dbg !75
  %841 = fadd float %840, -1.000000e+00, !dbg !76
  %842 = fadd float %841, 1.000000e+00, !dbg !77
  %843 = fmul float %828, %842, !dbg !78
  %844 = fmul float %20, %843, !dbg !79
  %845 = insertelement <2 x float> %827, float %844, i64 1, !dbg !80
  %846 = fptrunc <2 x float> %845 to <2 x bfloat>, !dbg !80
  %847 = shufflevector <2 x bfloat> %846, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %848 = fmul float %773, 5.000000e-01, !dbg !60
  %849 = fmul float %773, 0x3FE9884540000000, !dbg !63
  %850 = fmul float %773, 0x3FA6E4E260000000, !dbg !64
  %851 = fmul float %773, %850, !dbg !65
  %852 = fadd float %851, 1.000000e+00, !dbg !66
  %853 = fmul float %849, %852, !dbg !67
  %854 = fmul float %853, 2.000000e+00, !dbg !68
  %855 = fsub float 0.000000e+00, %854, !dbg !69
  %856 = fmul float %855, 0x3FF7154760000000, !dbg !72
  %857 = tail call float @llvm.exp2.f32(float %856), !dbg !72
  %858 = fadd float %857, 1.000000e+00, !dbg !73
  %859 = fdiv float 1.000000e+00, %858, !dbg !74
  %860 = fmul float %859, 2.000000e+00, !dbg !75
  %861 = fadd float %860, -1.000000e+00, !dbg !76
  %862 = fadd float %861, 1.000000e+00, !dbg !77
  %863 = fmul float %848, %862, !dbg !78
  %864 = fmul float %20, %863, !dbg !79
  %865 = insertelement <2 x float> poison, float %864, i64 0, !dbg !80
  %866 = fmul float %774, 5.000000e-01, !dbg !60
  %867 = fmul float %774, 0x3FE9884540000000, !dbg !63
  %868 = fmul float %774, 0x3FA6E4E260000000, !dbg !64
  %869 = fmul float %774, %868, !dbg !65
  %870 = fadd float %869, 1.000000e+00, !dbg !66
  %871 = fmul float %867, %870, !dbg !67
  %872 = fmul float %871, 2.000000e+00, !dbg !68
  %873 = fsub float 0.000000e+00, %872, !dbg !69
  %874 = fmul float %873, 0x3FF7154760000000, !dbg !72
  %875 = tail call float @llvm.exp2.f32(float %874), !dbg !72
  %876 = fadd float %875, 1.000000e+00, !dbg !73
  %877 = fdiv float 1.000000e+00, %876, !dbg !74
  %878 = fmul float %877, 2.000000e+00, !dbg !75
  %879 = fadd float %878, -1.000000e+00, !dbg !76
  %880 = fadd float %879, 1.000000e+00, !dbg !77
  %881 = fmul float %866, %880, !dbg !78
  %882 = fmul float %20, %881, !dbg !79
  %883 = insertelement <2 x float> %865, float %882, i64 1, !dbg !80
  %884 = fptrunc <2 x float> %883 to <2 x bfloat>, !dbg !80
  %885 = shufflevector <2 x bfloat> %884, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %886 = fmul float %771, 5.000000e-01, !dbg !60
  %887 = fmul float %771, 0x3FE9884540000000, !dbg !63
  %888 = fmul float %771, 0x3FA6E4E260000000, !dbg !64
  %889 = fmul float %771, %888, !dbg !65
  %890 = fadd float %889, 1.000000e+00, !dbg !66
  %891 = fmul float %887, %890, !dbg !67
  %892 = fmul float %891, 2.000000e+00, !dbg !68
  %893 = fsub float 0.000000e+00, %892, !dbg !69
  %894 = fmul float %893, 0x3FF7154760000000, !dbg !72
  %895 = tail call float @llvm.exp2.f32(float %894), !dbg !72
  %896 = fadd float %895, 1.000000e+00, !dbg !73
  %897 = fdiv float 1.000000e+00, %896, !dbg !74
  %898 = fmul float %897, 2.000000e+00, !dbg !75
  %899 = fadd float %898, -1.000000e+00, !dbg !76
  %900 = fadd float %899, 1.000000e+00, !dbg !77
  %901 = fmul float %886, %900, !dbg !78
  %902 = fmul float %20, %901, !dbg !79
  %903 = insertelement <2 x float> poison, float %902, i64 0, !dbg !80
  %904 = fmul float %772, 5.000000e-01, !dbg !60
  %905 = fmul float %772, 0x3FE9884540000000, !dbg !63
  %906 = fmul float %772, 0x3FA6E4E260000000, !dbg !64
  %907 = fmul float %772, %906, !dbg !65
  %908 = fadd float %907, 1.000000e+00, !dbg !66
  %909 = fmul float %905, %908, !dbg !67
  %910 = fmul float %909, 2.000000e+00, !dbg !68
  %911 = fsub float 0.000000e+00, %910, !dbg !69
  %912 = fmul float %911, 0x3FF7154760000000, !dbg !72
  %913 = tail call float @llvm.exp2.f32(float %912), !dbg !72
  %914 = fadd float %913, 1.000000e+00, !dbg !73
  %915 = fdiv float 1.000000e+00, %914, !dbg !74
  %916 = fmul float %915, 2.000000e+00, !dbg !75
  %917 = fadd float %916, -1.000000e+00, !dbg !76
  %918 = fadd float %917, 1.000000e+00, !dbg !77
  %919 = fmul float %904, %918, !dbg !78
  %920 = fmul float %20, %919, !dbg !79
  %921 = insertelement <2 x float> %903, float %920, i64 1, !dbg !80
  %922 = fptrunc <2 x float> %921 to <2 x bfloat>, !dbg !80
  %923 = fmul float %769, 5.000000e-01, !dbg !60
  %924 = fmul float %769, 0x3FE9884540000000, !dbg !63
  %925 = fmul float %769, 0x3FA6E4E260000000, !dbg !64
  %926 = fmul float %769, %925, !dbg !65
  %927 = fadd float %926, 1.000000e+00, !dbg !66
  %928 = fmul float %924, %927, !dbg !67
  %929 = fmul float %928, 2.000000e+00, !dbg !68
  %930 = fsub float 0.000000e+00, %929, !dbg !69
  %931 = fmul float %930, 0x3FF7154760000000, !dbg !72
  %932 = tail call float @llvm.exp2.f32(float %931), !dbg !72
  %933 = fadd float %932, 1.000000e+00, !dbg !73
  %934 = fdiv float 1.000000e+00, %933, !dbg !74
  %935 = fmul float %934, 2.000000e+00, !dbg !75
  %936 = fadd float %935, -1.000000e+00, !dbg !76
  %937 = fadd float %936, 1.000000e+00, !dbg !77
  %938 = fmul float %923, %937, !dbg !78
  %939 = fmul float %20, %938, !dbg !79
  %940 = insertelement <2 x float> poison, float %939, i64 0, !dbg !80
  %941 = fmul float %770, 5.000000e-01, !dbg !60
  %942 = fmul float %770, 0x3FE9884540000000, !dbg !63
  %943 = fmul float %770, 0x3FA6E4E260000000, !dbg !64
  %944 = fmul float %770, %943, !dbg !65
  %945 = fadd float %944, 1.000000e+00, !dbg !66
  %946 = fmul float %942, %945, !dbg !67
  %947 = fmul float %946, 2.000000e+00, !dbg !68
  %948 = fsub float 0.000000e+00, %947, !dbg !69
  %949 = fmul float %948, 0x3FF7154760000000, !dbg !72
  %950 = tail call float @llvm.exp2.f32(float %949), !dbg !72
  %951 = fadd float %950, 1.000000e+00, !dbg !73
  %952 = fdiv float 1.000000e+00, %951, !dbg !74
  %953 = fmul float %952, 2.000000e+00, !dbg !75
  %954 = fadd float %953, -1.000000e+00, !dbg !76
  %955 = fadd float %954, 1.000000e+00, !dbg !77
  %956 = fmul float %941, %955, !dbg !78
  %957 = fmul float %20, %956, !dbg !79
  %958 = insertelement <2 x float> %940, float %957, i64 1, !dbg !80
  %959 = fptrunc <2 x float> %958 to <2 x bfloat>, !dbg !80
  %960 = fmul float %767, 5.000000e-01, !dbg !60
  %961 = fmul float %767, 0x3FE9884540000000, !dbg !63
  %962 = fmul float %767, 0x3FA6E4E260000000, !dbg !64
  %963 = fmul float %767, %962, !dbg !65
  %964 = fadd float %963, 1.000000e+00, !dbg !66
  %965 = fmul float %961, %964, !dbg !67
  %966 = fmul float %965, 2.000000e+00, !dbg !68
  %967 = fsub float 0.000000e+00, %966, !dbg !69
  %968 = fmul float %967, 0x3FF7154760000000, !dbg !72
  %969 = tail call float @llvm.exp2.f32(float %968), !dbg !72
  %970 = fadd float %969, 1.000000e+00, !dbg !73
  %971 = fdiv float 1.000000e+00, %970, !dbg !74
  %972 = fmul float %971, 2.000000e+00, !dbg !75
  %973 = fadd float %972, -1.000000e+00, !dbg !76
  %974 = fadd float %973, 1.000000e+00, !dbg !77
  %975 = fmul float %960, %974, !dbg !78
  %976 = fmul float %20, %975, !dbg !79
  %977 = insertelement <2 x float> poison, float %976, i64 0, !dbg !80
  %978 = fmul float %768, 5.000000e-01, !dbg !60
  %979 = fmul float %768, 0x3FE9884540000000, !dbg !63
  %980 = fmul float %768, 0x3FA6E4E260000000, !dbg !64
  %981 = fmul float %768, %980, !dbg !65
  %982 = fadd float %981, 1.000000e+00, !dbg !66
  %983 = fmul float %979, %982, !dbg !67
  %984 = fmul float %983, 2.000000e+00, !dbg !68
  %985 = fsub float 0.000000e+00, %984, !dbg !69
  %986 = fmul float %985, 0x3FF7154760000000, !dbg !72
  %987 = tail call float @llvm.exp2.f32(float %986), !dbg !72
  %988 = fadd float %987, 1.000000e+00, !dbg !73
  %989 = fdiv float 1.000000e+00, %988, !dbg !74
  %990 = fmul float %989, 2.000000e+00, !dbg !75
  %991 = fadd float %990, -1.000000e+00, !dbg !76
  %992 = fadd float %991, 1.000000e+00, !dbg !77
  %993 = fmul float %978, %992, !dbg !78
  %994 = fmul float %20, %993, !dbg !79
  %995 = insertelement <2 x float> %977, float %994, i64 1, !dbg !80
  %996 = fptrunc <2 x float> %995 to <2 x bfloat>, !dbg !80
  %997 = shufflevector <2 x bfloat> %996, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %998 = fmul float %765, 5.000000e-01, !dbg !60
  %999 = fmul float %765, 0x3FE9884540000000, !dbg !63
  %1000 = fmul float %765, 0x3FA6E4E260000000, !dbg !64
  %1001 = fmul float %765, %1000, !dbg !65
  %1002 = fadd float %1001, 1.000000e+00, !dbg !66
  %1003 = fmul float %999, %1002, !dbg !67
  %1004 = fmul float %1003, 2.000000e+00, !dbg !68
  %1005 = fsub float 0.000000e+00, %1004, !dbg !69
  %1006 = fmul float %1005, 0x3FF7154760000000, !dbg !72
  %1007 = tail call float @llvm.exp2.f32(float %1006), !dbg !72
  %1008 = fadd float %1007, 1.000000e+00, !dbg !73
  %1009 = fdiv float 1.000000e+00, %1008, !dbg !74
  %1010 = fmul float %1009, 2.000000e+00, !dbg !75
  %1011 = fadd float %1010, -1.000000e+00, !dbg !76
  %1012 = fadd float %1011, 1.000000e+00, !dbg !77
  %1013 = fmul float %998, %1012, !dbg !78
  %1014 = fmul float %20, %1013, !dbg !79
  %1015 = insertelement <2 x float> poison, float %1014, i64 0, !dbg !80
  %1016 = fmul float %766, 5.000000e-01, !dbg !60
  %1017 = fmul float %766, 0x3FE9884540000000, !dbg !63
  %1018 = fmul float %766, 0x3FA6E4E260000000, !dbg !64
  %1019 = fmul float %766, %1018, !dbg !65
  %1020 = fadd float %1019, 1.000000e+00, !dbg !66
  %1021 = fmul float %1017, %1020, !dbg !67
  %1022 = fmul float %1021, 2.000000e+00, !dbg !68
  %1023 = fsub float 0.000000e+00, %1022, !dbg !69
  %1024 = fmul float %1023, 0x3FF7154760000000, !dbg !72
  %1025 = tail call float @llvm.exp2.f32(float %1024), !dbg !72
  %1026 = fadd float %1025, 1.000000e+00, !dbg !73
  %1027 = fdiv float 1.000000e+00, %1026, !dbg !74
  %1028 = fmul float %1027, 2.000000e+00, !dbg !75
  %1029 = fadd float %1028, -1.000000e+00, !dbg !76
  %1030 = fadd float %1029, 1.000000e+00, !dbg !77
  %1031 = fmul float %1016, %1030, !dbg !78
  %1032 = fmul float %20, %1031, !dbg !79
  %1033 = insertelement <2 x float> %1015, float %1032, i64 1, !dbg !80
  %1034 = fptrunc <2 x float> %1033 to <2 x bfloat>, !dbg !80
  %1035 = shufflevector <2 x bfloat> %1034, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1036 = fmul float %763, 5.000000e-01, !dbg !60
  %1037 = fmul float %763, 0x3FE9884540000000, !dbg !63
  %1038 = fmul float %763, 0x3FA6E4E260000000, !dbg !64
  %1039 = fmul float %763, %1038, !dbg !65
  %1040 = fadd float %1039, 1.000000e+00, !dbg !66
  %1041 = fmul float %1037, %1040, !dbg !67
  %1042 = fmul float %1041, 2.000000e+00, !dbg !68
  %1043 = fsub float 0.000000e+00, %1042, !dbg !69
  %1044 = fmul float %1043, 0x3FF7154760000000, !dbg !72
  %1045 = tail call float @llvm.exp2.f32(float %1044), !dbg !72
  %1046 = fadd float %1045, 1.000000e+00, !dbg !73
  %1047 = fdiv float 1.000000e+00, %1046, !dbg !74
  %1048 = fmul float %1047, 2.000000e+00, !dbg !75
  %1049 = fadd float %1048, -1.000000e+00, !dbg !76
  %1050 = fadd float %1049, 1.000000e+00, !dbg !77
  %1051 = fmul float %1036, %1050, !dbg !78
  %1052 = fmul float %20, %1051, !dbg !79
  %1053 = insertelement <2 x float> poison, float %1052, i64 0, !dbg !80
  %1054 = fmul float %764, 5.000000e-01, !dbg !60
  %1055 = fmul float %764, 0x3FE9884540000000, !dbg !63
  %1056 = fmul float %764, 0x3FA6E4E260000000, !dbg !64
  %1057 = fmul float %764, %1056, !dbg !65
  %1058 = fadd float %1057, 1.000000e+00, !dbg !66
  %1059 = fmul float %1055, %1058, !dbg !67
  %1060 = fmul float %1059, 2.000000e+00, !dbg !68
  %1061 = fsub float 0.000000e+00, %1060, !dbg !69
  %1062 = fmul float %1061, 0x3FF7154760000000, !dbg !72
  %1063 = tail call float @llvm.exp2.f32(float %1062), !dbg !72
  %1064 = fadd float %1063, 1.000000e+00, !dbg !73
  %1065 = fdiv float 1.000000e+00, %1064, !dbg !74
  %1066 = fmul float %1065, 2.000000e+00, !dbg !75
  %1067 = fadd float %1066, -1.000000e+00, !dbg !76
  %1068 = fadd float %1067, 1.000000e+00, !dbg !77
  %1069 = fmul float %1054, %1068, !dbg !78
  %1070 = fmul float %20, %1069, !dbg !79
  %1071 = insertelement <2 x float> %1053, float %1070, i64 1, !dbg !80
  %1072 = fptrunc <2 x float> %1071 to <2 x bfloat>, !dbg !80
  %1073 = fmul float %761, 5.000000e-01, !dbg !60
  %1074 = fmul float %761, 0x3FE9884540000000, !dbg !63
  %1075 = fmul float %761, 0x3FA6E4E260000000, !dbg !64
  %1076 = fmul float %761, %1075, !dbg !65
  %1077 = fadd float %1076, 1.000000e+00, !dbg !66
  %1078 = fmul float %1074, %1077, !dbg !67
  %1079 = fmul float %1078, 2.000000e+00, !dbg !68
  %1080 = fsub float 0.000000e+00, %1079, !dbg !69
  %1081 = fmul float %1080, 0x3FF7154760000000, !dbg !72
  %1082 = tail call float @llvm.exp2.f32(float %1081), !dbg !72
  %1083 = fadd float %1082, 1.000000e+00, !dbg !73
  %1084 = fdiv float 1.000000e+00, %1083, !dbg !74
  %1085 = fmul float %1084, 2.000000e+00, !dbg !75
  %1086 = fadd float %1085, -1.000000e+00, !dbg !76
  %1087 = fadd float %1086, 1.000000e+00, !dbg !77
  %1088 = fmul float %1073, %1087, !dbg !78
  %1089 = fmul float %20, %1088, !dbg !79
  %1090 = insertelement <2 x float> poison, float %1089, i64 0, !dbg !80
  %1091 = fmul float %762, 5.000000e-01, !dbg !60
  %1092 = fmul float %762, 0x3FE9884540000000, !dbg !63
  %1093 = fmul float %762, 0x3FA6E4E260000000, !dbg !64
  %1094 = fmul float %762, %1093, !dbg !65
  %1095 = fadd float %1094, 1.000000e+00, !dbg !66
  %1096 = fmul float %1092, %1095, !dbg !67
  %1097 = fmul float %1096, 2.000000e+00, !dbg !68
  %1098 = fsub float 0.000000e+00, %1097, !dbg !69
  %1099 = fmul float %1098, 0x3FF7154760000000, !dbg !72
  %1100 = tail call float @llvm.exp2.f32(float %1099), !dbg !72
  %1101 = fadd float %1100, 1.000000e+00, !dbg !73
  %1102 = fdiv float 1.000000e+00, %1101, !dbg !74
  %1103 = fmul float %1102, 2.000000e+00, !dbg !75
  %1104 = fadd float %1103, -1.000000e+00, !dbg !76
  %1105 = fadd float %1104, 1.000000e+00, !dbg !77
  %1106 = fmul float %1091, %1105, !dbg !78
  %1107 = fmul float %20, %1106, !dbg !79
  %1108 = insertelement <2 x float> %1090, float %1107, i64 1, !dbg !80
  %1109 = fptrunc <2 x float> %1108 to <2 x bfloat>, !dbg !80
  %1110 = shufflevector <2 x bfloat> %1109, <2 x bfloat> %1072, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1111 = shufflevector <8 x bfloat> %1110, <8 x bfloat> %1035, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !81
  %1112 = shufflevector <8 x bfloat> %1111, <8 x bfloat> %997, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !81
  %1113 = shufflevector <2 x bfloat> %959, <2 x bfloat> %922, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !81
  %1114 = shufflevector <8 x bfloat> %1113, <8 x bfloat> %885, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !81
  %1115 = shufflevector <8 x bfloat> %1114, <8 x bfloat> %847, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !81
  %1116 = shufflevector <4 x bfloat> %801, <4 x bfloat> %802, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %1117 = shufflevector <4 x bfloat> %803, <4 x bfloat> %804, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %1118 = shufflevector <4 x bfloat> %805, <4 x bfloat> %806, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %1119 = shufflevector <4 x bfloat> %807, <4 x bfloat> %808, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !81
  %1120 = insertelement <16 x float> <float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float undef, float undef, float undef, float undef, float undef, float undef>, float %693, i64 0, !dbg !81
  %1121 = insertelement <16 x float> %1120, float %694, i64 1, !dbg !81
  %1122 = insertelement <16 x float> %1121, float %695, i64 2, !dbg !81
  %1123 = insertelement <16 x float> %1122, float %696, i64 3, !dbg !81
  %1124 = insertelement <16 x float> %1123, float %697, i64 4, !dbg !81
  %1125 = insertelement <16 x float> %1124, float %698, i64 5, !dbg !81
  %1126 = insertelement <16 x float> %1125, float %699, i64 6, !dbg !81
  %1127 = insertelement <16 x float> %1126, float %700, i64 7, !dbg !81
  %1128 = insertelement <16 x float> %1127, float %701, i64 8, !dbg !81
  %1129 = insertelement <16 x float> %1128, float %702, i64 9, !dbg !81
  %1130 = insertelement <16 x float> %1129, float %703, i64 10, !dbg !81
  %1131 = insertelement <16 x float> %1130, float %704, i64 11, !dbg !81
  %1132 = insertelement <16 x float> %1131, float %705, i64 12, !dbg !81
  %1133 = insertelement <16 x float> %1132, float %706, i64 13, !dbg !81
  %1134 = insertelement <16 x float> %1133, float %707, i64 14, !dbg !81
  %1135 = insertelement <16 x float> %1134, float %708, i64 15, !dbg !81
  %1136 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1116, <8 x bfloat> %1112, <16 x float> %1135, i32 0, i32 0, i32 0), !dbg !81
  %1137 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1117, <8 x bfloat> %1115, <16 x float> %1136, i32 0, i32 0, i32 0), !dbg !81
  %1138 = extractelement <16 x float> %1137, i64 0, !dbg !81
  %1139 = extractelement <16 x float> %1137, i64 1, !dbg !81
  %1140 = extractelement <16 x float> %1137, i64 2, !dbg !81
  %1141 = extractelement <16 x float> %1137, i64 3, !dbg !81
  %1142 = extractelement <16 x float> %1137, i64 4, !dbg !81
  %1143 = extractelement <16 x float> %1137, i64 5, !dbg !81
  %1144 = extractelement <16 x float> %1137, i64 6, !dbg !81
  %1145 = extractelement <16 x float> %1137, i64 7, !dbg !81
  %1146 = extractelement <16 x float> %1137, i64 8, !dbg !81
  %1147 = extractelement <16 x float> %1137, i64 9, !dbg !81
  %1148 = extractelement <16 x float> %1137, i64 10, !dbg !81
  %1149 = extractelement <16 x float> %1137, i64 11, !dbg !81
  %1150 = extractelement <16 x float> %1137, i64 12, !dbg !81
  %1151 = extractelement <16 x float> %1137, i64 13, !dbg !81
  %1152 = extractelement <16 x float> %1137, i64 14, !dbg !81
  %1153 = extractelement <16 x float> %1137, i64 15, !dbg !81
  %1154 = insertelement <16 x float> <float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float poison, float undef, float undef, float undef, float undef, float undef, float undef>, float %709, i64 0, !dbg !81
  %1155 = insertelement <16 x float> %1154, float %710, i64 1, !dbg !81
  %1156 = insertelement <16 x float> %1155, float %711, i64 2, !dbg !81
  %1157 = insertelement <16 x float> %1156, float %712, i64 3, !dbg !81
  %1158 = insertelement <16 x float> %1157, float %713, i64 4, !dbg !81
  %1159 = insertelement <16 x float> %1158, float %714, i64 5, !dbg !81
  %1160 = insertelement <16 x float> %1159, float %715, i64 6, !dbg !81
  %1161 = insertelement <16 x float> %1160, float %716, i64 7, !dbg !81
  %1162 = insertelement <16 x float> %1161, float %717, i64 8, !dbg !81
  %1163 = insertelement <16 x float> %1162, float %718, i64 9, !dbg !81
  %1164 = insertelement <16 x float> %1163, float %719, i64 10, !dbg !81
  %1165 = insertelement <16 x float> %1164, float %720, i64 11, !dbg !81
  %1166 = insertelement <16 x float> %1165, float %721, i64 12, !dbg !81
  %1167 = insertelement <16 x float> %1166, float %722, i64 13, !dbg !81
  %1168 = insertelement <16 x float> %1167, float %723, i64 14, !dbg !81
  %1169 = insertelement <16 x float> %1168, float %724, i64 15, !dbg !81
  %1170 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1118, <8 x bfloat> %1112, <16 x float> %1169, i32 0, i32 0, i32 0), !dbg !81
  %1171 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat> %1119, <8 x bfloat> %1115, <16 x float> %1170, i32 0, i32 0, i32 0), !dbg !81
  %1172 = extractelement <16 x float> %1171, i64 0, !dbg !81
  %1173 = extractelement <16 x float> %1171, i64 1, !dbg !81
  %1174 = extractelement <16 x float> %1171, i64 2, !dbg !81
  %1175 = extractelement <16 x float> %1171, i64 3, !dbg !81
  %1176 = extractelement <16 x float> %1171, i64 4, !dbg !81
  %1177 = extractelement <16 x float> %1171, i64 5, !dbg !81
  %1178 = extractelement <16 x float> %1171, i64 6, !dbg !81
  %1179 = extractelement <16 x float> %1171, i64 7, !dbg !81
  %1180 = extractelement <16 x float> %1171, i64 8, !dbg !81
  %1181 = extractelement <16 x float> %1171, i64 9, !dbg !81
  %1182 = extractelement <16 x float> %1171, i64 10, !dbg !81
  %1183 = extractelement <16 x float> %1171, i64 11, !dbg !81
  %1184 = extractelement <16 x float> %1171, i64 12, !dbg !81
  %1185 = extractelement <16 x float> %1171, i64 13, !dbg !81
  %1186 = extractelement <16 x float> %1171, i64 14, !dbg !81
  %1187 = extractelement <16 x float> %1171, i64 15, !dbg !81
  br label %._crit_edge7, !dbg !81

._crit_edge7:                                     ; preds = %760, %809
  %1188 = phi float [ %1187, %809 ], [ %724, %760 ], !dbg !57
  %1189 = phi float [ %1186, %809 ], [ %723, %760 ], !dbg !57
  %1190 = phi float [ %1185, %809 ], [ %722, %760 ], !dbg !57
  %1191 = phi float [ %1184, %809 ], [ %721, %760 ], !dbg !57
  %1192 = phi float [ %1183, %809 ], [ %720, %760 ], !dbg !57
  %1193 = phi float [ %1182, %809 ], [ %719, %760 ], !dbg !57
  %1194 = phi float [ %1181, %809 ], [ %718, %760 ], !dbg !57
  %1195 = phi float [ %1180, %809 ], [ %717, %760 ], !dbg !57
  %1196 = phi float [ %1179, %809 ], [ %716, %760 ], !dbg !57
  %1197 = phi float [ %1178, %809 ], [ %715, %760 ], !dbg !57
  %1198 = phi float [ %1177, %809 ], [ %714, %760 ], !dbg !57
  %1199 = phi float [ %1176, %809 ], [ %713, %760 ], !dbg !57
  %1200 = phi float [ %1175, %809 ], [ %712, %760 ], !dbg !57
  %1201 = phi float [ %1174, %809 ], [ %711, %760 ], !dbg !57
  %1202 = phi float [ %1173, %809 ], [ %710, %760 ], !dbg !57
  %1203 = phi float [ %1172, %809 ], [ %709, %760 ], !dbg !57
  %1204 = phi float [ %1153, %809 ], [ %708, %760 ], !dbg !57
  %1205 = phi float [ %1152, %809 ], [ %707, %760 ], !dbg !57
  %1206 = phi float [ %1151, %809 ], [ %706, %760 ], !dbg !57
  %1207 = phi float [ %1150, %809 ], [ %705, %760 ], !dbg !57
  %1208 = phi float [ %1149, %809 ], [ %704, %760 ], !dbg !57
  %1209 = phi float [ %1148, %809 ], [ %703, %760 ], !dbg !57
  %1210 = phi float [ %1147, %809 ], [ %702, %760 ], !dbg !57
  %1211 = phi float [ %1146, %809 ], [ %701, %760 ], !dbg !57
  %1212 = phi float [ %1145, %809 ], [ %700, %760 ], !dbg !57
  %1213 = phi float [ %1144, %809 ], [ %699, %760 ], !dbg !57
  %1214 = phi float [ %1143, %809 ], [ %698, %760 ], !dbg !57
  %1215 = phi float [ %1142, %809 ], [ %697, %760 ], !dbg !57
  %1216 = phi float [ %1141, %809 ], [ %696, %760 ], !dbg !57
  %1217 = phi float [ %1140, %809 ], [ %695, %760 ], !dbg !57
  %1218 = phi float [ %1139, %809 ], [ %694, %760 ], !dbg !57
  %1219 = phi float [ %1138, %809 ], [ %693, %760 ], !dbg !57
  %1220 = icmp slt i32 %86, %36, !dbg !82
  %1221 = insertelement <2 x float> poison, float %1219, i64 0, !dbg !83
  %1222 = insertelement <2 x float> %1221, float %1218, i64 1, !dbg !83
  %1223 = fptrunc <2 x float> %1222 to <2 x bfloat>, !dbg !83
  %1224 = insertelement <2 x float> poison, float %1217, i64 0, !dbg !83
  %1225 = insertelement <2 x float> %1224, float %1216, i64 1, !dbg !83
  %1226 = fptrunc <2 x float> %1225 to <2 x bfloat>, !dbg !83
  %1227 = insertelement <2 x float> poison, float %1215, i64 0, !dbg !83
  %1228 = insertelement <2 x float> %1227, float %1214, i64 1, !dbg !83
  %1229 = fptrunc <2 x float> %1228 to <2 x bfloat>, !dbg !83
  %1230 = insertelement <2 x float> poison, float %1213, i64 0, !dbg !83
  %1231 = insertelement <2 x float> %1230, float %1212, i64 1, !dbg !83
  %1232 = fptrunc <2 x float> %1231 to <2 x bfloat>, !dbg !83
  %1233 = insertelement <2 x float> poison, float %1211, i64 0, !dbg !83
  %1234 = insertelement <2 x float> %1233, float %1210, i64 1, !dbg !83
  %1235 = fptrunc <2 x float> %1234 to <2 x bfloat>, !dbg !83
  %1236 = insertelement <2 x float> poison, float %1209, i64 0, !dbg !83
  %1237 = insertelement <2 x float> %1236, float %1208, i64 1, !dbg !83
  %1238 = fptrunc <2 x float> %1237 to <2 x bfloat>, !dbg !83
  %1239 = insertelement <2 x float> poison, float %1207, i64 0, !dbg !83
  %1240 = insertelement <2 x float> %1239, float %1206, i64 1, !dbg !83
  %1241 = fptrunc <2 x float> %1240 to <2 x bfloat>, !dbg !83
  %1242 = insertelement <2 x float> poison, float %1205, i64 0, !dbg !83
  %1243 = insertelement <2 x float> %1242, float %1204, i64 1, !dbg !83
  %1244 = fptrunc <2 x float> %1243 to <2 x bfloat>, !dbg !83
  %1245 = insertelement <2 x float> poison, float %1203, i64 0, !dbg !83
  %1246 = insertelement <2 x float> %1245, float %1202, i64 1, !dbg !83
  %1247 = fptrunc <2 x float> %1246 to <2 x bfloat>, !dbg !83
  %1248 = insertelement <2 x float> poison, float %1201, i64 0, !dbg !83
  %1249 = insertelement <2 x float> %1248, float %1200, i64 1, !dbg !83
  %1250 = fptrunc <2 x float> %1249 to <2 x bfloat>, !dbg !83
  %1251 = insertelement <2 x float> poison, float %1199, i64 0, !dbg !83
  %1252 = insertelement <2 x float> %1251, float %1198, i64 1, !dbg !83
  %1253 = fptrunc <2 x float> %1252 to <2 x bfloat>, !dbg !83
  %1254 = insertelement <2 x float> poison, float %1197, i64 0, !dbg !83
  %1255 = insertelement <2 x float> %1254, float %1196, i64 1, !dbg !83
  %1256 = fptrunc <2 x float> %1255 to <2 x bfloat>, !dbg !83
  %1257 = insertelement <2 x float> poison, float %1195, i64 0, !dbg !83
  %1258 = insertelement <2 x float> %1257, float %1194, i64 1, !dbg !83
  %1259 = fptrunc <2 x float> %1258 to <2 x bfloat>, !dbg !83
  %1260 = insertelement <2 x float> poison, float %1193, i64 0, !dbg !83
  %1261 = insertelement <2 x float> %1260, float %1192, i64 1, !dbg !83
  %1262 = fptrunc <2 x float> %1261 to <2 x bfloat>, !dbg !83
  %1263 = insertelement <2 x float> poison, float %1191, i64 0, !dbg !83
  %1264 = insertelement <2 x float> %1263, float %1190, i64 1, !dbg !83
  %1265 = fptrunc <2 x float> %1264 to <2 x bfloat>, !dbg !83
  %1266 = insertelement <2 x float> poison, float %1189, i64 0, !dbg !83
  %1267 = insertelement <2 x float> %1266, float %1188, i64 1, !dbg !83
  %1268 = fptrunc <2 x float> %1267 to <2 x bfloat>, !dbg !83
  %1269 = bitcast <2 x bfloat> %1223 to i32, !dbg !83
  %1270 = bitcast <2 x bfloat> %1226 to i32, !dbg !83
  %1271 = bitcast <2 x bfloat> %1229 to i32, !dbg !83
  %1272 = bitcast <2 x bfloat> %1232 to i32, !dbg !83
  %1273 = bitcast <2 x bfloat> %1235 to i32, !dbg !83
  %1274 = bitcast <2 x bfloat> %1238 to i32, !dbg !83
  %1275 = bitcast <2 x bfloat> %1241 to i32, !dbg !83
  %1276 = bitcast <2 x bfloat> %1244 to i32, !dbg !83
  %1277 = bitcast <2 x bfloat> %1247 to i32, !dbg !83
  %1278 = bitcast <2 x bfloat> %1250 to i32, !dbg !83
  %1279 = bitcast <2 x bfloat> %1253 to i32, !dbg !83
  %1280 = bitcast <2 x bfloat> %1256 to i32, !dbg !83
  %1281 = bitcast <2 x bfloat> %1259 to i32, !dbg !83
  %1282 = bitcast <2 x bfloat> %1262 to i32, !dbg !83
  %1283 = bitcast <2 x bfloat> %1265 to i32, !dbg !83
  %1284 = bitcast <2 x bfloat> %1268 to i32, !dbg !83
  %1285 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1269, i32 %1271, i1 false, i1 false), !dbg !83
  %1286 = extractvalue { i32, i32 } %1285, 0, !dbg !83
  %1287 = extractvalue { i32, i32 } %1285, 1, !dbg !83
  %1288 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1270, i32 %1272, i1 false, i1 false), !dbg !83
  %1289 = extractvalue { i32, i32 } %1288, 0, !dbg !83
  %1290 = extractvalue { i32, i32 } %1288, 1, !dbg !83
  %1291 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1273, i32 %1275, i1 false, i1 false), !dbg !83
  %1292 = extractvalue { i32, i32 } %1291, 0, !dbg !83
  %1293 = extractvalue { i32, i32 } %1291, 1, !dbg !83
  %1294 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1274, i32 %1276, i1 false, i1 false), !dbg !83
  %1295 = extractvalue { i32, i32 } %1294, 0, !dbg !83
  %1296 = extractvalue { i32, i32 } %1294, 1, !dbg !83
  %1297 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1277, i32 %1279, i1 false, i1 false), !dbg !83
  %1298 = extractvalue { i32, i32 } %1297, 0, !dbg !83
  %1299 = extractvalue { i32, i32 } %1297, 1, !dbg !83
  %1300 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1278, i32 %1280, i1 false, i1 false), !dbg !83
  %1301 = extractvalue { i32, i32 } %1300, 0, !dbg !83
  %1302 = extractvalue { i32, i32 } %1300, 1, !dbg !83
  %1303 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1281, i32 %1283, i1 false, i1 false), !dbg !83
  %1304 = extractvalue { i32, i32 } %1303, 0, !dbg !83
  %1305 = extractvalue { i32, i32 } %1303, 1, !dbg !83
  %1306 = tail call { i32, i32 } @llvm.amdgcn.permlane32.swap(i32 %1282, i32 %1284, i1 false, i1 false), !dbg !83
  %1307 = extractvalue { i32, i32 } %1306, 0, !dbg !83
  %1308 = extractvalue { i32, i32 } %1306, 1, !dbg !83
  %1309 = bitcast i32 %1286 to <2 x bfloat>, !dbg !83
  %1310 = bitcast i32 %1289 to <2 x bfloat>, !dbg !83
  %1311 = bitcast i32 %1287 to <2 x bfloat>, !dbg !83
  %1312 = shufflevector <2 x bfloat> %1311, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1313 = bitcast i32 %1290 to <2 x bfloat>, !dbg !83
  %1314 = shufflevector <2 x bfloat> %1313, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1315 = bitcast i32 %1292 to <2 x bfloat>, !dbg !83
  %1316 = bitcast i32 %1295 to <2 x bfloat>, !dbg !83
  %1317 = bitcast i32 %1293 to <2 x bfloat>, !dbg !83
  %1318 = shufflevector <2 x bfloat> %1317, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1319 = bitcast i32 %1296 to <2 x bfloat>, !dbg !83
  %1320 = shufflevector <2 x bfloat> %1319, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1321 = bitcast i32 %1298 to <2 x bfloat>, !dbg !83
  %1322 = bitcast i32 %1301 to <2 x bfloat>, !dbg !83
  %1323 = bitcast i32 %1299 to <2 x bfloat>, !dbg !83
  %1324 = shufflevector <2 x bfloat> %1323, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1325 = bitcast i32 %1302 to <2 x bfloat>, !dbg !83
  %1326 = shufflevector <2 x bfloat> %1325, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1327 = bitcast i32 %1304 to <2 x bfloat>, !dbg !83
  %1328 = bitcast i32 %1307 to <2 x bfloat>, !dbg !83
  %1329 = bitcast i32 %1305 to <2 x bfloat>, !dbg !83
  %1330 = shufflevector <2 x bfloat> %1329, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1331 = bitcast i32 %1308 to <2 x bfloat>, !dbg !83
  %1332 = shufflevector <2 x bfloat> %1331, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %1333 = trunc i32 %14 to i16, !dbg !84
  %1334 = and i16 %1333, 16383, !dbg !84
  %1335 = or disjoint i16 %1334, 16384, !dbg !84
  %1336 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %108, i16 %1335, i32 2147483646, i32 159744), !dbg !84
  %1337 = shufflevector <2 x bfloat> %1309, <2 x bfloat> %1310, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1338 = shufflevector <8 x bfloat> %1337, <8 x bfloat> %1312, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %1339 = shufflevector <8 x bfloat> %1338, <8 x bfloat> %1314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %1340 = bitcast <8 x bfloat> %1339 to <4 x i32>, !dbg !84
  %1341 = shl i32 %103, 1, !dbg !84
  %1342 = select i1 %1220, i32 %1341, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1340, ptr addrspace(8) %1336, i32 %1342, i32 0, i32 0), !dbg !84
  %1343 = shufflevector <2 x bfloat> %1315, <2 x bfloat> %1316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1344 = shufflevector <8 x bfloat> %1343, <8 x bfloat> %1318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %1345 = shufflevector <8 x bfloat> %1344, <8 x bfloat> %1320, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %1346 = bitcast <8 x bfloat> %1345 to <4 x i32>, !dbg !84
  %1347 = shl i32 %104, 1, !dbg !84
  %1348 = select i1 %1220, i32 %1347, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1346, ptr addrspace(8) %1336, i32 %1348, i32 0, i32 0), !dbg !84
  %1349 = shufflevector <2 x bfloat> %1321, <2 x bfloat> %1322, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1350 = shufflevector <8 x bfloat> %1349, <8 x bfloat> %1324, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %1351 = shufflevector <8 x bfloat> %1350, <8 x bfloat> %1326, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %1352 = bitcast <8 x bfloat> %1351 to <4 x i32>, !dbg !84
  %1353 = shl i32 %105, 1, !dbg !84
  %1354 = select i1 %1220, i32 %1353, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1352, ptr addrspace(8) %1336, i32 %1354, i32 0, i32 0), !dbg !84
  %1355 = shufflevector <2 x bfloat> %1327, <2 x bfloat> %1328, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %1356 = shufflevector <8 x bfloat> %1355, <8 x bfloat> %1330, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %1357 = shufflevector <8 x bfloat> %1356, <8 x bfloat> %1332, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %1358 = bitcast <8 x bfloat> %1357 to <4 x i32>, !dbg !84
  %1359 = shl i32 %106, 1, !dbg !84
  %1360 = select i1 %1220, i32 %1359, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %1358, ptr addrspace(8) %1336, i32 %1360, i32 0, i32 0), !dbg !84
  br label %1361, !dbg !26

1361:                                             ; preds = %._crit_edge7, %24
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.bf16(<8 x bfloat>, <8 x bfloat>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #4

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) captures(none)) #5

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane32.swap(i32, i32, i1 immarg, i1 immarg) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32>, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #7

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3,8" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read) }
attributes #6 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #7 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gdpa.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 579, type: !5, scopeLine: 579, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "_gdpa_fwd", linkageName: "_gdpa_fwd", scope: !1, file: !1, line: 458, type: !5, scopeLine: 458, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 518, column: 27, scope: !7)
!9 = !DILocation(line: 522, column: 26, scope: !7)
!10 = !DILocation(line: 531, column: 24, scope: !7)
!11 = !DILocation(line: 305, column: 34, scope: !12, inlinedAt: !13)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !1, discriminator: 0)
!13 = !DILocation(line: 579, column: 8, scope: !7)
!14 = !DILocation(line: 305, column: 22, scope: !12, inlinedAt: !13)
!15 = !DILocation(line: 306, column: 42, scope: !12, inlinedAt: !13)
!16 = !DILocation(line: 306, column: 20, scope: !12, inlinedAt: !13)
!17 = !DILocation(line: 308, column: 19, scope: !12, inlinedAt: !13)
!18 = !DILocation(line: 309, column: 28, scope: !12, inlinedAt: !13)
!19 = !DILocation(line: 323, column: 42, scope: !12, inlinedAt: !13)
!20 = !DILocation(line: 323, column: 30, scope: !12, inlinedAt: !13)
!21 = !DILocation(line: 324, column: 48, scope: !12, inlinedAt: !13)
!22 = !DILocation(line: 324, column: 28, scope: !12, inlinedAt: !13)
!23 = !DILocation(line: 325, column: 23, scope: !12, inlinedAt: !13)
!24 = !DILocation(line: 330, column: 17, scope: !12, inlinedAt: !13)
!25 = !DILocation(line: 330, column: 27, scope: !12, inlinedAt: !13)
!26 = !DILocation(line: 330, column: 7, scope: !12, inlinedAt: !13)
!27 = !DILocation(line: 529, column: 21, scope: !7)
!28 = !DILocation(line: 302, column: 24, scope: !12, inlinedAt: !13)
!29 = !DILocation(line: 303, column: 40, scope: !12, inlinedAt: !13)
!30 = !DILocation(line: 302, column: 36, scope: !12, inlinedAt: !13)
!31 = !DILocation(line: 331, column: 40, scope: !12, inlinedAt: !13)
!32 = !DILocation(line: 331, column: 26, scope: !12, inlinedAt: !13)
!33 = !DILocation(line: 343, column: 25, scope: !12, inlinedAt: !13)
!34 = !DILocation(line: 343, column: 46, scope: !12, inlinedAt: !13)
!35 = !DILocation(line: 343, column: 36, scope: !12, inlinedAt: !13)
!36 = !DILocation(line: 348, column: 16, scope: !12, inlinedAt: !13)
!37 = !DILocation(line: 354, column: 25, scope: !12, inlinedAt: !13)
!38 = !DILocation(line: 354, column: 47, scope: !12, inlinedAt: !13)
!39 = !DILocation(line: 354, column: 37, scope: !12, inlinedAt: !13)
!40 = !DILocation(line: 359, column: 16, scope: !12, inlinedAt: !13)
!41 = !DILocation(line: 362, column: 25, scope: !12, inlinedAt: !13)
!42 = !DILocation(line: 362, column: 47, scope: !12, inlinedAt: !13)
!43 = !DILocation(line: 362, column: 37, scope: !12, inlinedAt: !13)
!44 = !DILocation(line: 367, column: 16, scope: !12, inlinedAt: !13)
!45 = !DILocation(line: 391, column: 50, scope: !12, inlinedAt: !13)
!46 = !DILocation(line: 391, column: 37, scope: !12, inlinedAt: !13)
!47 = !DILocation(line: 393, column: 30, scope: !12, inlinedAt: !13)
!48 = !DILocation(line: 397, column: 35, scope: !12, inlinedAt: !13)
!49 = !DILocation(line: 397, column: 14, scope: !12, inlinedAt: !13)
!50 = !DILocation(line: 398, column: 24, scope: !12, inlinedAt: !13)
!51 = !DILocation(line: 398, column: 14, scope: !12, inlinedAt: !13)
!52 = !DILocation(line: 399, column: 52, scope: !12, inlinedAt: !13)
!53 = !DILocation(line: 399, column: 15, scope: !12, inlinedAt: !13)
!54 = !DILocation(line: 413, column: 24, scope: !12, inlinedAt: !13)
!55 = !DILocation(line: 131, column: 24, scope: !12, inlinedAt: !13)
!56 = !DILocation(line: 163, column: 24, scope: !12, inlinedAt: !13)
!57 = !DILocation(line: 119, column: 33, scope: !12, inlinedAt: !13)
!58 = !DILocation(line: 169, column: 50, scope: !12, inlinedAt: !13)
!59 = !DILocation(line: 134, column: 23, scope: !12, inlinedAt: !13)
!60 = !DILocation(line: 107, column: 15, scope: !61, inlinedAt: !13)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "math.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!63 = !DILocation(line: 107, column: 58, scope: !61, inlinedAt: !13)
!64 = !DILocation(line: 107, column: 80, scope: !61, inlinedAt: !13)
!65 = !DILocation(line: 107, column: 84, scope: !61, inlinedAt: !13)
!66 = !DILocation(line: 107, column: 69, scope: !61, inlinedAt: !13)
!67 = !DILocation(line: 107, column: 63, scope: !61, inlinedAt: !13)
!68 = !DILocation(line: 67, column: 30, scope: !61, inlinedAt: !13)
!69 = !DILocation(line: 48, column: 30, scope: !70, inlinedAt: !13)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/workspace/projects/triton-openai/python/triton/language")
!72 = !DILocation(line: 48, column: 29, scope: !70, inlinedAt: !13)
!73 = !DILocation(line: 48, column: 20, scope: !70, inlinedAt: !13)
!74 = !DILocation(line: 48, column: 16, scope: !70, inlinedAt: !13)
!75 = !DILocation(line: 67, column: 15, scope: !61, inlinedAt: !13)
!76 = !DILocation(line: 67, column: 35, scope: !61, inlinedAt: !13)
!77 = !DILocation(line: 107, column: 26, scope: !61, inlinedAt: !13)
!78 = !DILocation(line: 107, column: 22, scope: !61, inlinedAt: !13)
!79 = !DILocation(line: 152, column: 13, scope: !12, inlinedAt: !13)
!80 = !DILocation(line: 153, column: 17, scope: !12, inlinedAt: !13)
!81 = !DILocation(line: 166, column: 27, scope: !12, inlinedAt: !13)
!82 = !DILocation(line: 450, column: 36, scope: !12, inlinedAt: !13)
!83 = !DILocation(line: 454, column: 32, scope: !12, inlinedAt: !13)
!84 = !DILocation(line: 454, column: 25, scope: !12, inlinedAt: !13)
!85 = !DILocation(line: 533, column: 4, scope: !7)
