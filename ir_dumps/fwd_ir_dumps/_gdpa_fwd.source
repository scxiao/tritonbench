#loc = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":458:0)
#loc28 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":253:0)
#loc95 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":72:0)
#loc112 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":106:0)
#loc124 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":85:0)
#loc128 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":65:0)
#loc135 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":47:0)
#loc142 = loc("Q"(#loc))
#loc143 = loc("Q_offsets"(#loc))
#loc144 = loc("K"(#loc))
#loc145 = loc("K_offsets"(#loc))
#loc146 = loc("V"(#loc))
#loc147 = loc("Out"(#loc))
#loc148 = loc("Out_offsets"(#loc))
#loc149 = loc("ad_to_request_offset_ptr"(#loc))
#loc150 = loc("stride_qm"(#loc))
#loc151 = loc("stride_qh"(#loc))
#loc152 = loc("stride_kn"(#loc))
#loc153 = loc("stride_kh"(#loc))
#loc154 = loc("stride_vn"(#loc))
#loc155 = loc("stride_vh"(#loc))
#loc156 = loc("stride_om"(#loc))
#loc157 = loc("stride_oh"(#loc))
#loc158 = loc("Z"(#loc))
#loc159 = loc("H"(#loc))
#loc160 = loc("N_CTX"(#loc))
#loc161 = loc("N_CTX_KV"(#loc))
#loc162 = loc("qk_scale"(#loc))
#loc163 = loc("Q_SHAPE_0"(#loc))
#loc169 = loc("Q"(#loc28))
#loc170 = loc("Q_offsets"(#loc28))
#loc171 = loc("K"(#loc28))
#loc172 = loc("K_offsets"(#loc28))
#loc173 = loc("V"(#loc28))
#loc174 = loc("Out"(#loc28))
#loc175 = loc("Out_offsets"(#loc28))
#loc176 = loc("ad_to_request_offset_ptr"(#loc28))
#loc177 = loc("stride_qm"(#loc28))
#loc178 = loc("stride_qh"(#loc28))
#loc179 = loc("stride_kn"(#loc28))
#loc180 = loc("stride_kh"(#loc28))
#loc181 = loc("stride_vn"(#loc28))
#loc182 = loc("stride_vh"(#loc28))
#loc183 = loc("stride_om"(#loc28))
#loc184 = loc("stride_oh"(#loc28))
#loc185 = loc("H"(#loc28))
#loc186 = loc("off_z"(#loc28))
#loc187 = loc("off_q_z"(#loc28))
#loc188 = loc("off_h"(#loc28))
#loc189 = loc("off_h_kv"(#loc28))
#loc190 = loc("pid"(#loc28))
#loc191 = loc("N_CTX"(#loc28))
#loc192 = loc("qk_scale"(#loc28))
#loc193 = loc("Q_SHAPE_0"(#loc28))
#loc250 = loc("acc"(#loc95))
#loc251 = loc("q"(#loc95))
#loc252 = loc("K_block_ptr"(#loc95))
#loc253 = loc("V_block_ptr"(#loc95))
#loc254 = loc("kv_offset"(#loc95))
#loc255 = loc("begin_k"(#loc95))
#loc256 = loc("stride_kn"(#loc95))
#loc257 = loc("stride_kh"(#loc95))
#loc258 = loc("start_m"(#loc95))
#loc259 = loc("offs_m"(#loc95))
#loc260 = loc("offs_n"(#loc95))
#loc261 = loc("offs_d"(#loc95))
#loc262 = loc("qlen"(#loc95))
#loc263 = loc("klen"(#loc95))
#loc264 = loc("N_CTX"(#loc95))
#loc265 = loc("qk_scale"(#loc95))
#loc278 = loc("x"(#loc112))
#loc279 = loc("x"(#loc124))
#loc280 = loc("x"(#loc128))
#loc281 = loc("x"(#loc135))
module {
  tt.func public @_gdpa_fwd(%Q: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q"(#loc)), %Q_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q_offsets"(#loc)), %K: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K"(#loc)), %K_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K_offsets"(#loc)), %V: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("V"(#loc)), %Out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out"(#loc)), %Out_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out_offsets"(#loc)), %ad_to_request_offset_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("ad_to_request_offset_ptr"(#loc)), %stride_qm: i32 {tt.divisibility = 16 : i32} loc("stride_qm"(#loc)), %stride_qh: i32 {tt.divisibility = 16 : i32} loc("stride_qh"(#loc)), %stride_kn: i32 {tt.divisibility = 16 : i32} loc("stride_kn"(#loc)), %stride_kh: i32 {tt.divisibility = 16 : i32} loc("stride_kh"(#loc)), %stride_vn: i32 {tt.divisibility = 16 : i32} loc("stride_vn"(#loc)), %stride_vh: i32 {tt.divisibility = 16 : i32} loc("stride_vh"(#loc)), %stride_om: i32 {tt.divisibility = 16 : i32} loc("stride_om"(#loc)), %stride_oh: i32 {tt.divisibility = 16 : i32} loc("stride_oh"(#loc)), %Z: i32 {tt.divisibility = 16 : i32} loc("Z"(#loc)), %H: i32 loc("H"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc)), %N_CTX_KV: i32 {tt.divisibility = 16 : i32} loc("N_CTX_KV"(#loc)), %qk_scale: f32 loc("qk_scale"(#loc)), %Q_SHAPE_0: i32 loc("Q_SHAPE_0"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.cmpi sge, %stride_qm, %c0_i32 : i32 loc(#loc1)
    llvm.intr.assume %0 : i1 loc(#loc2)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc3)
    %1 = arith.cmpi sge, %stride_qh, %c0_i32_0 : i32 loc(#loc3)
    llvm.intr.assume %1 : i1 loc(#loc4)
    %true = arith.constant true loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc5)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc6)
    %2 = arith.cmpi sge, %stride_kn, %c0_i32_1 : i32 loc(#loc6)
    llvm.intr.assume %2 : i1 loc(#loc7)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc8)
    %3 = arith.cmpi sge, %stride_kh, %c0_i32_2 : i32 loc(#loc8)
    llvm.intr.assume %3 : i1 loc(#loc9)
    %true_3 = arith.constant true loc(#loc10)
    llvm.intr.assume %true_3 : i1 loc(#loc10)
    %c0_i32_4 = arith.constant 0 : i32 loc(#loc11)
    %4 = arith.cmpi sge, %stride_vn, %c0_i32_4 : i32 loc(#loc11)
    llvm.intr.assume %4 : i1 loc(#loc12)
    %c0_i32_5 = arith.constant 0 : i32 loc(#loc13)
    %5 = arith.cmpi sge, %stride_vh, %c0_i32_5 : i32 loc(#loc13)
    llvm.intr.assume %5 : i1 loc(#loc14)
    %true_6 = arith.constant true loc(#loc15)
    llvm.intr.assume %true_6 : i1 loc(#loc15)
    %c0_i32_7 = arith.constant 0 : i32 loc(#loc16)
    %6 = arith.cmpi sge, %stride_om, %c0_i32_7 : i32 loc(#loc16)
    llvm.intr.assume %6 : i1 loc(#loc17)
    %c0_i32_8 = arith.constant 0 : i32 loc(#loc18)
    %7 = arith.cmpi sge, %stride_oh, %c0_i32_8 : i32 loc(#loc18)
    llvm.intr.assume %7 : i1 loc(#loc19)
    %true_9 = arith.constant true loc(#loc20)
    llvm.intr.assume %true_9 : i1 loc(#loc20)
    %off_hz = tt.get_program_id y : i32 loc(#loc164)
    %off_z = arith.divsi %off_hz, %H : i32 loc(#loc165)
    %off_h = arith.remsi %off_hz, %H : i32 loc(#loc166)
    %off_h_kv = arith.constant 1 : i32 loc(#loc167)
    %off_h_kv_10 = arith.constant 1 : i32 loc(#loc167)
    %off_h_kv_11 = arith.divsi %off_h, %off_h_kv_10 : i32 loc(#loc167)
    %pid = tt.get_program_id x : i32 loc(#loc168)
    tt.call @"tritonbench.operators.gdpa.gdpa._gdpa_fwd_compute__Pbf16_Pi32_Pbf16_Pi32_Pbf16_Pbf16_Pi32_Pi32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_fp32_i32__(10,)cconstexpr_1__(13,)cconstexpr_1__(16,)cconstexpr_1__(19,)cconstexpr_1__(21,)cconstexpr_1__(29,)cconstexpr_False__(31,)cconstexpr_False__(32,)cconstexpr_False__(33,)cconstexpr_64__(34,)cconstexpr_128__(35,)cconstexpr_32__(36,)cconstexpr_64__(37,)cconstexpr_1__(38,)cconstexpr_False__(39,)cconstexpr_1__(40,)cconstexpr_None__(41,)cconstexpr_False__(42,)cconstexpr_False__(43,)cconstexpr_2__(44,)cconstexpr_None__(45,)cconstexpr_None_"(%Q, %Q_offsets, %K, %K_offsets, %V, %Out, %Out_offsets, %ad_to_request_offset_ptr, %stride_qm, %stride_qh, %stride_kn, %stride_kh, %stride_vn, %stride_vh, %stride_om, %stride_oh, %H, %off_z, %off_z, %off_h, %off_h_kv_11, %pid, %N_CTX, %qk_scale, %Q_SHAPE_0) : (!tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<bf16>, !tt.ptr<bf16>, !tt.ptr<i32>, !tt.ptr<i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, f32, i32) -> () loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
  tt.func private @"tritonbench.operators.gdpa.gdpa._gdpa_fwd_compute__Pbf16_Pi32_Pbf16_Pi32_Pbf16_Pbf16_Pi32_Pi32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_i32_fp32_i32__(10,)cconstexpr_1__(13,)cconstexpr_1__(16,)cconstexpr_1__(19,)cconstexpr_1__(21,)cconstexpr_1__(29,)cconstexpr_False__(31,)cconstexpr_False__(32,)cconstexpr_False__(33,)cconstexpr_64__(34,)cconstexpr_128__(35,)cconstexpr_32__(36,)cconstexpr_64__(37,)cconstexpr_1__(38,)cconstexpr_False__(39,)cconstexpr_1__(40,)cconstexpr_None__(41,)cconstexpr_False__(42,)cconstexpr_False__(43,)cconstexpr_2__(44,)cconstexpr_None__(45,)cconstexpr_None_"(%Q: !tt.ptr<bf16> loc("Q"(#loc28)), %Q_offsets: !tt.ptr<i32> loc("Q_offsets"(#loc28)), %K: !tt.ptr<bf16> loc("K"(#loc28)), %K_offsets: !tt.ptr<i32> loc("K_offsets"(#loc28)), %V: !tt.ptr<bf16> loc("V"(#loc28)), %Out: !tt.ptr<bf16> loc("Out"(#loc28)), %Out_offsets: !tt.ptr<i32> loc("Out_offsets"(#loc28)), %ad_to_request_offset_ptr: !tt.ptr<i32> loc("ad_to_request_offset_ptr"(#loc28)), %stride_qm: i32 loc("stride_qm"(#loc28)), %stride_qh: i32 loc("stride_qh"(#loc28)), %stride_kn: i32 loc("stride_kn"(#loc28)), %stride_kh: i32 loc("stride_kh"(#loc28)), %stride_vn: i32 loc("stride_vn"(#loc28)), %stride_vh: i32 loc("stride_vh"(#loc28)), %stride_om: i32 loc("stride_om"(#loc28)), %stride_oh: i32 loc("stride_oh"(#loc28)), %H: i32 loc("H"(#loc28)), %off_z: i32 loc("off_z"(#loc28)), %off_q_z: i32 loc("off_q_z"(#loc28)), %off_h: i32 loc("off_h"(#loc28)), %off_h_kv: i32 loc("off_h_kv"(#loc28)), %pid: i32 loc("pid"(#loc28)), %N_CTX: i32 loc("N_CTX"(#loc28)), %qk_scale: f32 loc("qk_scale"(#loc28)), %Q_SHAPE_0: i32 loc("Q_SHAPE_0"(#loc28))) attributes {noinline = false} {
    %q_offset = arith.extsi %off_h : i32 to i64 loc(#loc194)
    %q_offset_0 = arith.extsi %stride_qh : i32 to i64 loc(#loc195)
    %q_offset_1 = arith.muli %q_offset, %q_offset_0 : i64 loc(#loc195)
    %kv_offset = arith.extsi %off_h_kv : i32 to i64 loc(#loc196)
    %kv_offset_2 = arith.extsi %stride_kh : i32 to i64 loc(#loc197)
    %kv_offset_3 = arith.muli %kv_offset, %kv_offset_2 : i64 loc(#loc197)
    %begin_q = tt.addptr %Q_offsets, %off_q_z : !tt.ptr<i32>, i32 loc(#loc198)
    %begin_q_4 = tt.load %begin_q : !tt.ptr<i32> loc(#loc199)
    %end_q = tt.addptr %Q_offsets, %off_q_z : !tt.ptr<i32>, i32 loc(#loc200)
    %end_q_5 = arith.constant 1 : i32 loc(#loc201)
    %end_q_6 = tt.addptr %end_q, %end_q_5 : !tt.ptr<i32>, i32 loc(#loc201)
    %end_q_7 = tt.load %end_q_6 : !tt.ptr<i32> loc(#loc202)
    %qlen = arith.extsi %end_q_7 : i32 to i64 loc(#loc203)
    %qlen_8 = arith.extsi %begin_q_4 : i32 to i64 loc(#loc203)
    %qlen_9 = arith.subi %qlen, %qlen_8 : i64 loc(#loc203)
    %qlen_10 = arith.constant 2147483647 : i64 loc(#loc203)
    %qlen_11 = arith.constant -2147483648 : i64 loc(#loc203)
    %qlen_12 = arith.cmpi sle, %qlen_9, %qlen_10 : i64 loc(#loc203)
    %qlen_13 = arith.cmpi sge, %qlen_9, %qlen_11 : i64 loc(#loc203)
    %qlen_14 = arith.andi %qlen_12, %qlen_13 : i1 loc(#loc203)
    %qlen_15 = arith.subi %end_q_7, %begin_q_4 : i32 loc(#loc203)
    %qlen_16 = arith.minsi %qlen_15, %N_CTX : i32 loc(#loc204)
    %begin_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc205)
    %begin_k_17 = tt.load %begin_k : !tt.ptr<i32> loc(#loc206)
    %end_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc207)
    %end_k_18 = arith.constant 1 : i32 loc(#loc208)
    %end_k_19 = tt.addptr %end_k, %end_k_18 : !tt.ptr<i32>, i32 loc(#loc208)
    %end_k_20 = tt.load %end_k_19 : !tt.ptr<i32> loc(#loc209)
    %klen = arith.extsi %end_k_20 : i32 to i64 loc(#loc210)
    %klen_21 = arith.extsi %begin_k_17 : i32 to i64 loc(#loc210)
    %klen_22 = arith.subi %klen, %klen_21 : i64 loc(#loc210)
    %klen_23 = arith.constant 2147483647 : i64 loc(#loc210)
    %klen_24 = arith.constant -2147483648 : i64 loc(#loc210)
    %klen_25 = arith.cmpi sle, %klen_22, %klen_23 : i64 loc(#loc210)
    %klen_26 = arith.cmpi sge, %klen_22, %klen_24 : i64 loc(#loc210)
    %klen_27 = arith.andi %klen_25, %klen_26 : i1 loc(#loc210)
    %klen_28 = arith.subi %end_k_20, %begin_k_17 : i32 loc(#loc210)
    %c128_i32 = arith.constant 128 : i32 loc(#loc46)
    %c128_i32_29 = arith.constant 128 : i32 loc(#loc46)
    %0 = arith.extsi %pid : i32 to i64 loc(#loc46)
    %1 = arith.extsi %c128_i32_29 : i32 to i64 loc(#loc46)
    %2 = arith.muli %0, %1 : i64 loc(#loc46)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc46)
    %3 = arith.cmpi sle, %2, %c2147483647_i64 : i64 loc(#loc46)
    %4 = arith.cmpi sge, %2, %c-2147483648_i64 : i64 loc(#loc46)
    %5 = arith.andi %3, %4 : i1 loc(#loc46)
    %6 = arith.muli %pid, %c128_i32_29 : i32 loc(#loc46)
    %7 = arith.cmpi slt, %6, %qlen_16 : i32 loc(#loc47)
    scf.if %7 {
      %begin_o = tt.addptr %Out_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc211)
      %begin_o_30 = tt.load %begin_o : !tt.ptr<i32> loc(#loc212)
      %Q_block_ptr = tt.addptr %Q, %q_offset_1 : !tt.ptr<bf16>, i64 loc(#loc213)
      %Q_block_ptr_31 = arith.extsi %begin_q_4 : i32 to i64 loc(#loc214)
      %Q_block_ptr_32 = arith.extsi %stride_qm : i32 to i64 loc(#loc214)
      %Q_block_ptr_33 = arith.muli %Q_block_ptr_31, %Q_block_ptr_32 : i64 loc(#loc214)
      %Q_block_ptr_34 = arith.constant 2147483647 : i64 loc(#loc214)
      %Q_block_ptr_35 = arith.constant -2147483648 : i64 loc(#loc214)
      %Q_block_ptr_36 = arith.cmpi sle, %Q_block_ptr_33, %Q_block_ptr_34 : i64 loc(#loc214)
      %Q_block_ptr_37 = arith.cmpi sge, %Q_block_ptr_33, %Q_block_ptr_35 : i64 loc(#loc214)
      %Q_block_ptr_38 = arith.andi %Q_block_ptr_36, %Q_block_ptr_37 : i1 loc(#loc214)
      %Q_block_ptr_39 = arith.muli %begin_q_4, %stride_qm : i32 loc(#loc214)
      %Q_block_ptr_40 = tt.addptr %Q_block_ptr, %Q_block_ptr_39 : !tt.ptr<bf16>, i32 loc(#loc215)
      %Q_block_ptr_41 = arith.constant 128 : i32 loc(#loc216)
      %Q_block_ptr_42 = arith.constant 128 : i32 loc(#loc216)
      %Q_block_ptr_43 = arith.extsi %pid : i32 to i64 loc(#loc216)
      %Q_block_ptr_44 = arith.extsi %Q_block_ptr_42 : i32 to i64 loc(#loc216)
      %Q_block_ptr_45 = arith.muli %Q_block_ptr_43, %Q_block_ptr_44 : i64 loc(#loc216)
      %Q_block_ptr_46 = arith.constant 2147483647 : i64 loc(#loc216)
      %Q_block_ptr_47 = arith.constant -2147483648 : i64 loc(#loc216)
      %Q_block_ptr_48 = arith.cmpi sle, %Q_block_ptr_45, %Q_block_ptr_46 : i64 loc(#loc216)
      %Q_block_ptr_49 = arith.cmpi sge, %Q_block_ptr_45, %Q_block_ptr_47 : i64 loc(#loc216)
      %Q_block_ptr_50 = arith.andi %Q_block_ptr_48, %Q_block_ptr_49 : i1 loc(#loc216)
      %Q_block_ptr_51 = arith.muli %pid, %Q_block_ptr_42 : i32 loc(#loc216)
      %Q_block_ptr_52 = arith.extsi %qlen_16 : i32 to i64 loc(#loc217)
      %Q_block_ptr_53 = arith.constant 64 : i64 loc(#loc217)
      %Q_block_ptr_54 = arith.extsi %stride_qm : i32 to i64 loc(#loc217)
      %Q_block_ptr_55 = arith.constant 1 : i64 loc(#loc217)
      %Q_block_ptr_56 = arith.constant 0 : i32 loc(#loc217)
      %Q_block_ptr_57 = tt.make_tensor_ptr %Q_block_ptr_40, [%Q_block_ptr_52, %Q_block_ptr_53], [%Q_block_ptr_54, %Q_block_ptr_55], [%Q_block_ptr_51, %Q_block_ptr_56] {order = array<i32: 1, 0>} : <tensor<128x64xbf16>> loc(#loc217)
      %V_block_ptr = tt.addptr %V, %kv_offset_3 : !tt.ptr<bf16>, i64 loc(#loc218)
      %V_block_ptr_58 = arith.extsi %begin_k_17 : i32 to i64 loc(#loc219)
      %V_block_ptr_59 = arith.extsi %stride_vn : i32 to i64 loc(#loc219)
      %V_block_ptr_60 = arith.muli %V_block_ptr_58, %V_block_ptr_59 : i64 loc(#loc219)
      %V_block_ptr_61 = arith.constant 2147483647 : i64 loc(#loc219)
      %V_block_ptr_62 = arith.constant -2147483648 : i64 loc(#loc219)
      %V_block_ptr_63 = arith.cmpi sle, %V_block_ptr_60, %V_block_ptr_61 : i64 loc(#loc219)
      %V_block_ptr_64 = arith.cmpi sge, %V_block_ptr_60, %V_block_ptr_62 : i64 loc(#loc219)
      %V_block_ptr_65 = arith.andi %V_block_ptr_63, %V_block_ptr_64 : i1 loc(#loc219)
      %V_block_ptr_66 = arith.muli %begin_k_17, %stride_vn : i32 loc(#loc219)
      %V_block_ptr_67 = tt.addptr %V_block_ptr, %V_block_ptr_66 : !tt.ptr<bf16>, i32 loc(#loc220)
      %V_block_ptr_68 = arith.extsi %klen_28 : i32 to i64 loc(#loc221)
      %V_block_ptr_69 = arith.constant 64 : i64 loc(#loc221)
      %V_block_ptr_70 = arith.extsi %stride_vn : i32 to i64 loc(#loc221)
      %V_block_ptr_71 = arith.constant 1 : i64 loc(#loc221)
      %V_block_ptr_72 = arith.constant 0 : i32 loc(#loc221)
      %V_block_ptr_73 = arith.constant 0 : i32 loc(#loc221)
      %V_block_ptr_74 = tt.make_tensor_ptr %V_block_ptr_67, [%V_block_ptr_68, %V_block_ptr_69], [%V_block_ptr_70, %V_block_ptr_71], [%V_block_ptr_72, %V_block_ptr_73] {order = array<i32: 1, 0>} : <tensor<32x64xbf16>> loc(#loc221)
      %K_block_ptr = tt.addptr %K, %kv_offset_3 : !tt.ptr<bf16>, i64 loc(#loc222)
      %K_block_ptr_75 = arith.extsi %begin_k_17 : i32 to i64 loc(#loc223)
      %K_block_ptr_76 = arith.extsi %stride_kn : i32 to i64 loc(#loc223)
      %K_block_ptr_77 = arith.muli %K_block_ptr_75, %K_block_ptr_76 : i64 loc(#loc223)
      %K_block_ptr_78 = arith.constant 2147483647 : i64 loc(#loc223)
      %K_block_ptr_79 = arith.constant -2147483648 : i64 loc(#loc223)
      %K_block_ptr_80 = arith.cmpi sle, %K_block_ptr_77, %K_block_ptr_78 : i64 loc(#loc223)
      %K_block_ptr_81 = arith.cmpi sge, %K_block_ptr_77, %K_block_ptr_79 : i64 loc(#loc223)
      %K_block_ptr_82 = arith.andi %K_block_ptr_80, %K_block_ptr_81 : i1 loc(#loc223)
      %K_block_ptr_83 = arith.muli %begin_k_17, %stride_kn : i32 loc(#loc223)
      %K_block_ptr_84 = tt.addptr %K_block_ptr, %K_block_ptr_83 : !tt.ptr<bf16>, i32 loc(#loc224)
      %K_block_ptr_85 = arith.constant 64 : i64 loc(#loc225)
      %K_block_ptr_86 = arith.extsi %klen_28 : i32 to i64 loc(#loc225)
      %K_block_ptr_87 = arith.constant 1 : i64 loc(#loc225)
      %K_block_ptr_88 = arith.extsi %stride_kn : i32 to i64 loc(#loc225)
      %K_block_ptr_89 = arith.constant 0 : i32 loc(#loc225)
      %K_block_ptr_90 = arith.constant 0 : i32 loc(#loc225)
      %K_block_ptr_91 = tt.make_tensor_ptr %K_block_ptr_84, [%K_block_ptr_85, %K_block_ptr_86], [%K_block_ptr_87, %K_block_ptr_88], [%K_block_ptr_89, %K_block_ptr_90] {order = array<i32: 0, 1>} : <tensor<64x32xbf16>> loc(#loc225)
      %offs_m = arith.constant 128 : i32 loc(#loc226)
      %offs_m_92 = arith.constant 128 : i32 loc(#loc226)
      %offs_m_93 = arith.extsi %pid : i32 to i64 loc(#loc226)
      %offs_m_94 = arith.extsi %offs_m_92 : i32 to i64 loc(#loc226)
      %offs_m_95 = arith.muli %offs_m_93, %offs_m_94 : i64 loc(#loc226)
      %offs_m_96 = arith.constant 2147483647 : i64 loc(#loc226)
      %offs_m_97 = arith.constant -2147483648 : i64 loc(#loc226)
      %offs_m_98 = arith.cmpi sle, %offs_m_95, %offs_m_96 : i64 loc(#loc226)
      %offs_m_99 = arith.cmpi sge, %offs_m_95, %offs_m_97 : i64 loc(#loc226)
      %offs_m_100 = arith.andi %offs_m_98, %offs_m_99 : i1 loc(#loc226)
      %offs_m_101 = arith.muli %pid, %offs_m_92 : i32 loc(#loc226)
      %offs_m_102 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc227)
      %offs_m_103 = tt.splat %offs_m_101 : i32 -> tensor<128xi32> loc(#loc228)
      %offs_m_104 = arith.extsi %offs_m_103 : tensor<128xi32> to tensor<128xi64> loc(#loc228)
      %offs_m_105 = arith.extsi %offs_m_102 : tensor<128xi32> to tensor<128xi64> loc(#loc228)
      %offs_m_106 = arith.addi %offs_m_104, %offs_m_105 : tensor<128xi64> loc(#loc228)
      %offs_m_107 = arith.constant 2147483647 : i64 loc(#loc228)
      %offs_m_108 = arith.constant -2147483648 : i64 loc(#loc228)
      %offs_m_109 = arith.constant dense<2147483647> : tensor<128xi64> loc(#loc228)
      %offs_m_110 = arith.cmpi sle, %offs_m_106, %offs_m_109 : tensor<128xi64> loc(#loc228)
      %offs_m_111 = arith.constant dense<-2147483648> : tensor<128xi64> loc(#loc228)
      %offs_m_112 = arith.cmpi sge, %offs_m_106, %offs_m_111 : tensor<128xi64> loc(#loc228)
      %offs_m_113 = arith.andi %offs_m_110, %offs_m_112 : tensor<128xi1> loc(#loc228)
      %offs_m_114 = arith.addi %offs_m_103, %offs_m_102 : tensor<128xi32> loc(#loc228)
      %offs_n = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc229)
      %offs_d = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc230)
      %o_ptrs = arith.extsi %off_h : i32 to i64 loc(#loc231)
      %o_ptrs_115 = arith.extsi %stride_oh : i32 to i64 loc(#loc232)
      %o_ptrs_116 = arith.muli %o_ptrs, %o_ptrs_115 : i64 loc(#loc232)
      %o_ptrs_117 = tt.addptr %Out, %o_ptrs_116 : !tt.ptr<bf16>, i64 loc(#loc233)
      %o_ptrs_118 = arith.extsi %begin_o_30 : i32 to i64 loc(#loc234)
      %o_ptrs_119 = arith.extsi %stride_om : i32 to i64 loc(#loc234)
      %o_ptrs_120 = arith.muli %o_ptrs_118, %o_ptrs_119 : i64 loc(#loc234)
      %o_ptrs_121 = arith.constant 2147483647 : i64 loc(#loc234)
      %o_ptrs_122 = arith.constant -2147483648 : i64 loc(#loc234)
      %o_ptrs_123 = arith.cmpi sle, %o_ptrs_120, %o_ptrs_121 : i64 loc(#loc234)
      %o_ptrs_124 = arith.cmpi sge, %o_ptrs_120, %o_ptrs_122 : i64 loc(#loc234)
      %o_ptrs_125 = arith.andi %o_ptrs_123, %o_ptrs_124 : i1 loc(#loc234)
      %o_ptrs_126 = arith.muli %begin_o_30, %stride_om : i32 loc(#loc234)
      %o_ptrs_127 = tt.addptr %o_ptrs_117, %o_ptrs_126 : !tt.ptr<bf16>, i32 loc(#loc235)
      %o_ptrs_128 = tt.expand_dims %offs_m_114 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc236)
      %o_ptrs_129 = tt.splat %stride_om : i32 -> tensor<128x1xi32> loc(#loc237)
      %o_ptrs_130 = arith.extsi %o_ptrs_128 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc237)
      %o_ptrs_131 = arith.extsi %o_ptrs_129 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc237)
      %o_ptrs_132 = arith.muli %o_ptrs_130, %o_ptrs_131 : tensor<128x1xi64> loc(#loc237)
      %o_ptrs_133 = arith.constant 2147483647 : i64 loc(#loc237)
      %o_ptrs_134 = arith.constant -2147483648 : i64 loc(#loc237)
      %o_ptrs_135 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc237)
      %o_ptrs_136 = arith.cmpi sle, %o_ptrs_132, %o_ptrs_135 : tensor<128x1xi64> loc(#loc237)
      %o_ptrs_137 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc237)
      %o_ptrs_138 = arith.cmpi sge, %o_ptrs_132, %o_ptrs_137 : tensor<128x1xi64> loc(#loc237)
      %o_ptrs_139 = arith.andi %o_ptrs_136, %o_ptrs_138 : tensor<128x1xi1> loc(#loc237)
      %o_ptrs_140 = arith.muli %o_ptrs_128, %o_ptrs_129 : tensor<128x1xi32> loc(#loc237)
      %o_ptrs_141 = tt.expand_dims %offs_d {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc238)
      %o_ptrs_142 = arith.constant 1 : i32 loc(#loc239)
      %o_ptrs_143 = arith.constant 1 : i32 loc(#loc239)
      %o_ptrs_144 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc239)
      %o_ptrs_145 = arith.extsi %o_ptrs_141 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc239)
      %o_ptrs_146 = arith.extsi %o_ptrs_144 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc239)
      %o_ptrs_147 = arith.muli %o_ptrs_145, %o_ptrs_146 : tensor<1x64xi64> loc(#loc239)
      %o_ptrs_148 = arith.constant 2147483647 : i64 loc(#loc239)
      %o_ptrs_149 = arith.constant -2147483648 : i64 loc(#loc239)
      %o_ptrs_150 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc239)
      %o_ptrs_151 = arith.cmpi sle, %o_ptrs_147, %o_ptrs_150 : tensor<1x64xi64> loc(#loc239)
      %o_ptrs_152 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc239)
      %o_ptrs_153 = arith.cmpi sge, %o_ptrs_147, %o_ptrs_152 : tensor<1x64xi64> loc(#loc239)
      %o_ptrs_154 = arith.andi %o_ptrs_151, %o_ptrs_153 : tensor<1x64xi1> loc(#loc239)
      %o_ptrs_155 = arith.muli %o_ptrs_141, %o_ptrs_144 : tensor<1x64xi32> loc(#loc239)
      %o_ptrs_156 = tt.broadcast %o_ptrs_140 : tensor<128x1xi32> -> tensor<128x64xi32> loc(#loc240)
      %o_ptrs_157 = tt.broadcast %o_ptrs_155 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc240)
      %o_ptrs_158 = arith.extsi %o_ptrs_156 : tensor<128x64xi32> to tensor<128x64xi64> loc(#loc240)
      %o_ptrs_159 = arith.extsi %o_ptrs_157 : tensor<128x64xi32> to tensor<128x64xi64> loc(#loc240)
      %o_ptrs_160 = arith.addi %o_ptrs_158, %o_ptrs_159 : tensor<128x64xi64> loc(#loc240)
      %o_ptrs_161 = arith.constant 2147483647 : i64 loc(#loc240)
      %o_ptrs_162 = arith.constant -2147483648 : i64 loc(#loc240)
      %o_ptrs_163 = arith.constant dense<2147483647> : tensor<128x64xi64> loc(#loc240)
      %o_ptrs_164 = arith.cmpi sle, %o_ptrs_160, %o_ptrs_163 : tensor<128x64xi64> loc(#loc240)
      %o_ptrs_165 = arith.constant dense<-2147483648> : tensor<128x64xi64> loc(#loc240)
      %o_ptrs_166 = arith.cmpi sge, %o_ptrs_160, %o_ptrs_165 : tensor<128x64xi64> loc(#loc240)
      %o_ptrs_167 = arith.andi %o_ptrs_164, %o_ptrs_166 : tensor<128x64xi1> loc(#loc240)
      %o_ptrs_168 = arith.addi %o_ptrs_156, %o_ptrs_157 : tensor<128x64xi32> loc(#loc240)
      %o_ptrs_169 = tt.splat %o_ptrs_127 : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc241)
      %o_ptrs_170 = tt.addptr %o_ptrs_169, %o_ptrs_168 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc241)
      %acc = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<128x64xf32> loc(#loc242)
      %q = tt.load %Q_block_ptr_57 {boundaryCheck = array<i32: 0, 1>, padding = 1 : i32} : !tt.ptr<tensor<128x64xbf16>> loc(#loc243)
      %acc_171 = tt.call @"tritonbench.operators.gdpa.gdpa._gdpa_fwd_inner_ws__fp32S128_64S_bf16S128_64S_Pbf16S64_32S_Pbf16S32_64S_i64_i32_i32_i32_i32_i32S128S_i32S32S_i32S64S_i32_i32_i32_fp32__(4,)cNone_(5,)cNone_(11,)cconstexpr_128__(12,)cconstexpr_64__(13,)cconstexpr_32__(14,)cconstexpr_3__(20,)cconstexpr_False__(21,)cconstexpr_None__(22,)cconstexpr_False__(23,)cconstexpr_bf16__(24,)cconstexpr_2_"(%acc, %q, %K_block_ptr_91, %V_block_ptr_74, %kv_offset_3, %begin_k_17, %stride_kn, %stride_kh, %pid, %offs_m_114, %offs_n, %offs_d, %qlen_16, %klen_28, %N_CTX, %qk_scale) : (tensor<128x64xf32>, tensor<128x64xbf16>, !tt.ptr<tensor<64x32xbf16>>, !tt.ptr<tensor<32x64xbf16>>, i64, i32, i32, i32, i32, tensor<128xi32>, tensor<32xi32>, tensor<64xi32>, i32, i32, i32, f32) -> tensor<128x64xf32> loc(#loc244)
      %o_mask = tt.expand_dims %offs_m_114 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc245)
      %o_mask_172 = tt.splat %qlen_16 : i32 -> tensor<128x1xi32> loc(#loc246)
      %o_mask_173 = arith.cmpi slt, %o_mask, %o_mask_172 : tensor<128x1xi32> loc(#loc246)
      %o_mask_174 = tt.expand_dims %offs_d {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc247)
      %o_mask_175 = arith.constant 64 : i32 loc(#loc248)
      %o_mask_176 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc248)
      %o_mask_177 = arith.cmpi slt, %o_mask_174, %o_mask_176 : tensor<1x64xi32> loc(#loc248)
      %o_mask_178 = tt.broadcast %o_mask_173 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc249)
      %o_mask_179 = tt.broadcast %o_mask_177 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc249)
      %o_mask_180 = arith.andi %o_mask_178, %o_mask_179 : tensor<128x64xi1> loc(#loc249)
      %8 = arith.truncf %acc_171 : tensor<128x64xf32> to tensor<128x64xbf16> loc(#loc88)
      tt.store %o_ptrs_170, %8, %o_mask_180 : tensor<128x64x!tt.ptr<bf16>> loc(#loc89)
    } else {
    } loc(#loc48)
    tt.return loc(#loc90)
  } loc(#loc28)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_128__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<128x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc92)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc92)
    tt.return %cst_0 : tensor<128x64xf32> loc(#loc93)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<128x64xf32> loc(#loc94)
    tt.return %0 : tensor<128x64xf32> loc(#loc94)
  } loc(#loc91)
  tt.func private @"tritonbench.operators.gdpa.gdpa._gdpa_fwd_inner_ws__fp32S128_64S_bf16S128_64S_Pbf16S64_32S_Pbf16S32_64S_i64_i32_i32_i32_i32_i32S128S_i32S32S_i32S64S_i32_i32_i32_fp32__(4,)cNone_(5,)cNone_(11,)cconstexpr_128__(12,)cconstexpr_64__(13,)cconstexpr_32__(14,)cconstexpr_3__(20,)cconstexpr_False__(21,)cconstexpr_None__(22,)cconstexpr_False__(23,)cconstexpr_bf16__(24,)cconstexpr_2_"(%acc: tensor<128x64xf32> loc("acc"(#loc95)), %q: tensor<128x64xbf16> loc("q"(#loc95)), %K_block_ptr: !tt.ptr<tensor<64x32xbf16>> loc("K_block_ptr"(#loc95)), %V_block_ptr: !tt.ptr<tensor<32x64xbf16>> loc("V_block_ptr"(#loc95)), %kv_offset: i64 loc("kv_offset"(#loc95)), %begin_k: i32 loc("begin_k"(#loc95)), %stride_kn: i32 loc("stride_kn"(#loc95)), %stride_kh: i32 loc("stride_kh"(#loc95)), %start_m: i32 loc("start_m"(#loc95)), %offs_m: tensor<128xi32> loc("offs_m"(#loc95)), %offs_n: tensor<32xi32> loc("offs_n"(#loc95)), %offs_d: tensor<64xi32> loc("offs_d"(#loc95)), %qlen: i32 loc("qlen"(#loc95)), %klen: i32 loc("klen"(#loc95)), %N_CTX: i32 loc("N_CTX"(#loc95)), %qk_scale: f32 loc("qk_scale"(#loc95))) -> tensor<128x64xf32> attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc96)
    %K_block_ptr_0 = arith.constant 0 : i32 loc(#loc266)
    %K_block_ptr_1 = tt.advance %K_block_ptr, [%K_block_ptr_0, %c0_i32] : <tensor<64x32xbf16>> loc(#loc266)
    %V_block_ptr_2 = arith.constant 0 : i32 loc(#loc267)
    %V_block_ptr_3 = tt.advance %V_block_ptr, [%c0_i32, %V_block_ptr_2] : <tensor<32x64xbf16>> loc(#loc267)
    %c32_i32 = arith.constant 32 : i32 loc(#loc99)
    %0 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc99)
    %1 = arith.bitcast %klen : i32 to i32 loc(#loc99)
    %2 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc99)
    %3 = ub.poison {tt.divisibility = dense<32> : tensor<1xi32>} : i32 loc(#loc99)
    %V_block_ptr_4:3 = scf.for %start_n = %0 to %1 step %2 iter_args(%acc_5 = %acc, %K_block_ptr_6 = %K_block_ptr_1, %V_block_ptr_7 = %V_block_ptr_3) -> (tensor<128x64xf32>, !tt.ptr<tensor<64x32xbf16>>, !tt.ptr<tensor<32x64xbf16>>)  : i32 {
      %k = tt.load %K_block_ptr_6 {boundaryCheck = array<i32: 0, 1>, padding = 1 : i32} : !tt.ptr<tensor<64x32xbf16>> loc(#loc269)
      %qk = arith.constant 0.000000e+00 : f32 loc(#loc270)
      %qk_8 = arith.constant dense<0.000000e+00> : tensor<128x32xf32> loc(#loc270)
      %qk_9 = tt.dot %q, %k, %qk_8 : tensor<128x64xbf16> * tensor<64x32xbf16> -> tensor<128x32xf32> loc(#loc270)
      %p = tt.call @tritonbench.operators.gdpa.math.fast_gelu__fp32S128_32S__(%qk_9) : (tensor<128x32xf32>) -> tensor<128x32xf32> loc(#loc271)
      %p_10 = tt.splat %qk_scale : f32 -> tensor<128x32xf32> loc(#loc272)
      %p_11 = arith.mulf %p, %p_10 : tensor<128x32xf32> loc(#loc272)
      %p_12 = arith.truncf %p_11 : tensor<128x32xf32> to tensor<128x32xbf16> loc(#loc273)
      %v = tt.load %V_block_ptr_7 {boundaryCheck = array<i32: 0, 1>, padding = 1 : i32} : !tt.ptr<tensor<32x64xbf16>> loc(#loc274)
      %acc_13 = arith.constant 0.000000e+00 : f32 loc(#loc275)
      %acc_14 = tt.dot %p_12, %v, %acc_5 : tensor<128x32xbf16> * tensor<32x64xbf16> -> tensor<128x64xf32> loc(#loc275)
      %V_block_ptr_15 = arith.constant 32 : i32 loc(#loc276)
      %V_block_ptr_16 = arith.constant 0 : i32 loc(#loc276)
      %V_block_ptr_17 = tt.advance %V_block_ptr_7, [%V_block_ptr_15, %V_block_ptr_16] : <tensor<32x64xbf16>> loc(#loc276)
      %K_block_ptr_18 = arith.constant 0 : i32 loc(#loc277)
      %K_block_ptr_19 = arith.constant 32 : i32 loc(#loc277)
      %K_block_ptr_20 = tt.advance %K_block_ptr_6, [%K_block_ptr_18, %K_block_ptr_19] : <tensor<64x32xbf16>> loc(#loc277)
      scf.yield %acc_14, %K_block_ptr_20, %V_block_ptr_17 : tensor<128x64xf32>, !tt.ptr<tensor<64x32xbf16>>, !tt.ptr<tensor<32x64xbf16>> loc(#loc109)
    } loc(#loc283)
    tt.return %V_block_ptr_4#0 : tensor<128x64xf32> loc(#loc110)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x64xf32> loc(#loc111)
    tt.return %4 : tensor<128x64xf32> loc(#loc111)
  } loc(#loc95)
  tt.func private @tritonbench.operators.gdpa.math.fast_gelu__fp32S128_32S__(%x: tensor<128x32xf32> loc("x"(#loc112))) -> tensor<128x32xf32> attributes {noinline = false} {
    %cst = arith.constant 5.000000e-01 : f32 loc(#loc113)
    %cst_0 = arith.constant 5.000000e-01 : f32 loc(#loc113)
    %cst_1 = arith.constant dense<5.000000e-01> : tensor<128x32xf32> loc(#loc113)
    %0 = arith.mulf %x, %cst_1 : tensor<128x32xf32> loc(#loc113)
    %cst_2 = arith.constant 0.797884583 : f32 loc(#loc114)
    %cst_3 = arith.constant 0.797884583 : f32 loc(#loc114)
    %cst_4 = arith.constant dense<0.797884583> : tensor<128x32xf32> loc(#loc114)
    %1 = arith.mulf %cst_4, %x : tensor<128x32xf32> loc(#loc114)
    %cst_5 = arith.constant 4.471500e-02 : f32 loc(#loc115)
    %cst_6 = arith.constant 4.471500e-02 : f32 loc(#loc115)
    %cst_7 = arith.constant dense<4.471500e-02> : tensor<128x32xf32> loc(#loc115)
    %2 = arith.mulf %cst_7, %x : tensor<128x32xf32> loc(#loc115)
    %3 = arith.mulf %2, %x : tensor<128x32xf32> loc(#loc116)
    %cst_8 = arith.constant 1.000000e+00 : f32 loc(#loc117)
    %cst_9 = arith.constant 1.000000e+00 : f32 loc(#loc117)
    %cst_10 = arith.constant dense<1.000000e+00> : tensor<128x32xf32> loc(#loc117)
    %4 = arith.addf %cst_10, %3 : tensor<128x32xf32> loc(#loc117)
    %5 = arith.mulf %1, %4 : tensor<128x32xf32> loc(#loc118)
    %6 = tt.call @tritonbench.operators.gdpa.math.tanh_approx_fp32__fp32S128_32S__(%5) : (tensor<128x32xf32>) -> tensor<128x32xf32> loc(#loc119)
    %c1_i32 = arith.constant 1 : i32 loc(#loc120)
    %cst_11 = arith.constant 1.000000e+00 : f32 loc(#loc120)
    %cst_12 = arith.constant dense<1.000000e+00> : tensor<128x32xf32> loc(#loc120)
    %7 = arith.addf %cst_12, %6 : tensor<128x32xf32> loc(#loc120)
    %8 = arith.mulf %0, %7 : tensor<128x32xf32> loc(#loc121)
    tt.return %8 : tensor<128x32xf32> loc(#loc122)
  ^bb1:  // no predecessors
    %9 = ub.poison : tensor<128x32xf32> loc(#loc123)
    tt.return %9 : tensor<128x32xf32> loc(#loc123)
  } loc(#loc112)
  tt.func private @tritonbench.operators.gdpa.math.tanh_approx_fp32__fp32S128_32S__(%x: tensor<128x32xf32> loc("x"(#loc124))) -> tensor<128x32xf32> attributes {noinline = false} {
    %0 = tt.call @tritonbench.operators.gdpa.math.tanh__fp32S128_32S__(%x) : (tensor<128x32xf32>) -> tensor<128x32xf32> loc(#loc125)
    tt.return %0 : tensor<128x32xf32> loc(#loc126)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<128x32xf32> loc(#loc127)
    tt.return %1 : tensor<128x32xf32> loc(#loc127)
  } loc(#loc124)
  tt.func private @tritonbench.operators.gdpa.math.tanh__fp32S128_32S__(%x: tensor<128x32xf32> loc("x"(#loc128))) -> tensor<128x32xf32> attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc129)
    %cst = arith.constant 2.000000e+00 : f32 loc(#loc129)
    %cst_0 = arith.constant dense<2.000000e+00> : tensor<128x32xf32> loc(#loc129)
    %0 = arith.mulf %cst_0, %x : tensor<128x32xf32> loc(#loc129)
    %1 = tt.call @triton.language.standard.sigmoid__fp32S128_32S__(%0) : (tensor<128x32xf32>) -> tensor<128x32xf32> loc(#loc130)
    %c2_i32_1 = arith.constant 2 : i32 loc(#loc131)
    %cst_2 = arith.constant 2.000000e+00 : f32 loc(#loc131)
    %cst_3 = arith.constant dense<2.000000e+00> : tensor<128x32xf32> loc(#loc131)
    %2 = arith.mulf %cst_3, %1 : tensor<128x32xf32> loc(#loc131)
    %c1_i32 = arith.constant 1 : i32 loc(#loc132)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc132)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<128x32xf32> loc(#loc132)
    %3 = arith.subf %2, %cst_5 : tensor<128x32xf32> loc(#loc132)
    tt.return %3 : tensor<128x32xf32> loc(#loc133)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x32xf32> loc(#loc134)
    tt.return %4 : tensor<128x32xf32> loc(#loc134)
  } loc(#loc128)
  tt.func private @triton.language.standard.sigmoid__fp32S128_32S__(%x: tensor<128x32xf32> loc("x"(#loc135))) -> tensor<128x32xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc136)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x32xf32> loc(#loc136)
    %0 = arith.subf %cst_0, %x : tensor<128x32xf32> loc(#loc136)
    %1 = math.exp %0 : tensor<128x32xf32> loc(#loc137)
    %c1_i32 = arith.constant 1 : i32 loc(#loc138)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc138)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128x32xf32> loc(#loc138)
    %2 = arith.addf %cst_2, %1 : tensor<128x32xf32> loc(#loc138)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc139)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc139)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<128x32xf32> loc(#loc139)
    %3 = arith.divf %cst_5, %2 : tensor<128x32xf32> loc(#loc139)
    tt.return %3 : tensor<128x32xf32> loc(#loc140)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128x32xf32> loc(#loc141)
    tt.return %4 : tensor<128x32xf32> loc(#loc141)
  } loc(#loc135)
} loc(#loc)
#loc1 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":505:27)
#loc2 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":505:14)
#loc3 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":506:27)
#loc4 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":506:14)
#loc5 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":507:14)
#loc6 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":508:27)
#loc7 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":508:14)
#loc8 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":509:27)
#loc9 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":509:14)
#loc10 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":510:14)
#loc11 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":511:27)
#loc12 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":511:14)
#loc13 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":512:27)
#loc14 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":512:14)
#loc15 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":513:14)
#loc16 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":514:27)
#loc17 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":514:14)
#loc18 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":515:27)
#loc19 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":515:14)
#loc20 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":516:14)
#loc21 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":518:27)
#loc22 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":522:26)
#loc23 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":529:21)
#loc24 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":530:24)
#loc25 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":531:24)
#loc26 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":579:8)
#loc27 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":533:4)
#loc29 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":302:24)
#loc30 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":302:36)
#loc31 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":303:28)
#loc32 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":303:40)
#loc33 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:34)
#loc34 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:22)
#loc35 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":306:32)
#loc36 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":306:42)
#loc37 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":306:20)
#loc38 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":308:19)
#loc39 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":309:28)
#loc40 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:42)
#loc41 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:30)
#loc42 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:40)
#loc43 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:48)
#loc44 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:28)
#loc45 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":325:23)
#loc46 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:17)
#loc47 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:27)
#loc48 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:7)
#loc49 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":331:40)
#loc50 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":331:26)
#loc51 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:25)
#loc52 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:46)
#loc53 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":343:36)
#loc54 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":346:35)
#loc55 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":348:16)
#loc56 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:25)
#loc57 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:47)
#loc58 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":354:37)
#loc59 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":359:16)
#loc60 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:25)
#loc61 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:47)
#loc62 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":362:37)
#loc63 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":367:16)
#loc64 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":391:27)
#loc65 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":391:50)
#loc66 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":391:37)
#loc67 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":392:30)
#loc68 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":393:30)
#loc69 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:23)
#loc70 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:35)
#loc71 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:14)
#loc72 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:24)
#loc73 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:14)
#loc74 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:22)
#loc75 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:33)
#loc76 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:52)
#loc77 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:63)
#loc78 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:45)
#loc79 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":399:15)
#loc80 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":402:23)
#loc81 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":413:24)
#loc82 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":446:12)
#loc83 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:25)
#loc84 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:36)
#loc85 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:52)
#loc86 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:63)
#loc87 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":450:45)
#loc88 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":454:32)
#loc89 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":454:25)
#loc90 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:4)
#loc91 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":118:0)
#loc92 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:31)
#loc93 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:11)
#loc94 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":127:4)
#loc96 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":109:17)
#loc97 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":115:46)
#loc98 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":116:46)
#loc99 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":119:33)
#loc100 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":131:24)
#loc101 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":134:23)
#loc102 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":147:26)
#loc103 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":152:13)
#loc104 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":153:17)
#loc105 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":163:24)
#loc106 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":166:27)
#loc107 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":169:50)
#loc108 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":170:50)
#loc109 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":168:8)
#loc110 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":171:11)
#loc111 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":171:4)
#loc113 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:15)
#loc114 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:58)
#loc115 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:80)
#loc116 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:84)
#loc117 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:69)
#loc118 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:63)
#loc119 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:43)
#loc120 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:26)
#loc121 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:22)
#loc122 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:11)
#loc123 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:4)
#loc125 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:16)
#loc126 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:11)
#loc127 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:4)
#loc129 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:30)
#loc130 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:26)
#loc131 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:15)
#loc132 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:35)
#loc133 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:11)
#loc134 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:4)
#loc136 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:30)
#loc137 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:29)
#loc138 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:20)
#loc139 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:16)
#loc140 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:11)
#loc141 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:4)
#loc164 = loc("off_hz"(#loc21))
#loc165 = loc("off_z"(#loc22))
#loc166 = loc("off_h"(#loc23))
#loc167 = loc("off_h_kv"(#loc24))
#loc168 = loc("pid"(#loc25))
#loc194 = loc("q_offset"(#loc29))
#loc195 = loc("q_offset"(#loc30))
#loc196 = loc("kv_offset"(#loc31))
#loc197 = loc("kv_offset"(#loc32))
#loc198 = loc("begin_q"(#loc33))
#loc199 = loc("begin_q"(#loc34))
#loc200 = loc("end_q"(#loc35))
#loc201 = loc("end_q"(#loc36))
#loc202 = loc("end_q"(#loc37))
#loc203 = loc("qlen"(#loc38))
#loc204 = loc("qlen"(#loc39))
#loc205 = loc("begin_k"(#loc40))
#loc206 = loc("begin_k"(#loc41))
#loc207 = loc("end_k"(#loc42))
#loc208 = loc("end_k"(#loc43))
#loc209 = loc("end_k"(#loc44))
#loc210 = loc("klen"(#loc45))
#loc211 = loc("begin_o"(#loc49))
#loc212 = loc("begin_o"(#loc50))
#loc213 = loc("Q_block_ptr"(#loc51))
#loc214 = loc("Q_block_ptr"(#loc52))
#loc215 = loc("Q_block_ptr"(#loc53))
#loc216 = loc("Q_block_ptr"(#loc54))
#loc217 = loc("Q_block_ptr"(#loc55))
#loc218 = loc("V_block_ptr"(#loc56))
#loc219 = loc("V_block_ptr"(#loc57))
#loc220 = loc("V_block_ptr"(#loc58))
#loc221 = loc("V_block_ptr"(#loc59))
#loc222 = loc("K_block_ptr"(#loc60))
#loc223 = loc("K_block_ptr"(#loc61))
#loc224 = loc("K_block_ptr"(#loc62))
#loc225 = loc("K_block_ptr"(#loc63))
#loc226 = loc("offs_m"(#loc64))
#loc227 = loc("offs_m"(#loc65))
#loc228 = loc("offs_m"(#loc66))
#loc229 = loc("offs_n"(#loc67))
#loc230 = loc("offs_d"(#loc68))
#loc231 = loc("o_ptrs"(#loc69))
#loc232 = loc("o_ptrs"(#loc70))
#loc233 = loc("o_ptrs"(#loc71))
#loc234 = loc("o_ptrs"(#loc72))
#loc235 = loc("o_ptrs"(#loc73))
#loc236 = loc("o_ptrs"(#loc74))
#loc237 = loc("o_ptrs"(#loc75))
#loc238 = loc("o_ptrs"(#loc76))
#loc239 = loc("o_ptrs"(#loc77))
#loc240 = loc("o_ptrs"(#loc78))
#loc241 = loc("o_ptrs"(#loc79))
#loc242 = loc("acc"(#loc80))
#loc243 = loc("q"(#loc81))
#loc244 = loc("acc"(#loc82))
#loc245 = loc("o_mask"(#loc83))
#loc246 = loc("o_mask"(#loc84))
#loc247 = loc("o_mask"(#loc85))
#loc248 = loc("o_mask"(#loc86))
#loc249 = loc("o_mask"(#loc87))
#loc266 = loc("K_block_ptr"(#loc97))
#loc267 = loc("V_block_ptr"(#loc98))
#loc268 = loc("acc"(#loc99))
#loc269 = loc("k"(#loc100))
#loc270 = loc("qk"(#loc101))
#loc271 = loc("p"(#loc102))
#loc272 = loc("p"(#loc103))
#loc273 = loc("p"(#loc104))
#loc274 = loc("v"(#loc105))
#loc275 = loc("acc"(#loc106))
#loc276 = loc("V_block_ptr"(#loc107))
#loc277 = loc("K_block_ptr"(#loc108))
#loc282 = loc("K_block_ptr"(#loc268))
#loc283 = loc("V_block_ptr"(#loc282))
