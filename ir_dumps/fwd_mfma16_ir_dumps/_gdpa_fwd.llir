; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128:128:48-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare !dbg !4 float @llvm.exp2.f32(float) #0

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_gdpa_fwd(ptr addrspace(1) inreg readonly captures(none) %0, ptr addrspace(1) inreg readonly captures(none) %1, ptr addrspace(1) inreg readonly captures(none) %2, ptr addrspace(1) inreg readonly captures(none) %3, ptr addrspace(1) inreg readonly captures(none) %4, ptr addrspace(1) inreg writeonly captures(none) %5, ptr addrspace(1) inreg readonly captures(none) %6, ptr addrspace(1) inreg readnone captures(none) %7, i32 inreg %8, i32 inreg %9, i32 inreg %10, i32 inreg %11, i32 inreg %12, i32 inreg %13, i32 inreg %14, i32 inreg %15, i32 inreg %16, i32 inreg %17, i32 inreg %18, i32 inreg %19, float inreg %20, i32 inreg %21, ptr addrspace(1) inreg readnone captures(none) %22, ptr addrspace(1) inreg readnone captures(none) %23) local_unnamed_addr #1 !dbg !7 {
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !8
  %.frozen = freeze i32 %17, !dbg !9
  %26 = sdiv i32 %25, %.frozen, !dbg !9
  %27 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !10
  %28 = sext i32 %26 to i64, !dbg !11
  %29 = getelementptr i32, ptr addrspace(1) %1, i64 %28, !dbg !11
  %30 = load <1 x i32>, ptr addrspace(1) %29, align 4, !dbg !14
  %31 = getelementptr i8, ptr addrspace(1) %29, i64 4, !dbg !15
  %32 = load <1 x i32>, ptr addrspace(1) %31, align 4, !dbg !16
  %33 = extractelement <1 x i32> %32, i64 0, !dbg !17
  %34 = extractelement <1 x i32> %30, i64 0, !dbg !17
  %35 = sub i32 %33, %34, !dbg !17
  %36 = tail call i32 @llvm.smin.i32(i32 %35, i32 %18), !dbg !18
  %37 = getelementptr i32, ptr addrspace(1) %3, i64 %28, !dbg !19
  %38 = load <1 x i32>, ptr addrspace(1) %37, align 4, !dbg !20
  %39 = getelementptr i8, ptr addrspace(1) %37, i64 4, !dbg !21
  %40 = load <1 x i32>, ptr addrspace(1) %39, align 4, !dbg !22
  %41 = extractelement <1 x i32> %40, i64 0, !dbg !23
  %42 = extractelement <1 x i32> %38, i64 0, !dbg !23
  %43 = sub i32 %41, %42, !dbg !23
  %44 = shl i32 %27, 7, !dbg !24
  %45 = icmp slt i32 %44, %36, !dbg !25
  br i1 %45, label %46, label %858, !dbg !26

46:                                               ; preds = %24
  %47 = extractelement <1 x i32> %38, i64 0, !dbg !20
  %48 = extractelement <1 x i32> %30, i64 0, !dbg !14
  %49 = mul i32 %26, %.frozen, !dbg !27
  %.decomposed = sub i32 %25, %49, !dbg !27
  %50 = sext i32 %.decomposed to i64, !dbg !28
  %51 = sext i32 %11 to i64, !dbg !29
  %52 = mul nsw i64 %50, %51, !dbg !29
  %53 = sext i32 %9 to i64, !dbg !30
  %54 = mul nsw i64 %50, %53, !dbg !30
  %55 = getelementptr i32, ptr addrspace(1) %6, i64 %28, !dbg !31
  %56 = load <1 x i32>, ptr addrspace(1) %55, align 4, !dbg !32
  %57 = extractelement <1 x i32> %56, i64 0, !dbg !32
  %58 = getelementptr bfloat, ptr addrspace(1) %0, i64 %54, !dbg !33
  %59 = mul i32 %48, %8, !dbg !34
  %60 = sext i32 %59 to i64, !dbg !35
  %61 = getelementptr bfloat, ptr addrspace(1) %58, i64 %60, !dbg !35
  %62 = sext i32 %36 to i64, !dbg !36
  %63 = sext i32 %8 to i64, !dbg !36
  %64 = sext i32 %44 to i64, !dbg !36
  %65 = getelementptr bfloat, ptr addrspace(1) %4, i64 %52, !dbg !37
  %66 = mul i32 %47, %12, !dbg !38
  %67 = sext i32 %66 to i64, !dbg !39
  %68 = getelementptr bfloat, ptr addrspace(1) %65, i64 %67, !dbg !39
  %69 = sext i32 %43 to i64, !dbg !40
  %70 = sext i32 %12 to i64, !dbg !40
  %71 = getelementptr bfloat, ptr addrspace(1) %2, i64 %52, !dbg !41
  %72 = mul i32 %47, %10, !dbg !42
  %73 = sext i32 %72 to i64, !dbg !43
  %74 = getelementptr bfloat, ptr addrspace(1) %71, i64 %73, !dbg !43
  %75 = sext i32 %10 to i64, !dbg !44
  %76 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !45
  %77 = and i32 %76, 15, !dbg !45
  %78 = and i32 %76, 192, !dbg !45
  %79 = lshr exact i32 %78, 2, !dbg !45
  %80 = or disjoint i32 %79, %77, !dbg !45
  %81 = or disjoint i32 %80, 64, !dbg !45
  %82 = lshr i32 %76, 3, !dbg !45
  %83 = and i32 %82, 31, !dbg !45
  %84 = or disjoint i32 %83, 32, !dbg !45
  %85 = or disjoint i32 %83, 64, !dbg !45
  %86 = or i32 %82, 96, !dbg !45
  %87 = or disjoint i32 %80, %44, !dbg !46
  %88 = or disjoint i32 %81, %44, !dbg !46
  %89 = shl nuw nsw i32 %76, 3, !dbg !47
  %90 = and i32 %89, 56, !dbg !47
  %91 = sext i32 %15 to i64, !dbg !48
  %92 = mul nsw i64 %50, %91, !dbg !48
  %93 = getelementptr bfloat, ptr addrspace(1) %5, i64 %92, !dbg !49
  %94 = mul i32 %57, %14, !dbg !50
  %95 = sext i32 %94 to i64, !dbg !51
  %96 = getelementptr bfloat, ptr addrspace(1) %93, i64 %95, !dbg !51
  %97 = and i32 %76, 16, !dbg !52
  %98 = lshr i32 %76, 2, !dbg !52
  %99 = and i32 %98, 8, !dbg !52
  %100 = or disjoint i32 %99, %97, !dbg !52
  %101 = or disjoint i32 %100, 32, !dbg !52
  %102 = mul i32 %14, %44, !dbg !53
  %103 = mul i32 %14, %80, !dbg !53
  %104 = mul i32 %14, %81, !dbg !53
  %105 = add i32 %103, %100, !dbg !53
  %106 = add i32 %103, %101, !dbg !53
  %107 = add i32 %104, %100, !dbg !53
  %108 = add i32 %104, %101, !dbg !53
  %109 = sext i32 %102 to i64, !dbg !53
  %110 = getelementptr bfloat, ptr addrspace(1) %96, i64 %109, !dbg !53
  %111 = zext nneg i32 %83 to i64, !dbg !54
  %112 = zext nneg i32 %84 to i64, !dbg !54
  %113 = zext nneg i32 %85 to i64, !dbg !54
  %114 = zext nneg i32 %86 to i64, !dbg !54
  %115 = or disjoint i64 %111, %64, !dbg !54
  %116 = or disjoint i64 %112, %64, !dbg !54
  %117 = or disjoint i64 %113, %64, !dbg !54
  %118 = or disjoint i64 %114, %64, !dbg !54
  %119 = mul nsw i64 %63, %64, !dbg !54
  %120 = mul i32 %8, %83, !dbg !54
  %121 = mul i32 %8, %84, !dbg !54
  %122 = mul i32 %8, %85, !dbg !54
  %123 = mul i32 %8, %86, !dbg !54
  %124 = add i32 %120, %90, !dbg !54
  %125 = add i32 %121, %90, !dbg !54
  %126 = add i32 %122, %90, !dbg !54
  %127 = add i32 %123, %90, !dbg !54
  %128 = getelementptr bfloat, ptr addrspace(1) %61, i64 %119, !dbg !54
  %129 = icmp sgt i32 %44, -1, !dbg !54
  %130 = icmp slt i64 %115, %62, !dbg !54
  %131 = icmp slt i64 %116, %62, !dbg !54
  %132 = icmp slt i64 %117, %62, !dbg !54
  %133 = icmp slt i64 %118, %62, !dbg !54
  %134 = and i1 %129, %130, !dbg !54
  %135 = and i1 %129, %131, !dbg !54
  %136 = and i1 %129, %132, !dbg !54
  %137 = and i1 %129, %133, !dbg !54
  %138 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %128, i16 0, i32 2147483646, i32 159744), !dbg !54
  %139 = shl i32 %124, 1, !dbg !54
  %140 = select i1 %134, i32 %139, i32 -2147483648, !dbg !54
  %141 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %138, i32 %140, i32 0, i32 0), !dbg !54
  %142 = shl i32 %125, 1, !dbg !54
  %143 = select i1 %135, i32 %142, i32 -2147483648, !dbg !54
  %144 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %138, i32 %143, i32 0, i32 0), !dbg !54
  %145 = shl i32 %126, 1, !dbg !54
  %146 = select i1 %136, i32 %145, i32 -2147483648, !dbg !54
  %147 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %138, i32 %146, i32 0, i32 0), !dbg !54
  %148 = shl i32 %127, 1, !dbg !54
  %149 = select i1 %137, i32 %148, i32 -2147483648, !dbg !54
  %150 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %138, i32 %149, i32 0, i32 0), !dbg !54
  %151 = shl nuw nsw i32 %76, 4, !dbg !54
  %152 = and i32 %151, 4080, !dbg !54
  %153 = and i32 %76, 112, !dbg !54
  %154 = xor i32 %152, %153, !dbg !54
  %155 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %154, !dbg !54
  store <4 x i32> %141, ptr addrspace(3) %155, align 16, !dbg !54
  %156 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 4096, !dbg !54
  store <4 x i32> %144, ptr addrspace(3) %156, align 16, !dbg !54
  %157 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8192, !dbg !54
  store <4 x i32> %147, ptr addrspace(3) %157, align 16, !dbg !54
  %158 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 12288, !dbg !54
  store <4 x i32> %150, ptr addrspace(3) %158, align 16, !dbg !54
  fence syncscope("workgroup") release, !dbg !54
  tail call void @llvm.amdgcn.s.barrier(), !dbg !54
  fence syncscope("workgroup") acquire, !dbg !54
  %159 = shl nuw nsw i32 %77, 7, !dbg !54
  %160 = shl nuw nsw i32 %78, 5, !dbg !54
  %161 = and i32 %89, 112, !dbg !54
  %162 = and i32 %76, 48, !dbg !54
  %163 = xor i32 %161, %162, !dbg !54
  %164 = or disjoint i32 %163, %160, !dbg !54
  %165 = or disjoint i32 %164, %159, !dbg !54
  %166 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %165, !dbg !54
  %167 = load <8 x bfloat>, ptr addrspace(3) %166, align 16, !dbg !54
  %168 = getelementptr inbounds nuw i8, ptr addrspace(3) %166, i32 8192, !dbg !54
  %169 = load <8 x bfloat>, ptr addrspace(3) %168, align 16, !dbg !54
  %170 = xor i32 %165, 64, !dbg !54
  %171 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %170, !dbg !54
  %172 = load <8 x bfloat>, ptr addrspace(3) %171, align 16, !dbg !54
  %173 = getelementptr inbounds nuw i8, ptr addrspace(3) %171, i32 8192, !dbg !54
  %174 = load <8 x bfloat>, ptr addrspace(3) %173, align 16, !dbg !54
  %175 = icmp sgt i32 %43, 0, !dbg !55
  br i1 %175, label %.lr.ph, label %._crit_edge, !dbg !55

.lr.ph:                                           ; preds = %46
  %176 = mul i32 %10, %83
  %177 = add i32 %176, %90
  %178 = shl i32 %177, 1
  %179 = or disjoint i32 %159, %161
  %180 = xor i32 %179, %162
  %181 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %180
  %182 = getelementptr inbounds nuw i8, ptr addrspace(3) %181, i32 2048
  %183 = xor i32 %180, 64
  %184 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %183
  %185 = getelementptr inbounds nuw i8, ptr addrspace(3) %184, i32 2048
  %186 = mul i32 %12, %83
  %187 = add i32 %186, %90
  %188 = shl i32 %187, 1
  %189 = lshr exact i32 %153, 1
  %190 = xor i32 %152, %189
  %191 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %190
  %192 = xor i32 %190, 8
  %193 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %192
  %194 = and i32 %151, 960
  %195 = shl nuw nsw i32 %76, 2
  %196 = and i32 %195, 12
  %197 = lshr i32 %76, 1
  %198 = and i32 %197, 28
  %199 = or disjoint i32 %194, %196
  %200 = xor i32 %199, %198
  %201 = xor i32 %200, 16
  %202 = xor i32 %200, 1040
  %203 = xor i32 %200, 48
  %204 = xor i32 %200, 1072
  %205 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %200
  %206 = getelementptr inbounds nuw i8, ptr addrspace(3) %205, i32 2048
  %207 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %201
  %208 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %202
  %209 = getelementptr inbounds nuw i8, ptr addrspace(3) %205, i32 64
  %210 = getelementptr inbounds nuw i8, ptr addrspace(3) %205, i32 2112
  %211 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %203
  %212 = getelementptr inbounds nuw bfloat, ptr addrspace(3) @global_smem, i32 %204
  br label %213, !dbg !55

213:                                              ; preds = %.lr.ph, %213
  %214 = phi i64 [ 0, %.lr.ph ], [ %682, %213 ]
  %215 = phi float [ 0.000000e+00, %.lr.ph ], [ %615, %213 ]
  %216 = phi float [ 0.000000e+00, %.lr.ph ], [ %616, %213 ]
  %217 = phi float [ 0.000000e+00, %.lr.ph ], [ %617, %213 ]
  %218 = phi float [ 0.000000e+00, %.lr.ph ], [ %618, %213 ]
  %219 = phi float [ 0.000000e+00, %.lr.ph ], [ %624, %213 ]
  %220 = phi float [ 0.000000e+00, %.lr.ph ], [ %625, %213 ]
  %221 = phi float [ 0.000000e+00, %.lr.ph ], [ %626, %213 ]
  %222 = phi float [ 0.000000e+00, %.lr.ph ], [ %627, %213 ]
  %223 = phi float [ 0.000000e+00, %.lr.ph ], [ %633, %213 ]
  %224 = phi float [ 0.000000e+00, %.lr.ph ], [ %634, %213 ]
  %225 = phi float [ 0.000000e+00, %.lr.ph ], [ %635, %213 ]
  %226 = phi float [ 0.000000e+00, %.lr.ph ], [ %636, %213 ]
  %227 = phi float [ 0.000000e+00, %.lr.ph ], [ %642, %213 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %643, %213 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %644, %213 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %645, %213 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %651, %213 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %652, %213 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %653, %213 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %654, %213 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %660, %213 ]
  %236 = phi float [ 0.000000e+00, %.lr.ph ], [ %661, %213 ]
  %237 = phi float [ 0.000000e+00, %.lr.ph ], [ %662, %213 ]
  %238 = phi float [ 0.000000e+00, %.lr.ph ], [ %663, %213 ]
  %239 = phi float [ 0.000000e+00, %.lr.ph ], [ %669, %213 ]
  %240 = phi float [ 0.000000e+00, %.lr.ph ], [ %670, %213 ]
  %241 = phi float [ 0.000000e+00, %.lr.ph ], [ %671, %213 ]
  %242 = phi float [ 0.000000e+00, %.lr.ph ], [ %672, %213 ]
  %243 = phi float [ 0.000000e+00, %.lr.ph ], [ %678, %213 ]
  %244 = phi float [ 0.000000e+00, %.lr.ph ], [ %679, %213 ]
  %245 = phi float [ 0.000000e+00, %.lr.ph ], [ %680, %213 ]
  %246 = phi float [ 0.000000e+00, %.lr.ph ], [ %681, %213 ]
  %247 = or disjoint i64 %214, %111, !dbg !56
  %248 = mul i64 %214, %75, !dbg !56
  %249 = getelementptr bfloat, ptr addrspace(1) %74, i64 %248, !dbg !56
  %250 = icmp sgt i64 %214, -1, !dbg !56
  %251 = icmp slt i64 %247, %69, !dbg !56
  %252 = and i1 %250, %251, !dbg !56
  %253 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %249, i16 0, i32 2147483646, i32 159744), !dbg !56
  %254 = select i1 %252, i32 %178, i32 -2147483648, !dbg !56
  %255 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %253, i32 %254, i32 0, i32 0), !dbg !56
  fence syncscope("workgroup") release, !dbg !56
  tail call void @llvm.amdgcn.s.barrier(), !dbg !56
  fence syncscope("workgroup") acquire, !dbg !56
  store <4 x i32> %255, ptr addrspace(3) %155, align 16, !dbg !56
  fence syncscope("workgroup") release, !dbg !56
  tail call void @llvm.amdgcn.s.barrier(), !dbg !56
  fence syncscope("workgroup") acquire, !dbg !56
  %256 = load <8 x bfloat>, ptr addrspace(3) %181, align 16, !dbg !56
  %257 = load <8 x bfloat>, ptr addrspace(3) %182, align 16, !dbg !56
  %258 = load <8 x bfloat>, ptr addrspace(3) %184, align 16, !dbg !56
  %259 = load <8 x bfloat>, ptr addrspace(3) %185, align 16, !dbg !56
  %260 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %256, <8 x bfloat> %167, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !57
  %261 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %258, <8 x bfloat> %172, <4 x float> %260, i32 0, i32 0, i32 0), !dbg !57
  %262 = extractelement <4 x float> %261, i64 0, !dbg !57
  %263 = extractelement <4 x float> %261, i64 1, !dbg !57
  %264 = extractelement <4 x float> %261, i64 2, !dbg !57
  %265 = extractelement <4 x float> %261, i64 3, !dbg !57
  %266 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %257, <8 x bfloat> %167, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !57
  %267 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %259, <8 x bfloat> %172, <4 x float> %266, i32 0, i32 0, i32 0), !dbg !57
  %268 = extractelement <4 x float> %267, i64 0, !dbg !57
  %269 = extractelement <4 x float> %267, i64 1, !dbg !57
  %270 = extractelement <4 x float> %267, i64 2, !dbg !57
  %271 = extractelement <4 x float> %267, i64 3, !dbg !57
  %272 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %256, <8 x bfloat> %169, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !57
  %273 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %258, <8 x bfloat> %174, <4 x float> %272, i32 0, i32 0, i32 0), !dbg !57
  %274 = extractelement <4 x float> %273, i64 0, !dbg !57
  %275 = extractelement <4 x float> %273, i64 1, !dbg !57
  %276 = extractelement <4 x float> %273, i64 2, !dbg !57
  %277 = extractelement <4 x float> %273, i64 3, !dbg !57
  %278 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %257, <8 x bfloat> %169, <4 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !57
  %279 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %259, <8 x bfloat> %174, <4 x float> %278, i32 0, i32 0, i32 0), !dbg !57
  %280 = extractelement <4 x float> %279, i64 0, !dbg !57
  %281 = extractelement <4 x float> %279, i64 1, !dbg !57
  %282 = extractelement <4 x float> %279, i64 2, !dbg !57
  %283 = extractelement <4 x float> %279, i64 3, !dbg !57
  %284 = fmul float %262, 5.000000e-01, !dbg !58
  %285 = fmul float %263, 5.000000e-01, !dbg !58
  %286 = fmul float %264, 5.000000e-01, !dbg !58
  %287 = fmul float %265, 5.000000e-01, !dbg !58
  %288 = fmul float %268, 5.000000e-01, !dbg !58
  %289 = fmul float %269, 5.000000e-01, !dbg !58
  %290 = fmul float %270, 5.000000e-01, !dbg !58
  %291 = fmul float %271, 5.000000e-01, !dbg !58
  %292 = fmul float %274, 5.000000e-01, !dbg !58
  %293 = fmul float %275, 5.000000e-01, !dbg !58
  %294 = fmul float %276, 5.000000e-01, !dbg !58
  %295 = fmul float %277, 5.000000e-01, !dbg !58
  %296 = fmul float %280, 5.000000e-01, !dbg !58
  %297 = fmul float %281, 5.000000e-01, !dbg !58
  %298 = fmul float %282, 5.000000e-01, !dbg !58
  %299 = fmul float %283, 5.000000e-01, !dbg !58
  %300 = fmul float %262, 0x3FE9884540000000, !dbg !61
  %301 = fmul float %263, 0x3FE9884540000000, !dbg !61
  %302 = fmul float %264, 0x3FE9884540000000, !dbg !61
  %303 = fmul float %265, 0x3FE9884540000000, !dbg !61
  %304 = fmul float %268, 0x3FE9884540000000, !dbg !61
  %305 = fmul float %269, 0x3FE9884540000000, !dbg !61
  %306 = fmul float %270, 0x3FE9884540000000, !dbg !61
  %307 = fmul float %271, 0x3FE9884540000000, !dbg !61
  %308 = fmul float %274, 0x3FE9884540000000, !dbg !61
  %309 = fmul float %275, 0x3FE9884540000000, !dbg !61
  %310 = fmul float %276, 0x3FE9884540000000, !dbg !61
  %311 = fmul float %277, 0x3FE9884540000000, !dbg !61
  %312 = fmul float %280, 0x3FE9884540000000, !dbg !61
  %313 = fmul float %281, 0x3FE9884540000000, !dbg !61
  %314 = fmul float %282, 0x3FE9884540000000, !dbg !61
  %315 = fmul float %283, 0x3FE9884540000000, !dbg !61
  %316 = fmul float %262, 0x3FA6E4E260000000, !dbg !62
  %317 = fmul float %263, 0x3FA6E4E260000000, !dbg !62
  %318 = fmul float %264, 0x3FA6E4E260000000, !dbg !62
  %319 = fmul float %265, 0x3FA6E4E260000000, !dbg !62
  %320 = fmul float %268, 0x3FA6E4E260000000, !dbg !62
  %321 = fmul float %269, 0x3FA6E4E260000000, !dbg !62
  %322 = fmul float %270, 0x3FA6E4E260000000, !dbg !62
  %323 = fmul float %271, 0x3FA6E4E260000000, !dbg !62
  %324 = fmul float %274, 0x3FA6E4E260000000, !dbg !62
  %325 = fmul float %275, 0x3FA6E4E260000000, !dbg !62
  %326 = fmul float %276, 0x3FA6E4E260000000, !dbg !62
  %327 = fmul float %277, 0x3FA6E4E260000000, !dbg !62
  %328 = fmul float %280, 0x3FA6E4E260000000, !dbg !62
  %329 = fmul float %281, 0x3FA6E4E260000000, !dbg !62
  %330 = fmul float %282, 0x3FA6E4E260000000, !dbg !62
  %331 = fmul float %283, 0x3FA6E4E260000000, !dbg !62
  %332 = fmul float %262, %316, !dbg !63
  %333 = fmul float %263, %317, !dbg !63
  %334 = fmul float %264, %318, !dbg !63
  %335 = fmul float %265, %319, !dbg !63
  %336 = fmul float %268, %320, !dbg !63
  %337 = fmul float %269, %321, !dbg !63
  %338 = fmul float %270, %322, !dbg !63
  %339 = fmul float %271, %323, !dbg !63
  %340 = fmul float %274, %324, !dbg !63
  %341 = fmul float %275, %325, !dbg !63
  %342 = fmul float %276, %326, !dbg !63
  %343 = fmul float %277, %327, !dbg !63
  %344 = fmul float %280, %328, !dbg !63
  %345 = fmul float %281, %329, !dbg !63
  %346 = fmul float %282, %330, !dbg !63
  %347 = fmul float %283, %331, !dbg !63
  %348 = fadd float %332, 1.000000e+00, !dbg !64
  %349 = fadd float %333, 1.000000e+00, !dbg !64
  %350 = fadd float %334, 1.000000e+00, !dbg !64
  %351 = fadd float %335, 1.000000e+00, !dbg !64
  %352 = fadd float %336, 1.000000e+00, !dbg !64
  %353 = fadd float %337, 1.000000e+00, !dbg !64
  %354 = fadd float %338, 1.000000e+00, !dbg !64
  %355 = fadd float %339, 1.000000e+00, !dbg !64
  %356 = fadd float %340, 1.000000e+00, !dbg !64
  %357 = fadd float %341, 1.000000e+00, !dbg !64
  %358 = fadd float %342, 1.000000e+00, !dbg !64
  %359 = fadd float %343, 1.000000e+00, !dbg !64
  %360 = fadd float %344, 1.000000e+00, !dbg !64
  %361 = fadd float %345, 1.000000e+00, !dbg !64
  %362 = fadd float %346, 1.000000e+00, !dbg !64
  %363 = fadd float %347, 1.000000e+00, !dbg !64
  %364 = fmul float %300, %348, !dbg !65
  %365 = fmul float %301, %349, !dbg !65
  %366 = fmul float %302, %350, !dbg !65
  %367 = fmul float %303, %351, !dbg !65
  %368 = fmul float %304, %352, !dbg !65
  %369 = fmul float %305, %353, !dbg !65
  %370 = fmul float %306, %354, !dbg !65
  %371 = fmul float %307, %355, !dbg !65
  %372 = fmul float %308, %356, !dbg !65
  %373 = fmul float %309, %357, !dbg !65
  %374 = fmul float %310, %358, !dbg !65
  %375 = fmul float %311, %359, !dbg !65
  %376 = fmul float %312, %360, !dbg !65
  %377 = fmul float %313, %361, !dbg !65
  %378 = fmul float %314, %362, !dbg !65
  %379 = fmul float %315, %363, !dbg !65
  %380 = fmul float %364, 2.000000e+00, !dbg !66
  %381 = fmul float %365, 2.000000e+00, !dbg !66
  %382 = fmul float %366, 2.000000e+00, !dbg !66
  %383 = fmul float %367, 2.000000e+00, !dbg !66
  %384 = fmul float %368, 2.000000e+00, !dbg !66
  %385 = fmul float %369, 2.000000e+00, !dbg !66
  %386 = fmul float %370, 2.000000e+00, !dbg !66
  %387 = fmul float %371, 2.000000e+00, !dbg !66
  %388 = fmul float %372, 2.000000e+00, !dbg !66
  %389 = fmul float %373, 2.000000e+00, !dbg !66
  %390 = fmul float %374, 2.000000e+00, !dbg !66
  %391 = fmul float %375, 2.000000e+00, !dbg !66
  %392 = fmul float %376, 2.000000e+00, !dbg !66
  %393 = fmul float %377, 2.000000e+00, !dbg !66
  %394 = fmul float %378, 2.000000e+00, !dbg !66
  %395 = fmul float %379, 2.000000e+00, !dbg !66
  %396 = fsub float 0.000000e+00, %380, !dbg !67
  %397 = fsub float 0.000000e+00, %381, !dbg !67
  %398 = fsub float 0.000000e+00, %382, !dbg !67
  %399 = fsub float 0.000000e+00, %383, !dbg !67
  %400 = fsub float 0.000000e+00, %384, !dbg !67
  %401 = fsub float 0.000000e+00, %385, !dbg !67
  %402 = fsub float 0.000000e+00, %386, !dbg !67
  %403 = fsub float 0.000000e+00, %387, !dbg !67
  %404 = fsub float 0.000000e+00, %388, !dbg !67
  %405 = fsub float 0.000000e+00, %389, !dbg !67
  %406 = fsub float 0.000000e+00, %390, !dbg !67
  %407 = fsub float 0.000000e+00, %391, !dbg !67
  %408 = fsub float 0.000000e+00, %392, !dbg !67
  %409 = fsub float 0.000000e+00, %393, !dbg !67
  %410 = fsub float 0.000000e+00, %394, !dbg !67
  %411 = fsub float 0.000000e+00, %395, !dbg !67
  %412 = fmul float %396, 0x3FF7154760000000, !dbg !70
  %413 = tail call float @llvm.exp2.f32(float %412), !dbg !70
  %414 = fmul float %397, 0x3FF7154760000000, !dbg !70
  %415 = tail call float @llvm.exp2.f32(float %414), !dbg !70
  %416 = fmul float %398, 0x3FF7154760000000, !dbg !70
  %417 = tail call float @llvm.exp2.f32(float %416), !dbg !70
  %418 = fmul float %399, 0x3FF7154760000000, !dbg !70
  %419 = tail call float @llvm.exp2.f32(float %418), !dbg !70
  %420 = fmul float %400, 0x3FF7154760000000, !dbg !70
  %421 = tail call float @llvm.exp2.f32(float %420), !dbg !70
  %422 = fmul float %401, 0x3FF7154760000000, !dbg !70
  %423 = tail call float @llvm.exp2.f32(float %422), !dbg !70
  %424 = fmul float %402, 0x3FF7154760000000, !dbg !70
  %425 = tail call float @llvm.exp2.f32(float %424), !dbg !70
  %426 = fmul float %403, 0x3FF7154760000000, !dbg !70
  %427 = tail call float @llvm.exp2.f32(float %426), !dbg !70
  %428 = fmul float %404, 0x3FF7154760000000, !dbg !70
  %429 = tail call float @llvm.exp2.f32(float %428), !dbg !70
  %430 = fmul float %405, 0x3FF7154760000000, !dbg !70
  %431 = tail call float @llvm.exp2.f32(float %430), !dbg !70
  %432 = fmul float %406, 0x3FF7154760000000, !dbg !70
  %433 = tail call float @llvm.exp2.f32(float %432), !dbg !70
  %434 = fmul float %407, 0x3FF7154760000000, !dbg !70
  %435 = tail call float @llvm.exp2.f32(float %434), !dbg !70
  %436 = fmul float %408, 0x3FF7154760000000, !dbg !70
  %437 = tail call float @llvm.exp2.f32(float %436), !dbg !70
  %438 = fmul float %409, 0x3FF7154760000000, !dbg !70
  %439 = tail call float @llvm.exp2.f32(float %438), !dbg !70
  %440 = fmul float %410, 0x3FF7154760000000, !dbg !70
  %441 = tail call float @llvm.exp2.f32(float %440), !dbg !70
  %442 = fmul float %411, 0x3FF7154760000000, !dbg !70
  %443 = tail call float @llvm.exp2.f32(float %442), !dbg !70
  %444 = fadd float %413, 1.000000e+00, !dbg !71
  %445 = fadd float %415, 1.000000e+00, !dbg !71
  %446 = fadd float %417, 1.000000e+00, !dbg !71
  %447 = fadd float %419, 1.000000e+00, !dbg !71
  %448 = fadd float %421, 1.000000e+00, !dbg !71
  %449 = fadd float %423, 1.000000e+00, !dbg !71
  %450 = fadd float %425, 1.000000e+00, !dbg !71
  %451 = fadd float %427, 1.000000e+00, !dbg !71
  %452 = fadd float %429, 1.000000e+00, !dbg !71
  %453 = fadd float %431, 1.000000e+00, !dbg !71
  %454 = fadd float %433, 1.000000e+00, !dbg !71
  %455 = fadd float %435, 1.000000e+00, !dbg !71
  %456 = fadd float %437, 1.000000e+00, !dbg !71
  %457 = fadd float %439, 1.000000e+00, !dbg !71
  %458 = fadd float %441, 1.000000e+00, !dbg !71
  %459 = fadd float %443, 1.000000e+00, !dbg !71
  %460 = fdiv float 1.000000e+00, %444, !dbg !72
  %461 = fdiv float 1.000000e+00, %445, !dbg !72
  %462 = fdiv float 1.000000e+00, %446, !dbg !72
  %463 = fdiv float 1.000000e+00, %447, !dbg !72
  %464 = fdiv float 1.000000e+00, %448, !dbg !72
  %465 = fdiv float 1.000000e+00, %449, !dbg !72
  %466 = fdiv float 1.000000e+00, %450, !dbg !72
  %467 = fdiv float 1.000000e+00, %451, !dbg !72
  %468 = fdiv float 1.000000e+00, %452, !dbg !72
  %469 = fdiv float 1.000000e+00, %453, !dbg !72
  %470 = fdiv float 1.000000e+00, %454, !dbg !72
  %471 = fdiv float 1.000000e+00, %455, !dbg !72
  %472 = fdiv float 1.000000e+00, %456, !dbg !72
  %473 = fdiv float 1.000000e+00, %457, !dbg !72
  %474 = fdiv float 1.000000e+00, %458, !dbg !72
  %475 = fdiv float 1.000000e+00, %459, !dbg !72
  %476 = fmul float %460, 2.000000e+00, !dbg !73
  %477 = fmul float %461, 2.000000e+00, !dbg !73
  %478 = fmul float %462, 2.000000e+00, !dbg !73
  %479 = fmul float %463, 2.000000e+00, !dbg !73
  %480 = fmul float %464, 2.000000e+00, !dbg !73
  %481 = fmul float %465, 2.000000e+00, !dbg !73
  %482 = fmul float %466, 2.000000e+00, !dbg !73
  %483 = fmul float %467, 2.000000e+00, !dbg !73
  %484 = fmul float %468, 2.000000e+00, !dbg !73
  %485 = fmul float %469, 2.000000e+00, !dbg !73
  %486 = fmul float %470, 2.000000e+00, !dbg !73
  %487 = fmul float %471, 2.000000e+00, !dbg !73
  %488 = fmul float %472, 2.000000e+00, !dbg !73
  %489 = fmul float %473, 2.000000e+00, !dbg !73
  %490 = fmul float %474, 2.000000e+00, !dbg !73
  %491 = fmul float %475, 2.000000e+00, !dbg !73
  %492 = fadd float %476, -1.000000e+00, !dbg !74
  %493 = fadd float %477, -1.000000e+00, !dbg !74
  %494 = fadd float %478, -1.000000e+00, !dbg !74
  %495 = fadd float %479, -1.000000e+00, !dbg !74
  %496 = fadd float %480, -1.000000e+00, !dbg !74
  %497 = fadd float %481, -1.000000e+00, !dbg !74
  %498 = fadd float %482, -1.000000e+00, !dbg !74
  %499 = fadd float %483, -1.000000e+00, !dbg !74
  %500 = fadd float %484, -1.000000e+00, !dbg !74
  %501 = fadd float %485, -1.000000e+00, !dbg !74
  %502 = fadd float %486, -1.000000e+00, !dbg !74
  %503 = fadd float %487, -1.000000e+00, !dbg !74
  %504 = fadd float %488, -1.000000e+00, !dbg !74
  %505 = fadd float %489, -1.000000e+00, !dbg !74
  %506 = fadd float %490, -1.000000e+00, !dbg !74
  %507 = fadd float %491, -1.000000e+00, !dbg !74
  %508 = fadd float %492, 1.000000e+00, !dbg !75
  %509 = fadd float %493, 1.000000e+00, !dbg !75
  %510 = fadd float %494, 1.000000e+00, !dbg !75
  %511 = fadd float %495, 1.000000e+00, !dbg !75
  %512 = fadd float %496, 1.000000e+00, !dbg !75
  %513 = fadd float %497, 1.000000e+00, !dbg !75
  %514 = fadd float %498, 1.000000e+00, !dbg !75
  %515 = fadd float %499, 1.000000e+00, !dbg !75
  %516 = fadd float %500, 1.000000e+00, !dbg !75
  %517 = fadd float %501, 1.000000e+00, !dbg !75
  %518 = fadd float %502, 1.000000e+00, !dbg !75
  %519 = fadd float %503, 1.000000e+00, !dbg !75
  %520 = fadd float %504, 1.000000e+00, !dbg !75
  %521 = fadd float %505, 1.000000e+00, !dbg !75
  %522 = fadd float %506, 1.000000e+00, !dbg !75
  %523 = fadd float %507, 1.000000e+00, !dbg !75
  %524 = fmul float %284, %508, !dbg !76
  %525 = fmul float %285, %509, !dbg !76
  %526 = fmul float %286, %510, !dbg !76
  %527 = fmul float %287, %511, !dbg !76
  %528 = fmul float %288, %512, !dbg !76
  %529 = fmul float %289, %513, !dbg !76
  %530 = fmul float %290, %514, !dbg !76
  %531 = fmul float %291, %515, !dbg !76
  %532 = fmul float %292, %516, !dbg !76
  %533 = fmul float %293, %517, !dbg !76
  %534 = fmul float %294, %518, !dbg !76
  %535 = fmul float %295, %519, !dbg !76
  %536 = fmul float %296, %520, !dbg !76
  %537 = fmul float %297, %521, !dbg !76
  %538 = fmul float %298, %522, !dbg !76
  %539 = fmul float %299, %523, !dbg !76
  %540 = fmul float %20, %524, !dbg !77
  %541 = fmul float %20, %525, !dbg !77
  %542 = fmul float %20, %526, !dbg !77
  %543 = fmul float %20, %527, !dbg !77
  %544 = fmul float %20, %528, !dbg !77
  %545 = fmul float %20, %529, !dbg !77
  %546 = fmul float %20, %530, !dbg !77
  %547 = fmul float %20, %531, !dbg !77
  %548 = fmul float %20, %532, !dbg !77
  %549 = fmul float %20, %533, !dbg !77
  %550 = fmul float %20, %534, !dbg !77
  %551 = fmul float %20, %535, !dbg !77
  %552 = fmul float %20, %536, !dbg !77
  %553 = fmul float %20, %537, !dbg !77
  %554 = fmul float %20, %538, !dbg !77
  %555 = fmul float %20, %539, !dbg !77
  %556 = insertelement <2 x float> poison, float %540, i64 0, !dbg !78
  %557 = insertelement <2 x float> %556, float %541, i64 1, !dbg !78
  %558 = fptrunc <2 x float> %557 to <2 x bfloat>, !dbg !78
  %559 = insertelement <2 x float> poison, float %542, i64 0, !dbg !78
  %560 = insertelement <2 x float> %559, float %543, i64 1, !dbg !78
  %561 = fptrunc <2 x float> %560 to <2 x bfloat>, !dbg !78
  %562 = insertelement <2 x float> poison, float %544, i64 0, !dbg !78
  %563 = insertelement <2 x float> %562, float %545, i64 1, !dbg !78
  %564 = fptrunc <2 x float> %563 to <2 x bfloat>, !dbg !78
  %565 = shufflevector <2 x bfloat> %564, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %566 = insertelement <2 x float> poison, float %546, i64 0, !dbg !78
  %567 = insertelement <2 x float> %566, float %547, i64 1, !dbg !78
  %568 = fptrunc <2 x float> %567 to <2 x bfloat>, !dbg !78
  %569 = shufflevector <2 x bfloat> %568, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %570 = insertelement <2 x float> poison, float %548, i64 0, !dbg !78
  %571 = insertelement <2 x float> %570, float %549, i64 1, !dbg !78
  %572 = fptrunc <2 x float> %571 to <2 x bfloat>, !dbg !78
  %573 = insertelement <2 x float> poison, float %550, i64 0, !dbg !78
  %574 = insertelement <2 x float> %573, float %551, i64 1, !dbg !78
  %575 = fptrunc <2 x float> %574 to <2 x bfloat>, !dbg !78
  %576 = insertelement <2 x float> poison, float %552, i64 0, !dbg !78
  %577 = insertelement <2 x float> %576, float %553, i64 1, !dbg !78
  %578 = fptrunc <2 x float> %577 to <2 x bfloat>, !dbg !78
  %579 = shufflevector <2 x bfloat> %578, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %580 = insertelement <2 x float> poison, float %554, i64 0, !dbg !78
  %581 = insertelement <2 x float> %580, float %555, i64 1, !dbg !78
  %582 = fptrunc <2 x float> %581 to <2 x bfloat>, !dbg !78
  %583 = shufflevector <2 x bfloat> %582, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %584 = mul i64 %214, %70, !dbg !79
  %585 = getelementptr bfloat, ptr addrspace(1) %68, i64 %584, !dbg !79
  %586 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %585, i16 0, i32 2147483646, i32 159744), !dbg !79
  %587 = select i1 %252, i32 %188, i32 -2147483648, !dbg !79
  %588 = tail call <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) %586, i32 %587, i32 0, i32 0), !dbg !79
  %589 = bitcast <4 x i32> %588 to <8 x bfloat>, !dbg !79
  fence syncscope("workgroup") release, !dbg !79
  tail call void @llvm.amdgcn.s.barrier(), !dbg !79
  fence syncscope("workgroup") acquire, !dbg !79
  %590 = shufflevector <8 x bfloat> %589, <8 x bfloat> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !79
  store <4 x bfloat> %590, ptr addrspace(3) %191, align 8, !dbg !79
  %591 = shufflevector <8 x bfloat> %589, <8 x bfloat> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !79
  store <4 x bfloat> %591, ptr addrspace(3) %193, align 8, !dbg !79
  fence syncscope("workgroup") release, !dbg !79
  tail call void @llvm.amdgcn.s.barrier(), !dbg !79
  fence syncscope("workgroup") acquire, !dbg !79
  %592 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %205), !dbg !79
  %593 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %206), !dbg !79
  %594 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) %207), !dbg !79
  %595 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %208), !dbg !79
  %596 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %209), !dbg !79
  %597 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %210), !dbg !79
  %598 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %211), !dbg !79
  %599 = tail call <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) nonnull %212), !dbg !79
  %600 = shufflevector <2 x bfloat> %558, <2 x bfloat> %561, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %601 = shufflevector <8 x bfloat> %600, <8 x bfloat> %565, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !80
  %602 = shufflevector <8 x bfloat> %601, <8 x bfloat> %569, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !80
  %603 = shufflevector <2 x bfloat> %572, <2 x bfloat> %575, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !80
  %604 = shufflevector <8 x bfloat> %603, <8 x bfloat> %579, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !80
  %605 = shufflevector <8 x bfloat> %604, <8 x bfloat> %583, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !80
  %606 = shufflevector <4 x bfloat> %592, <4 x bfloat> %593, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !80
  %607 = shufflevector <4 x bfloat> %594, <4 x bfloat> %595, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !80
  %608 = shufflevector <4 x bfloat> %596, <4 x bfloat> %597, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !80
  %609 = shufflevector <4 x bfloat> %598, <4 x bfloat> %599, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !80
  %610 = insertelement <4 x float> poison, float %215, i64 0, !dbg !80
  %611 = insertelement <4 x float> %610, float %216, i64 1, !dbg !80
  %612 = insertelement <4 x float> %611, float %217, i64 2, !dbg !80
  %613 = insertelement <4 x float> %612, float %218, i64 3, !dbg !80
  %614 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %606, <8 x bfloat> %602, <4 x float> %613, i32 0, i32 0, i32 0), !dbg !80
  %615 = extractelement <4 x float> %614, i64 0, !dbg !80
  %616 = extractelement <4 x float> %614, i64 1, !dbg !80
  %617 = extractelement <4 x float> %614, i64 2, !dbg !80
  %618 = extractelement <4 x float> %614, i64 3, !dbg !80
  %619 = insertelement <4 x float> poison, float %219, i64 0, !dbg !80
  %620 = insertelement <4 x float> %619, float %220, i64 1, !dbg !80
  %621 = insertelement <4 x float> %620, float %221, i64 2, !dbg !80
  %622 = insertelement <4 x float> %621, float %222, i64 3, !dbg !80
  %623 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %607, <8 x bfloat> %602, <4 x float> %622, i32 0, i32 0, i32 0), !dbg !80
  %624 = extractelement <4 x float> %623, i64 0, !dbg !80
  %625 = extractelement <4 x float> %623, i64 1, !dbg !80
  %626 = extractelement <4 x float> %623, i64 2, !dbg !80
  %627 = extractelement <4 x float> %623, i64 3, !dbg !80
  %628 = insertelement <4 x float> poison, float %223, i64 0, !dbg !80
  %629 = insertelement <4 x float> %628, float %224, i64 1, !dbg !80
  %630 = insertelement <4 x float> %629, float %225, i64 2, !dbg !80
  %631 = insertelement <4 x float> %630, float %226, i64 3, !dbg !80
  %632 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %608, <8 x bfloat> %602, <4 x float> %631, i32 0, i32 0, i32 0), !dbg !80
  %633 = extractelement <4 x float> %632, i64 0, !dbg !80
  %634 = extractelement <4 x float> %632, i64 1, !dbg !80
  %635 = extractelement <4 x float> %632, i64 2, !dbg !80
  %636 = extractelement <4 x float> %632, i64 3, !dbg !80
  %637 = insertelement <4 x float> poison, float %227, i64 0, !dbg !80
  %638 = insertelement <4 x float> %637, float %228, i64 1, !dbg !80
  %639 = insertelement <4 x float> %638, float %229, i64 2, !dbg !80
  %640 = insertelement <4 x float> %639, float %230, i64 3, !dbg !80
  %641 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %609, <8 x bfloat> %602, <4 x float> %640, i32 0, i32 0, i32 0), !dbg !80
  %642 = extractelement <4 x float> %641, i64 0, !dbg !80
  %643 = extractelement <4 x float> %641, i64 1, !dbg !80
  %644 = extractelement <4 x float> %641, i64 2, !dbg !80
  %645 = extractelement <4 x float> %641, i64 3, !dbg !80
  %646 = insertelement <4 x float> poison, float %231, i64 0, !dbg !80
  %647 = insertelement <4 x float> %646, float %232, i64 1, !dbg !80
  %648 = insertelement <4 x float> %647, float %233, i64 2, !dbg !80
  %649 = insertelement <4 x float> %648, float %234, i64 3, !dbg !80
  %650 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %606, <8 x bfloat> %605, <4 x float> %649, i32 0, i32 0, i32 0), !dbg !80
  %651 = extractelement <4 x float> %650, i64 0, !dbg !80
  %652 = extractelement <4 x float> %650, i64 1, !dbg !80
  %653 = extractelement <4 x float> %650, i64 2, !dbg !80
  %654 = extractelement <4 x float> %650, i64 3, !dbg !80
  %655 = insertelement <4 x float> poison, float %235, i64 0, !dbg !80
  %656 = insertelement <4 x float> %655, float %236, i64 1, !dbg !80
  %657 = insertelement <4 x float> %656, float %237, i64 2, !dbg !80
  %658 = insertelement <4 x float> %657, float %238, i64 3, !dbg !80
  %659 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %607, <8 x bfloat> %605, <4 x float> %658, i32 0, i32 0, i32 0), !dbg !80
  %660 = extractelement <4 x float> %659, i64 0, !dbg !80
  %661 = extractelement <4 x float> %659, i64 1, !dbg !80
  %662 = extractelement <4 x float> %659, i64 2, !dbg !80
  %663 = extractelement <4 x float> %659, i64 3, !dbg !80
  %664 = insertelement <4 x float> poison, float %239, i64 0, !dbg !80
  %665 = insertelement <4 x float> %664, float %240, i64 1, !dbg !80
  %666 = insertelement <4 x float> %665, float %241, i64 2, !dbg !80
  %667 = insertelement <4 x float> %666, float %242, i64 3, !dbg !80
  %668 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %608, <8 x bfloat> %605, <4 x float> %667, i32 0, i32 0, i32 0), !dbg !80
  %669 = extractelement <4 x float> %668, i64 0, !dbg !80
  %670 = extractelement <4 x float> %668, i64 1, !dbg !80
  %671 = extractelement <4 x float> %668, i64 2, !dbg !80
  %672 = extractelement <4 x float> %668, i64 3, !dbg !80
  %673 = insertelement <4 x float> poison, float %243, i64 0, !dbg !80
  %674 = insertelement <4 x float> %673, float %244, i64 1, !dbg !80
  %675 = insertelement <4 x float> %674, float %245, i64 2, !dbg !80
  %676 = insertelement <4 x float> %675, float %246, i64 3, !dbg !80
  %677 = tail call <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat> %609, <8 x bfloat> %605, <4 x float> %676, i32 0, i32 0, i32 0), !dbg !80
  %678 = extractelement <4 x float> %677, i64 0, !dbg !80
  %679 = extractelement <4 x float> %677, i64 1, !dbg !80
  %680 = extractelement <4 x float> %677, i64 2, !dbg !80
  %681 = extractelement <4 x float> %677, i64 3, !dbg !80
  %682 = add i64 %214, 32, !dbg !81
  %indvars = trunc i64 %682 to i32, !dbg !55
  %683 = icmp sgt i32 %43, %indvars, !dbg !55
  br i1 %683, label %213, label %._crit_edge, !dbg !55

._crit_edge:                                      ; preds = %213, %46
  %684 = phi float [ 0.000000e+00, %46 ], [ %615, %213 ], !dbg !13
  %685 = phi float [ 0.000000e+00, %46 ], [ %616, %213 ], !dbg !13
  %686 = phi float [ 0.000000e+00, %46 ], [ %617, %213 ], !dbg !13
  %687 = phi float [ 0.000000e+00, %46 ], [ %618, %213 ], !dbg !13
  %688 = phi float [ 0.000000e+00, %46 ], [ %624, %213 ], !dbg !13
  %689 = phi float [ 0.000000e+00, %46 ], [ %625, %213 ], !dbg !13
  %690 = phi float [ 0.000000e+00, %46 ], [ %626, %213 ], !dbg !13
  %691 = phi float [ 0.000000e+00, %46 ], [ %627, %213 ], !dbg !13
  %692 = phi float [ 0.000000e+00, %46 ], [ %633, %213 ], !dbg !13
  %693 = phi float [ 0.000000e+00, %46 ], [ %634, %213 ], !dbg !13
  %694 = phi float [ 0.000000e+00, %46 ], [ %635, %213 ], !dbg !13
  %695 = phi float [ 0.000000e+00, %46 ], [ %636, %213 ], !dbg !13
  %696 = phi float [ 0.000000e+00, %46 ], [ %642, %213 ], !dbg !13
  %697 = phi float [ 0.000000e+00, %46 ], [ %643, %213 ], !dbg !13
  %698 = phi float [ 0.000000e+00, %46 ], [ %644, %213 ], !dbg !13
  %699 = phi float [ 0.000000e+00, %46 ], [ %645, %213 ], !dbg !13
  %700 = phi float [ 0.000000e+00, %46 ], [ %651, %213 ], !dbg !13
  %701 = phi float [ 0.000000e+00, %46 ], [ %652, %213 ], !dbg !13
  %702 = phi float [ 0.000000e+00, %46 ], [ %653, %213 ], !dbg !13
  %703 = phi float [ 0.000000e+00, %46 ], [ %654, %213 ], !dbg !13
  %704 = phi float [ 0.000000e+00, %46 ], [ %660, %213 ], !dbg !13
  %705 = phi float [ 0.000000e+00, %46 ], [ %661, %213 ], !dbg !13
  %706 = phi float [ 0.000000e+00, %46 ], [ %662, %213 ], !dbg !13
  %707 = phi float [ 0.000000e+00, %46 ], [ %663, %213 ], !dbg !13
  %708 = phi float [ 0.000000e+00, %46 ], [ %669, %213 ], !dbg !13
  %709 = phi float [ 0.000000e+00, %46 ], [ %670, %213 ], !dbg !13
  %710 = phi float [ 0.000000e+00, %46 ], [ %671, %213 ], !dbg !13
  %711 = phi float [ 0.000000e+00, %46 ], [ %672, %213 ], !dbg !13
  %712 = phi float [ 0.000000e+00, %46 ], [ %678, %213 ], !dbg !13
  %713 = phi float [ 0.000000e+00, %46 ], [ %679, %213 ], !dbg !13
  %714 = phi float [ 0.000000e+00, %46 ], [ %680, %213 ], !dbg !13
  %715 = phi float [ 0.000000e+00, %46 ], [ %681, %213 ], !dbg !13
  %716 = icmp slt i32 %87, %36, !dbg !82
  %717 = icmp slt i32 %88, %36, !dbg !82
  %718 = insertelement <2 x float> poison, float %684, i64 0, !dbg !83
  %719 = insertelement <2 x float> %718, float %685, i64 1, !dbg !83
  %720 = fptrunc <2 x float> %719 to <2 x bfloat>, !dbg !83
  %721 = insertelement <2 x float> poison, float %686, i64 0, !dbg !83
  %722 = insertelement <2 x float> %721, float %687, i64 1, !dbg !83
  %723 = fptrunc <2 x float> %722 to <2 x bfloat>, !dbg !83
  %724 = insertelement <2 x float> poison, float %688, i64 0, !dbg !83
  %725 = insertelement <2 x float> %724, float %689, i64 1, !dbg !83
  %726 = fptrunc <2 x float> %725 to <2 x bfloat>, !dbg !83
  %727 = insertelement <2 x float> poison, float %690, i64 0, !dbg !83
  %728 = insertelement <2 x float> %727, float %691, i64 1, !dbg !83
  %729 = fptrunc <2 x float> %728 to <2 x bfloat>, !dbg !83
  %730 = insertelement <2 x float> poison, float %692, i64 0, !dbg !83
  %731 = insertelement <2 x float> %730, float %693, i64 1, !dbg !83
  %732 = fptrunc <2 x float> %731 to <2 x bfloat>, !dbg !83
  %733 = insertelement <2 x float> poison, float %694, i64 0, !dbg !83
  %734 = insertelement <2 x float> %733, float %695, i64 1, !dbg !83
  %735 = fptrunc <2 x float> %734 to <2 x bfloat>, !dbg !83
  %736 = insertelement <2 x float> poison, float %696, i64 0, !dbg !83
  %737 = insertelement <2 x float> %736, float %697, i64 1, !dbg !83
  %738 = fptrunc <2 x float> %737 to <2 x bfloat>, !dbg !83
  %739 = insertelement <2 x float> poison, float %698, i64 0, !dbg !83
  %740 = insertelement <2 x float> %739, float %699, i64 1, !dbg !83
  %741 = fptrunc <2 x float> %740 to <2 x bfloat>, !dbg !83
  %742 = insertelement <2 x float> poison, float %700, i64 0, !dbg !83
  %743 = insertelement <2 x float> %742, float %701, i64 1, !dbg !83
  %744 = fptrunc <2 x float> %743 to <2 x bfloat>, !dbg !83
  %745 = insertelement <2 x float> poison, float %702, i64 0, !dbg !83
  %746 = insertelement <2 x float> %745, float %703, i64 1, !dbg !83
  %747 = fptrunc <2 x float> %746 to <2 x bfloat>, !dbg !83
  %748 = insertelement <2 x float> poison, float %704, i64 0, !dbg !83
  %749 = insertelement <2 x float> %748, float %705, i64 1, !dbg !83
  %750 = fptrunc <2 x float> %749 to <2 x bfloat>, !dbg !83
  %751 = insertelement <2 x float> poison, float %706, i64 0, !dbg !83
  %752 = insertelement <2 x float> %751, float %707, i64 1, !dbg !83
  %753 = fptrunc <2 x float> %752 to <2 x bfloat>, !dbg !83
  %754 = insertelement <2 x float> poison, float %708, i64 0, !dbg !83
  %755 = insertelement <2 x float> %754, float %709, i64 1, !dbg !83
  %756 = fptrunc <2 x float> %755 to <2 x bfloat>, !dbg !83
  %757 = insertelement <2 x float> poison, float %710, i64 0, !dbg !83
  %758 = insertelement <2 x float> %757, float %711, i64 1, !dbg !83
  %759 = fptrunc <2 x float> %758 to <2 x bfloat>, !dbg !83
  %760 = insertelement <2 x float> poison, float %712, i64 0, !dbg !83
  %761 = insertelement <2 x float> %760, float %713, i64 1, !dbg !83
  %762 = fptrunc <2 x float> %761 to <2 x bfloat>, !dbg !83
  %763 = insertelement <2 x float> poison, float %714, i64 0, !dbg !83
  %764 = insertelement <2 x float> %763, float %715, i64 1, !dbg !83
  %765 = fptrunc <2 x float> %764 to <2 x bfloat>, !dbg !83
  %766 = bitcast <2 x bfloat> %720 to i32, !dbg !83
  %767 = bitcast <2 x bfloat> %723 to i32, !dbg !83
  %768 = bitcast <2 x bfloat> %726 to i32, !dbg !83
  %769 = bitcast <2 x bfloat> %729 to i32, !dbg !83
  %770 = bitcast <2 x bfloat> %732 to i32, !dbg !83
  %771 = bitcast <2 x bfloat> %735 to i32, !dbg !83
  %772 = bitcast <2 x bfloat> %738 to i32, !dbg !83
  %773 = bitcast <2 x bfloat> %741 to i32, !dbg !83
  %774 = bitcast <2 x bfloat> %744 to i32, !dbg !83
  %775 = bitcast <2 x bfloat> %747 to i32, !dbg !83
  %776 = bitcast <2 x bfloat> %750 to i32, !dbg !83
  %777 = bitcast <2 x bfloat> %753 to i32, !dbg !83
  %778 = bitcast <2 x bfloat> %756 to i32, !dbg !83
  %779 = bitcast <2 x bfloat> %759 to i32, !dbg !83
  %780 = bitcast <2 x bfloat> %762 to i32, !dbg !83
  %781 = bitcast <2 x bfloat> %765 to i32, !dbg !83
  %782 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %766, i32 %768, i1 false, i1 false), !dbg !83
  %783 = extractvalue { i32, i32 } %782, 0, !dbg !83
  %784 = extractvalue { i32, i32 } %782, 1, !dbg !83
  %785 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %767, i32 %769, i1 false, i1 false), !dbg !83
  %786 = extractvalue { i32, i32 } %785, 0, !dbg !83
  %787 = extractvalue { i32, i32 } %785, 1, !dbg !83
  %788 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %770, i32 %772, i1 false, i1 false), !dbg !83
  %789 = extractvalue { i32, i32 } %788, 0, !dbg !83
  %790 = extractvalue { i32, i32 } %788, 1, !dbg !83
  %791 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %771, i32 %773, i1 false, i1 false), !dbg !83
  %792 = extractvalue { i32, i32 } %791, 0, !dbg !83
  %793 = extractvalue { i32, i32 } %791, 1, !dbg !83
  %794 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %774, i32 %776, i1 false, i1 false), !dbg !83
  %795 = extractvalue { i32, i32 } %794, 0, !dbg !83
  %796 = extractvalue { i32, i32 } %794, 1, !dbg !83
  %797 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %775, i32 %777, i1 false, i1 false), !dbg !83
  %798 = extractvalue { i32, i32 } %797, 0, !dbg !83
  %799 = extractvalue { i32, i32 } %797, 1, !dbg !83
  %800 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %778, i32 %780, i1 false, i1 false), !dbg !83
  %801 = extractvalue { i32, i32 } %800, 0, !dbg !83
  %802 = extractvalue { i32, i32 } %800, 1, !dbg !83
  %803 = tail call { i32, i32 } @llvm.amdgcn.permlane16.swap(i32 %779, i32 %781, i1 false, i1 false), !dbg !83
  %804 = extractvalue { i32, i32 } %803, 0, !dbg !83
  %805 = extractvalue { i32, i32 } %803, 1, !dbg !83
  %806 = bitcast i32 %783 to <2 x bfloat>, !dbg !83
  %807 = bitcast i32 %786 to <2 x bfloat>, !dbg !83
  %808 = bitcast i32 %784 to <2 x bfloat>, !dbg !83
  %809 = shufflevector <2 x bfloat> %808, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %810 = bitcast i32 %787 to <2 x bfloat>, !dbg !83
  %811 = shufflevector <2 x bfloat> %810, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %812 = bitcast i32 %789 to <2 x bfloat>, !dbg !83
  %813 = bitcast i32 %792 to <2 x bfloat>, !dbg !83
  %814 = bitcast i32 %790 to <2 x bfloat>, !dbg !83
  %815 = shufflevector <2 x bfloat> %814, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %816 = bitcast i32 %793 to <2 x bfloat>, !dbg !83
  %817 = shufflevector <2 x bfloat> %816, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %818 = bitcast i32 %795 to <2 x bfloat>, !dbg !83
  %819 = bitcast i32 %798 to <2 x bfloat>, !dbg !83
  %820 = bitcast i32 %796 to <2 x bfloat>, !dbg !83
  %821 = shufflevector <2 x bfloat> %820, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %822 = bitcast i32 %799 to <2 x bfloat>, !dbg !83
  %823 = shufflevector <2 x bfloat> %822, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %824 = bitcast i32 %801 to <2 x bfloat>, !dbg !83
  %825 = bitcast i32 %804 to <2 x bfloat>, !dbg !83
  %826 = bitcast i32 %802 to <2 x bfloat>, !dbg !83
  %827 = shufflevector <2 x bfloat> %826, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %828 = bitcast i32 %805 to <2 x bfloat>, !dbg !83
  %829 = shufflevector <2 x bfloat> %828, <2 x bfloat> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %830 = trunc i32 %14 to i16, !dbg !84
  %831 = and i16 %830, 16383, !dbg !84
  %832 = or disjoint i16 %831, 16384, !dbg !84
  %833 = tail call ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) %110, i16 %832, i32 2147483646, i32 159744), !dbg !84
  %834 = shufflevector <2 x bfloat> %806, <2 x bfloat> %807, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %835 = shufflevector <8 x bfloat> %834, <8 x bfloat> %809, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %836 = shufflevector <8 x bfloat> %835, <8 x bfloat> %811, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %837 = bitcast <8 x bfloat> %836 to <4 x i32>, !dbg !84
  %838 = shl i32 %105, 1, !dbg !84
  %839 = select i1 %716, i32 %838, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %837, ptr addrspace(8) %833, i32 %839, i32 0, i32 0), !dbg !84
  %840 = shufflevector <2 x bfloat> %812, <2 x bfloat> %813, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %841 = shufflevector <8 x bfloat> %840, <8 x bfloat> %815, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %842 = shufflevector <8 x bfloat> %841, <8 x bfloat> %817, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %843 = bitcast <8 x bfloat> %842 to <4 x i32>, !dbg !84
  %844 = shl i32 %106, 1, !dbg !84
  %845 = select i1 %716, i32 %844, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %843, ptr addrspace(8) %833, i32 %845, i32 0, i32 0), !dbg !84
  %846 = shufflevector <2 x bfloat> %818, <2 x bfloat> %819, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %847 = shufflevector <8 x bfloat> %846, <8 x bfloat> %821, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %848 = shufflevector <8 x bfloat> %847, <8 x bfloat> %823, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %849 = bitcast <8 x bfloat> %848 to <4 x i32>, !dbg !84
  %850 = shl i32 %107, 1, !dbg !84
  %851 = select i1 %717, i32 %850, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %849, ptr addrspace(8) %833, i32 %851, i32 0, i32 0), !dbg !84
  %852 = shufflevector <2 x bfloat> %824, <2 x bfloat> %825, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !84
  %853 = shufflevector <8 x bfloat> %852, <8 x bfloat> %827, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !84
  %854 = shufflevector <8 x bfloat> %853, <8 x bfloat> %829, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !84
  %855 = bitcast <8 x bfloat> %854 to <4 x i32>, !dbg !84
  %856 = shl i32 %108, 1, !dbg !84
  %857 = select i1 %717, i32 %856, i32 -2147483648, !dbg !84
  tail call void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32> %855, ptr addrspace(8) %833, i32 %857, i32 0, i32 0), !dbg !84
  br label %858, !dbg !26

858:                                              ; preds = %._crit_edge, %24
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.amdgcn.workitem.id.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr addrspace(8) @llvm.amdgcn.make.buffer.rsrc.p8.p1(ptr addrspace(1) readnone, i16, i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <4 x i32> @llvm.amdgcn.raw.ptr.buffer.load.v4i32(ptr addrspace(8) readonly captures(none), i32, i32, i32 immarg) #2

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #3

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare { i32, i32 } @llvm.amdgcn.permlane16.swap(i32, i32, i1 immarg, i1 immarg) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.amdgcn.raw.ptr.buffer.store.v4i32(<4 x i32>, ptr addrspace(8) writeonly captures(none), i32, i32, i32 immarg) #5

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x float> @llvm.amdgcn.mfma.f32.16x16x32.bf16(<8 x bfloat>, <8 x bfloat>, <4 x float>, i32 immarg, i32 immarg, i32 immarg) #6

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare <4 x bfloat> @llvm.amdgcn.ds.read.tr16.b64.v4bf16(ptr addrspace(3) captures(none)) #7

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nofree norecurse nounwind "amdgpu-agpr-alloc"="0" "amdgpu-flat-work-group-size"="1,256" "amdgpu-no-completion-action" "amdgpu-no-default-queue" "amdgpu-no-dispatch-id" "amdgpu-no-dispatch-ptr" "amdgpu-no-flat-scratch-init" "amdgpu-no-heap-ptr" "amdgpu-no-hostcall-ptr" "amdgpu-no-implicitarg-ptr" "amdgpu-no-lds-kernel-id" "amdgpu-no-multigrid-sync-arg" "amdgpu-no-queue-ptr" "amdgpu-no-workgroup-id-x" "amdgpu-no-workgroup-id-z" "amdgpu-no-workitem-id-x" "amdgpu-no-workitem-id-y" "amdgpu-no-workitem-id-z" "amdgpu-waves-per-eu"="3,8" "denormal-fp-math-f32"="preserve-sign" "uniform-work-group-size"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: write) }
attributes #6 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #7 = { convergent mustprogress nocallback nofree nounwind willreturn memory(argmem: read) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "gdpa.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!4 = !DISubprogram(name: "llvm.exp2.f32", linkageName: "llvm.exp2.f32", scope: !1, file: !1, line: 578, type: !5, scopeLine: 578, spFlags: DISPFlagOptimized)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = distinct !DISubprogram(name: "_gdpa_fwd", linkageName: "_gdpa_fwd", scope: !1, file: !1, line: 457, type: !5, scopeLine: 457, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!8 = !DILocation(line: 517, column: 27, scope: !7)
!9 = !DILocation(line: 521, column: 26, scope: !7)
!10 = !DILocation(line: 530, column: 24, scope: !7)
!11 = !DILocation(line: 304, column: 34, scope: !12, inlinedAt: !13)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !1, discriminator: 0)
!13 = !DILocation(line: 578, column: 8, scope: !7)
!14 = !DILocation(line: 304, column: 22, scope: !12, inlinedAt: !13)
!15 = !DILocation(line: 305, column: 42, scope: !12, inlinedAt: !13)
!16 = !DILocation(line: 305, column: 20, scope: !12, inlinedAt: !13)
!17 = !DILocation(line: 307, column: 19, scope: !12, inlinedAt: !13)
!18 = !DILocation(line: 308, column: 28, scope: !12, inlinedAt: !13)
!19 = !DILocation(line: 322, column: 42, scope: !12, inlinedAt: !13)
!20 = !DILocation(line: 322, column: 30, scope: !12, inlinedAt: !13)
!21 = !DILocation(line: 323, column: 48, scope: !12, inlinedAt: !13)
!22 = !DILocation(line: 323, column: 28, scope: !12, inlinedAt: !13)
!23 = !DILocation(line: 324, column: 23, scope: !12, inlinedAt: !13)
!24 = !DILocation(line: 329, column: 17, scope: !12, inlinedAt: !13)
!25 = !DILocation(line: 329, column: 27, scope: !12, inlinedAt: !13)
!26 = !DILocation(line: 329, column: 7, scope: !12, inlinedAt: !13)
!27 = !DILocation(line: 528, column: 21, scope: !7)
!28 = !DILocation(line: 301, column: 24, scope: !12, inlinedAt: !13)
!29 = !DILocation(line: 302, column: 40, scope: !12, inlinedAt: !13)
!30 = !DILocation(line: 301, column: 36, scope: !12, inlinedAt: !13)
!31 = !DILocation(line: 330, column: 40, scope: !12, inlinedAt: !13)
!32 = !DILocation(line: 330, column: 26, scope: !12, inlinedAt: !13)
!33 = !DILocation(line: 342, column: 25, scope: !12, inlinedAt: !13)
!34 = !DILocation(line: 342, column: 46, scope: !12, inlinedAt: !13)
!35 = !DILocation(line: 342, column: 36, scope: !12, inlinedAt: !13)
!36 = !DILocation(line: 347, column: 16, scope: !12, inlinedAt: !13)
!37 = !DILocation(line: 353, column: 25, scope: !12, inlinedAt: !13)
!38 = !DILocation(line: 353, column: 47, scope: !12, inlinedAt: !13)
!39 = !DILocation(line: 353, column: 37, scope: !12, inlinedAt: !13)
!40 = !DILocation(line: 358, column: 16, scope: !12, inlinedAt: !13)
!41 = !DILocation(line: 361, column: 25, scope: !12, inlinedAt: !13)
!42 = !DILocation(line: 361, column: 47, scope: !12, inlinedAt: !13)
!43 = !DILocation(line: 361, column: 37, scope: !12, inlinedAt: !13)
!44 = !DILocation(line: 366, column: 16, scope: !12, inlinedAt: !13)
!45 = !DILocation(line: 390, column: 50, scope: !12, inlinedAt: !13)
!46 = !DILocation(line: 390, column: 37, scope: !12, inlinedAt: !13)
!47 = !DILocation(line: 392, column: 30, scope: !12, inlinedAt: !13)
!48 = !DILocation(line: 396, column: 35, scope: !12, inlinedAt: !13)
!49 = !DILocation(line: 396, column: 14, scope: !12, inlinedAt: !13)
!50 = !DILocation(line: 397, column: 24, scope: !12, inlinedAt: !13)
!51 = !DILocation(line: 397, column: 14, scope: !12, inlinedAt: !13)
!52 = !DILocation(line: 398, column: 52, scope: !12, inlinedAt: !13)
!53 = !DILocation(line: 398, column: 15, scope: !12, inlinedAt: !13)
!54 = !DILocation(line: 412, column: 24, scope: !12, inlinedAt: !13)
!55 = !DILocation(line: 119, column: 33, scope: !12, inlinedAt: !13)
!56 = !DILocation(line: 131, column: 24, scope: !12, inlinedAt: !13)
!57 = !DILocation(line: 134, column: 23, scope: !12, inlinedAt: !13)
!58 = !DILocation(line: 107, column: 15, scope: !59, inlinedAt: !13)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "math.py", directory: "/workspace/projects/tritonbench/tritonbench/operators/gdpa")
!61 = !DILocation(line: 107, column: 58, scope: !59, inlinedAt: !13)
!62 = !DILocation(line: 107, column: 80, scope: !59, inlinedAt: !13)
!63 = !DILocation(line: 107, column: 84, scope: !59, inlinedAt: !13)
!64 = !DILocation(line: 107, column: 69, scope: !59, inlinedAt: !13)
!65 = !DILocation(line: 107, column: 63, scope: !59, inlinedAt: !13)
!66 = !DILocation(line: 67, column: 30, scope: !59, inlinedAt: !13)
!67 = !DILocation(line: 48, column: 30, scope: !68, inlinedAt: !13)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "standard.py", directory: "/workspace/projects/triton-openai/python/triton/language")
!70 = !DILocation(line: 48, column: 29, scope: !68, inlinedAt: !13)
!71 = !DILocation(line: 48, column: 20, scope: !68, inlinedAt: !13)
!72 = !DILocation(line: 48, column: 16, scope: !68, inlinedAt: !13)
!73 = !DILocation(line: 67, column: 15, scope: !59, inlinedAt: !13)
!74 = !DILocation(line: 67, column: 35, scope: !59, inlinedAt: !13)
!75 = !DILocation(line: 107, column: 26, scope: !59, inlinedAt: !13)
!76 = !DILocation(line: 107, column: 22, scope: !59, inlinedAt: !13)
!77 = !DILocation(line: 152, column: 13, scope: !12, inlinedAt: !13)
!78 = !DILocation(line: 153, column: 17, scope: !12, inlinedAt: !13)
!79 = !DILocation(line: 163, column: 24, scope: !12, inlinedAt: !13)
!80 = !DILocation(line: 166, column: 27, scope: !12, inlinedAt: !13)
!81 = !DILocation(line: 169, column: 50, scope: !12, inlinedAt: !13)
!82 = !DILocation(line: 449, column: 36, scope: !12, inlinedAt: !13)
!83 = !DILocation(line: 453, column: 32, scope: !12, inlinedAt: !13)
!84 = !DILocation(line: 453, column: 25, scope: !12, inlinedAt: !13)
!85 = !DILocation(line: 532, column: 4, scope: !7)
