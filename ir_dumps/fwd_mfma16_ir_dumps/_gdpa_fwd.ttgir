#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 32], [64, 0]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 16], [0, 8]], warp = [[16, 0], [32, 0]], block = []}>
#loc = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":457:0)
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [4, 1], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 2, maxPhase = 8, order = [0, 1]}>
#shared2 = #ttg.swizzled_shared<{vec = 4, perPhase = 2, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
#loc97 = loc("Q"(#loc))
#loc98 = loc("Q_offsets"(#loc))
#loc99 = loc("K"(#loc))
#loc100 = loc("K_offsets"(#loc))
#loc101 = loc("V"(#loc))
#loc102 = loc("Out"(#loc))
#loc103 = loc("Out_offsets"(#loc))
#loc104 = loc("ad_to_request_offset_ptr"(#loc))
#loc105 = loc("stride_qm"(#loc))
#loc106 = loc("stride_qh"(#loc))
#loc107 = loc("stride_kn"(#loc))
#loc108 = loc("stride_kh"(#loc))
#loc109 = loc("stride_vn"(#loc))
#loc110 = loc("stride_vh"(#loc))
#loc111 = loc("stride_om"(#loc))
#loc112 = loc("stride_oh"(#loc))
#loc113 = loc("Z"(#loc))
#loc114 = loc("H"(#loc))
#loc115 = loc("N_CTX"(#loc))
#loc116 = loc("N_CTX_KV"(#loc))
#loc117 = loc("qk_scale"(#loc))
#loc118 = loc("Q_SHAPE_0"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_gdpa_fwd(%Q: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q"(#loc)), %Q_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Q_offsets"(#loc)), %K: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K"(#loc)), %K_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("K_offsets"(#loc)), %V: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("V"(#loc)), %Out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out"(#loc)), %Out_offsets: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("Out_offsets"(#loc)), %ad_to_request_offset_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("ad_to_request_offset_ptr"(#loc)), %stride_qm: i32 {tt.divisibility = 16 : i32} loc("stride_qm"(#loc)), %stride_qh: i32 {tt.divisibility = 16 : i32} loc("stride_qh"(#loc)), %stride_kn: i32 {tt.divisibility = 16 : i32} loc("stride_kn"(#loc)), %stride_kh: i32 {tt.divisibility = 16 : i32} loc("stride_kh"(#loc)), %stride_vn: i32 {tt.divisibility = 16 : i32} loc("stride_vn"(#loc)), %stride_vh: i32 {tt.divisibility = 16 : i32} loc("stride_vh"(#loc)), %stride_om: i32 {tt.divisibility = 16 : i32} loc("stride_om"(#loc)), %stride_oh: i32 {tt.divisibility = 16 : i32} loc("stride_oh"(#loc)), %Z: i32 {tt.divisibility = 16 : i32} loc("Z"(#loc)), %H: i32 loc("H"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc)), %N_CTX_KV: i32 {tt.divisibility = 16 : i32} loc("N_CTX_KV"(#loc)), %qk_scale: f32 loc("qk_scale"(#loc)), %Q_SHAPE_0: i32 loc("Q_SHAPE_0"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc119)
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<128x32xf32, #mma> loc(#loc119)
    %cst_1 = arith.constant dense<0.797884583> : tensor<128x32xf32, #mma> loc(#loc119)
    %cst_2 = arith.constant dense<4.471500e-02> : tensor<128x32xf32, #mma> loc(#loc119)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_4 = arith.constant dense<2.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<128x32xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc119)
    %c1_i32 = arith.constant 1 : i32 loc(#loc119)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc119)
    %c32_i64 = arith.constant 32 : i64 loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<32x1xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x32xi64, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<64x1xi64, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<0> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<1x64xi32, #linear> loc(#loc119)
    llvm.intr.assume %true : i1 loc(#loc3)
    llvm.intr.assume %true : i1 loc(#loc4)
    llvm.intr.assume %true : i1 loc(#loc5)
    llvm.intr.assume %true : i1 loc(#loc6)
    llvm.intr.assume %true : i1 loc(#loc7)
    llvm.intr.assume %true : i1 loc(#loc8)
    llvm.intr.assume %true : i1 loc(#loc9)
    llvm.intr.assume %true : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc11)
    llvm.intr.assume %true : i1 loc(#loc12)
    llvm.intr.assume %true : i1 loc(#loc13)
    llvm.intr.assume %true : i1 loc(#loc14)
    %off_hz = tt.get_program_id y : i32 loc(#loc120)
    %off_z = arith.divsi %off_hz, %H : i32 loc(#loc121)
    %off_h = arith.remsi %off_hz, %H : i32 loc(#loc122)
    %pid = tt.get_program_id x : i32 loc(#loc123)
    %q_offset = arith.extsi %off_h : i32 to i64 loc(#loc182)
    %q_offset_14 = arith.extsi %stride_qh : i32 to i64 loc(#loc183)
    %q_offset_15 = arith.muli %q_offset, %q_offset_14 : i64 loc(#loc183)
    %kv_offset = arith.extsi %stride_kh : i32 to i64 loc(#loc184)
    %kv_offset_16 = arith.muli %q_offset, %kv_offset : i64 loc(#loc184)
    %begin_q = tt.addptr %Q_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc185)
    %begin_q_17 = tt.load %begin_q : !tt.ptr<i32> loc(#loc186)
    %end_q = tt.addptr %begin_q, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc187)
    %end_q_18 = tt.load %end_q : !tt.ptr<i32> loc(#loc188)
    %qlen = arith.subi %end_q_18, %begin_q_17 : i32 loc(#loc189)
    %qlen_19 = arith.minsi %qlen, %N_CTX : i32 loc(#loc190)
    %begin_k = tt.addptr %K_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc191)
    %begin_k_20 = tt.load %begin_k : !tt.ptr<i32> loc(#loc192)
    %end_k = tt.addptr %begin_k, %c1_i32 : !tt.ptr<i32>, i32 loc(#loc193)
    %end_k_21 = tt.load %end_k : !tt.ptr<i32> loc(#loc194)
    %klen = arith.subi %end_k_21, %begin_k_20 : i32 loc(#loc195)
    %0 = arith.muli %pid, %c128_i32 : i32 loc(#loc138)
    %1 = arith.cmpi slt, %0, %qlen_19 : i32 loc(#loc139)
    scf.if %1 {
      %begin_o = tt.addptr %Out_offsets, %off_z : !tt.ptr<i32>, i32 loc(#loc196)
      %begin_o_22 = tt.load %begin_o : !tt.ptr<i32> loc(#loc197)
      %Q_block_ptr = tt.addptr %Q, %q_offset_15 : !tt.ptr<bf16>, i64 loc(#loc198)
      %Q_block_ptr_23 = arith.muli %begin_q_17, %stride_qm : i32 loc(#loc199)
      %Q_block_ptr_24 = tt.addptr %Q_block_ptr, %Q_block_ptr_23 : !tt.ptr<bf16>, i32 loc(#loc200)
      %Q_block_ptr_25 = arith.extsi %qlen_19 : i32 to i64 loc(#loc201)
      %Q_block_ptr_26 = arith.extsi %stride_qm : i32 to i64 loc(#loc201)
      %Q_block_ptr_27 = arith.extsi %0 : i32 to i64 loc(#loc201)
      %V_block_ptr = tt.addptr %V, %kv_offset_16 : !tt.ptr<bf16>, i64 loc(#loc202)
      %V_block_ptr_28 = arith.muli %begin_k_20, %stride_vn : i32 loc(#loc203)
      %V_block_ptr_29 = tt.addptr %V_block_ptr, %V_block_ptr_28 : !tt.ptr<bf16>, i32 loc(#loc204)
      %V_block_ptr_30 = arith.extsi %klen : i32 to i64 loc(#loc205)
      %V_block_ptr_31 = arith.extsi %stride_vn : i32 to i64 loc(#loc205)
      %K_block_ptr = tt.addptr %K, %kv_offset_16 : !tt.ptr<bf16>, i64 loc(#loc206)
      %K_block_ptr_32 = arith.muli %begin_k_20, %stride_kn : i32 loc(#loc207)
      %K_block_ptr_33 = tt.addptr %K_block_ptr, %K_block_ptr_32 : !tt.ptr<bf16>, i32 loc(#loc208)
      %K_block_ptr_34 = arith.extsi %stride_kn : i32 to i64 loc(#loc209)
      %offs_m = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc210)
      %offs_m_35 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc210)
      %offs_m_36 = tt.splat %0 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc211)
      %offs_m_37 = arith.addi %offs_m_36, %offs_m : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> loc(#loc211)
      %offs_d = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc212)
      %offs_d_38 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc212)
      %o_ptrs = arith.extsi %stride_oh : i32 to i64 loc(#loc213)
      %o_ptrs_39 = arith.muli %q_offset, %o_ptrs : i64 loc(#loc213)
      %o_ptrs_40 = tt.addptr %Out, %o_ptrs_39 : !tt.ptr<bf16>, i64 loc(#loc214)
      %o_ptrs_41 = arith.muli %begin_o_22, %stride_om : i32 loc(#loc215)
      %o_ptrs_42 = tt.addptr %o_ptrs_40, %o_ptrs_41 : !tt.ptr<bf16>, i32 loc(#loc216)
      %o_ptrs_43 = tt.expand_dims %offs_m_37 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc217)
      %o_ptrs_44 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> loc(#loc218)
      %o_ptrs_45 = tt.expand_dims %o_ptrs_44 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #linear}>> -> tensor<1x64xi32, #linear> loc(#loc218)
      %o_ptrs_46 = tt.expand_dims %offs_m {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #linear}>> -> tensor<128x1xi32, #linear> loc(#loc219)
      %o_ptrs_47 = arith.muli %0, %stride_om : i32 loc(#loc219)
      %o_ptrs_48 = tt.splat %stride_om : i32 -> tensor<128x1xi32, #linear> loc(#loc219)
      %o_ptrs_49 = arith.muli %o_ptrs_46, %o_ptrs_48 : tensor<128x1xi32, #linear> loc(#loc219)
      %o_ptrs_50 = tt.broadcast %o_ptrs_49 : tensor<128x1xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc219)
      %o_ptrs_51 = tt.broadcast %o_ptrs_45 : tensor<1x64xi32, #linear> -> tensor<128x64xi32, #linear> loc(#loc219)
      %o_ptrs_52 = arith.addi %o_ptrs_50, %o_ptrs_51 : tensor<128x64xi32, #linear> loc(#loc219)
      %o_ptrs_53 = tt.addptr %o_ptrs_42, %o_ptrs_47 : !tt.ptr<bf16>, i32 loc(#loc219)
      %q = tt.splat %Q_block_ptr_27 : i64 -> tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc220)
      %q_54 = arith.extsi %offs_m_35 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc220)
      %q_55 = arith.addi %q, %q_54 : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc220)
      %q_56 = tt.expand_dims %q_55 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc220)
      %q_57 = arith.extsi %offs_d : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc220)
      %q_58 = arith.extsi %offs_d_38 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc220)
      %q_59 = tt.expand_dims %q_57 {axis = 0 : i32} : tensor<64xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc220)
      %q_60 = tt.expand_dims %q_54 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc220)
      %q_61 = arith.muli %Q_block_ptr_27, %Q_block_ptr_26 : i64 loc(#loc220)
      %q_62 = tt.splat %Q_block_ptr_26 : i64 -> tensor<128x1xi64, #blocked> loc(#loc220)
      %q_63 = arith.muli %q_60, %q_62 : tensor<128x1xi64, #blocked> loc(#loc220)
      %q_64 = tt.broadcast %q_63 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc220)
      %q_65 = tt.broadcast %q_59 : tensor<1x64xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc220)
      %q_66 = arith.addi %q_64, %q_65 : tensor<128x64xi64, #blocked> loc(#loc220)
      %q_67 = tt.addptr %Q_block_ptr_24, %q_61 : !tt.ptr<bf16>, i64 loc(#loc220)
      %q_68 = arith.trunci %q_66 : tensor<128x64xi64, #blocked> to tensor<128x64xi32, #blocked> loc(#loc220)
      %q_69 = arith.cmpi sge, %q_56, %cst_12 : tensor<128x1xi64, #blocked> loc(#loc220)
      %q_70 = tt.splat %Q_block_ptr_25 : i64 -> tensor<128x1xi64, #blocked> loc(#loc220)
      %q_71 = arith.cmpi slt, %q_56, %q_70 : tensor<128x1xi64, #blocked> loc(#loc220)
      %q_72 = arith.andi %q_69, %q_71 : tensor<128x1xi1, #blocked> loc(#loc220)
      %q_73 = tt.broadcast %q_72 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc220)
      %q_74 = arith.cmpi sge, %q_59, %cst_11 : tensor<1x64xi64, #blocked> loc(#loc220)
      %q_75 = arith.cmpi slt, %q_59, %cst_10 : tensor<1x64xi64, #blocked> loc(#loc220)
      %q_76 = arith.andi %q_74, %q_75 : tensor<1x64xi1, #blocked> loc(#loc220)
      %q_77 = tt.broadcast %q_76 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc220)
      %q_78 = arith.andi %q_73, %q_77 : tensor<128x64xi1, #blocked> loc(#loc220)
      %q_79 = amdgpu.buffer_load %q_67[%q_68], %q_78 : tensor<128x64xbf16, #blocked> loc(#loc220)
      %q_80 = ttg.local_alloc %q_79 : (tensor<128x64xbf16, #blocked>) -> !ttg.memdesc<128x64xbf16, #shared, #smem> loc(#loc220)
      %q_81 = ttg.local_load %q_80 : !ttg.memdesc<128x64xbf16, #shared, #smem> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc220)
      %k = tt.expand_dims %q_58 {axis = 1 : i32} : tensor<64xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi64, #blocked1> loc(#loc226)
      %k_82 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc226)
      %k_83 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc226)
      %k_84 = arith.extsi %k_82 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc226)
      %k_85 = arith.extsi %k_83 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc226)
      %k_86 = arith.cmpi sge, %k, %cst_9 : tensor<64x1xi64, #blocked1> loc(#loc226)
      %k_87 = arith.cmpi slt, %k, %cst_8 : tensor<64x1xi64, #blocked1> loc(#loc226)
      %k_88 = arith.andi %k_86, %k_87 : tensor<64x1xi1, #blocked1> loc(#loc226)
      %k_89 = tt.broadcast %k_88 : tensor<64x1xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc226)
      %k_90 = tt.splat %V_block_ptr_30 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc226)
      %p = tt.splat %qk_scale : f32 -> tensor<128x32xf32, #mma> loc(#loc227)
      %v = tt.splat %V_block_ptr_30 : i64 -> tensor<32x1xi64, #blocked> loc(#loc228)
      %v_91 = tt.broadcast %q_76 : tensor<1x64xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc228)
      %V_block_ptr_92:3 = scf.for %V_block_ptr_98 = %c0_i32 to %klen step %c32_i32 iter_args(%arg23 = %cst, %arg24 = %c0_i64, %arg25 = %c0_i64) -> (tensor<128x64xf32, #mma>, i64, i64)  : i32 {
        %k_99 = tt.splat %arg24 : i64 -> tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc226)
        %k_100 = arith.addi %k_99, %k_84 : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc226)
        %k_101 = tt.expand_dims %k_100 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_102 = tt.broadcast %k : tensor<64x1xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc226)
        %k_103 = tt.expand_dims %k_84 {axis = 0 : i32} : tensor<32xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_104 = arith.muli %arg24, %K_block_ptr_34 : i64 loc(#loc226)
        %k_105 = tt.splat %K_block_ptr_34 : i64 -> tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_106 = arith.muli %k_103, %k_105 : tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_107 = tt.broadcast %k_106 : tensor<1x32xi64, #blocked1> -> tensor<64x32xi64, #blocked1> loc(#loc226)
        %k_108 = arith.addi %k_102, %k_107 : tensor<64x32xi64, #blocked1> loc(#loc226)
        %k_109 = tt.addptr %K_block_ptr_33, %k_104 : !tt.ptr<bf16>, i64 loc(#loc226)
        %k_110 = arith.trunci %k_108 : tensor<64x32xi64, #blocked1> to tensor<64x32xi32, #blocked1> loc(#loc226)
        %k_111 = arith.cmpi sge, %k_101, %cst_7 : tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_112 = arith.cmpi slt, %k_101, %k_90 : tensor<1x32xi64, #blocked1> loc(#loc226)
        %k_113 = arith.andi %k_111, %k_112 : tensor<1x32xi1, #blocked1> loc(#loc226)
        %k_114 = tt.broadcast %k_113 : tensor<1x32xi1, #blocked1> -> tensor<64x32xi1, #blocked1> loc(#loc226)
        %k_115 = arith.andi %k_89, %k_114 : tensor<64x32xi1, #blocked1> loc(#loc226)
        %k_116 = amdgpu.buffer_load %k_109[%k_110], %k_115 : tensor<64x32xbf16, #blocked1> loc(#loc226)
        %k_117 = ttg.local_alloc %k_116 : (tensor<64x32xbf16, #blocked1>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc226)
        %k_118 = ttg.local_load %k_117 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc226)
        %qk = tt.dot %q_81, %k_118, %cst_5 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xf32, #mma> loc(#loc230)
        %p_119 = arith.mulf %qk, %cst_0 : tensor<128x32xf32, #mma> loc(#loc238)
        %p_120 = arith.mulf %qk, %cst_1 : tensor<128x32xf32, #mma> loc(#loc239)
        %p_121 = arith.mulf %qk, %cst_2 : tensor<128x32xf32, #mma> loc(#loc240)
        %p_122 = arith.mulf %p_121, %qk : tensor<128x32xf32, #mma> loc(#loc241)
        %p_123 = arith.addf %p_122, %cst_3 : tensor<128x32xf32, #mma> loc(#loc242)
        %p_124 = arith.mulf %p_120, %p_123 : tensor<128x32xf32, #mma> loc(#loc243)
        %p_125 = arith.mulf %p_124, %cst_4 : tensor<128x32xf32, #mma> loc(#loc248)
        %p_126 = arith.subf %cst_5, %p_125 : tensor<128x32xf32, #mma> loc(#loc252)
        %p_127 = math.exp %p_126 : tensor<128x32xf32, #mma> loc(#loc253)
        %p_128 = arith.addf %p_127, %cst_3 : tensor<128x32xf32, #mma> loc(#loc254)
        %p_129 = arith.divf %cst_3, %p_128 : tensor<128x32xf32, #mma> loc(#loc255)
        %p_130 = arith.mulf %p_129, %cst_4 : tensor<128x32xf32, #mma> loc(#loc250)
        %p_131 = arith.subf %p_130, %cst_3 : tensor<128x32xf32, #mma> loc(#loc251)
        %p_132 = arith.addf %p_131, %cst_3 : tensor<128x32xf32, #mma> loc(#loc245)
        %p_133 = arith.mulf %p_119, %p_132 : tensor<128x32xf32, #mma> loc(#loc246)
        %p_134 = arith.mulf %p_133, %p : tensor<128x32xf32, #mma> loc(#loc227)
        %p_135 = arith.truncf %p_134 : tensor<128x32xf32, #mma> to tensor<128x32xbf16, #mma> loc(#loc232)
        %v_136 = tt.splat %arg25 : i64 -> tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc228)
        %v_137 = arith.addi %v_136, %k_85 : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc228)
        %v_138 = tt.expand_dims %v_137 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc228)
        %v_139 = tt.expand_dims %k_85 {axis = 1 : i32} : tensor<32xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi64, #blocked> loc(#loc228)
        %v_140 = arith.muli %arg25, %V_block_ptr_31 : i64 loc(#loc228)
        %v_141 = tt.splat %V_block_ptr_31 : i64 -> tensor<32x1xi64, #blocked> loc(#loc228)
        %v_142 = arith.muli %v_139, %v_141 : tensor<32x1xi64, #blocked> loc(#loc228)
        %v_143 = tt.broadcast %v_142 : tensor<32x1xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc228)
        %v_144 = tt.broadcast %q_59 : tensor<1x64xi64, #blocked> -> tensor<32x64xi64, #blocked> loc(#loc228)
        %v_145 = arith.addi %v_143, %v_144 : tensor<32x64xi64, #blocked> loc(#loc228)
        %v_146 = tt.addptr %V_block_ptr_29, %v_140 : !tt.ptr<bf16>, i64 loc(#loc228)
        %v_147 = arith.trunci %v_145 : tensor<32x64xi64, #blocked> to tensor<32x64xi32, #blocked> loc(#loc228)
        %v_148 = arith.cmpi sge, %v_138, %cst_6 : tensor<32x1xi64, #blocked> loc(#loc228)
        %v_149 = arith.cmpi slt, %v_138, %v : tensor<32x1xi64, #blocked> loc(#loc228)
        %v_150 = arith.andi %v_148, %v_149 : tensor<32x1xi1, #blocked> loc(#loc228)
        %v_151 = tt.broadcast %v_150 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc228)
        %v_152 = arith.andi %v_151, %v_91 : tensor<32x64xi1, #blocked> loc(#loc228)
        %v_153 = amdgpu.buffer_load %v_146[%v_147], %v_152 : tensor<32x64xbf16, #blocked> loc(#loc228)
        %p_154 = ttg.convert_layout %p_135 : tensor<128x32xbf16, #mma> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc232)
        %v_155 = ttg.local_alloc %v_153 : (tensor<32x64xbf16, #blocked>) -> !ttg.memdesc<32x64xbf16, #shared2, #smem> loc(#loc228)
        %v_156 = ttg.local_load %v_155 : !ttg.memdesc<32x64xbf16, #shared2, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc228)
        %acc = tt.dot %p_154, %v_156, %arg23 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x64xf32, #mma> loc(#loc233)
        %V_block_ptr_157 = arith.addi %arg25, %c32_i64 : i64 loc(#loc234)
        %K_block_ptr_158 = arith.addi %arg24, %c32_i64 : i64 loc(#loc235)
        scf.yield %acc, %K_block_ptr_158, %V_block_ptr_157 : tensor<128x64xf32, #mma>, i64, i64 loc(#loc236)
      } loc(#loc237)
      %o_mask = tt.splat %qlen_19 : i32 -> tensor<128x1xi32, #linear> loc(#loc223)
      %o_mask_93 = arith.cmpi slt, %o_ptrs_43, %o_mask : tensor<128x1xi32, #linear> loc(#loc223)
      %o_mask_94 = arith.cmpi slt, %o_ptrs_45, %cst_13 : tensor<1x64xi32, #linear> loc(#loc224)
      %o_mask_95 = tt.broadcast %o_mask_93 : tensor<128x1xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc225)
      %o_mask_96 = tt.broadcast %o_mask_94 : tensor<1x64xi1, #linear> -> tensor<128x64xi1, #linear> loc(#loc225)
      %o_mask_97 = arith.andi %o_mask_95, %o_mask_96 : tensor<128x64xi1, #linear> loc(#loc225)
      %2 = arith.truncf %V_block_ptr_92#0 : tensor<128x64xf32, #mma> to tensor<128x64xbf16, #mma> loc(#loc180)
      %3 = ttg.convert_layout %2 : tensor<128x64xbf16, #mma> -> tensor<128x64xbf16, #linear> loc(#loc180)
      amdgpu.buffer_store %3, %o_ptrs_53[%o_ptrs_52], %o_mask_97 stride = %stride_om : tensor<128x64xbf16, #linear> loc(#loc181)
    } loc(#loc140)
    tt.return loc(#loc96)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":578:8)
#loc3 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":504:14)
#loc4 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":505:14)
#loc5 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":506:14)
#loc6 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":507:14)
#loc7 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":508:14)
#loc8 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":509:14)
#loc9 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":510:14)
#loc10 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":511:14)
#loc11 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":512:14)
#loc12 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":513:14)
#loc13 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":514:14)
#loc14 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":515:14)
#loc15 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":517:27)
#loc16 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":521:26)
#loc17 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":528:21)
#loc18 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":530:24)
#loc19 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":301:24)
#loc20 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":301:36)
#loc21 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":302:40)
#loc22 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":304:34)
#loc23 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":304:22)
#loc24 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:42)
#loc25 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":305:20)
#loc26 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":307:19)
#loc27 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":308:28)
#loc28 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":322:42)
#loc29 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":322:30)
#loc30 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:48)
#loc31 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":323:28)
#loc32 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":324:23)
#loc33 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":329:17)
#loc34 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":329:27)
#loc35 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":329:7)
#loc36 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:40)
#loc37 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":330:26)
#loc38 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":342:25)
#loc39 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":342:46)
#loc40 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":342:36)
#loc41 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":347:16)
#loc42 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":353:25)
#loc43 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":353:47)
#loc44 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":353:37)
#loc45 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":358:16)
#loc46 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":361:25)
#loc47 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":361:47)
#loc48 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":361:37)
#loc49 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":366:16)
#loc50 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":390:50)
#loc51 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":390:37)
#loc52 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":392:30)
#loc53 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":396:35)
#loc54 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":396:14)
#loc55 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:24)
#loc56 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":397:14)
#loc57 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:22)
#loc58 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:52)
#loc59 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":398:15)
#loc60 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":412:24)
#loc61 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":131:24)
#loc62 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":445:12)
#loc63 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":152:13)
#loc64 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":163:24)
#loc65 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":119:33)
#loc66 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":134:23)
#loc67 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:15)
#loc68 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":147:26)
#loc69 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:58)
#loc70 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:80)
#loc71 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:84)
#loc72 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:69)
#loc73 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:63)
#loc74 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:30)
#loc75 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":86:16)
#loc76 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:43)
#loc77 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:30)
#loc78 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:26)
#loc79 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:29)
#loc80 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:20)
#loc81 = loc("/workspace/projects/triton-openai/python/triton/language/standard.py":48:16)
#loc82 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:15)
#loc83 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":67:35)
#loc84 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:26)
#loc85 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/math.py":107:22)
#loc86 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":153:17)
#loc87 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":166:27)
#loc88 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":169:50)
#loc89 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":170:50)
#loc90 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":168:8)
#loc91 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":449:36)
#loc92 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":449:63)
#loc93 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":449:45)
#loc94 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":453:32)
#loc95 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":453:25)
#loc96 = loc("/workspace/projects/tritonbench/tritonbench/operators/gdpa/gdpa.py":532:4)
#loc119 = loc(callsite(#loc1 at #loc2))
#loc120 = loc("off_hz"(#loc15))
#loc121 = loc("off_z"(#loc16))
#loc122 = loc("off_h"(#loc17))
#loc123 = loc("pid"(#loc18))
#loc124 = loc("q_offset"(#loc19))
#loc125 = loc("q_offset"(#loc20))
#loc126 = loc("kv_offset"(#loc21))
#loc127 = loc("begin_q"(#loc22))
#loc128 = loc("begin_q"(#loc23))
#loc129 = loc("end_q"(#loc24))
#loc130 = loc("end_q"(#loc25))
#loc131 = loc("qlen"(#loc26))
#loc132 = loc("qlen"(#loc27))
#loc133 = loc("begin_k"(#loc28))
#loc134 = loc("begin_k"(#loc29))
#loc135 = loc("end_k"(#loc30))
#loc136 = loc("end_k"(#loc31))
#loc137 = loc("klen"(#loc32))
#loc138 = loc(callsite(#loc33 at #loc2))
#loc139 = loc(callsite(#loc34 at #loc2))
#loc140 = loc(callsite(#loc35 at #loc2))
#loc141 = loc("begin_o"(#loc36))
#loc142 = loc("begin_o"(#loc37))
#loc143 = loc("Q_block_ptr"(#loc38))
#loc144 = loc("Q_block_ptr"(#loc39))
#loc145 = loc("Q_block_ptr"(#loc40))
#loc146 = loc("Q_block_ptr"(#loc41))
#loc147 = loc("V_block_ptr"(#loc42))
#loc148 = loc("V_block_ptr"(#loc43))
#loc149 = loc("V_block_ptr"(#loc44))
#loc150 = loc("V_block_ptr"(#loc45))
#loc151 = loc("K_block_ptr"(#loc46))
#loc152 = loc("K_block_ptr"(#loc47))
#loc153 = loc("K_block_ptr"(#loc48))
#loc154 = loc("K_block_ptr"(#loc49))
#loc155 = loc("offs_m"(#loc50))
#loc156 = loc("offs_m"(#loc51))
#loc157 = loc("offs_d"(#loc52))
#loc158 = loc("o_ptrs"(#loc53))
#loc159 = loc("o_ptrs"(#loc54))
#loc160 = loc("o_ptrs"(#loc55))
#loc161 = loc("o_ptrs"(#loc56))
#loc162 = loc("o_ptrs"(#loc57))
#loc163 = loc("o_ptrs"(#loc58))
#loc164 = loc("o_ptrs"(#loc59))
#loc165 = loc("q"(#loc60))
#loc166 = loc("k"(#loc61))
#loc167 = loc("acc"(#loc62))
#loc168 = loc("p"(#loc63))
#loc169 = loc("v"(#loc64))
#loc170 = loc("acc"(#loc65))
#loc171 = loc("qk"(#loc66))
#loc172 = loc("p"(#loc68))
#loc173 = loc("p"(#loc86))
#loc174 = loc("acc"(#loc87))
#loc175 = loc("V_block_ptr"(#loc88))
#loc176 = loc("K_block_ptr"(#loc89))
#loc177 = loc("o_mask"(#loc91))
#loc178 = loc("o_mask"(#loc92))
#loc179 = loc("o_mask"(#loc93))
#loc180 = loc(callsite(#loc94 at #loc2))
#loc181 = loc(callsite(#loc95 at #loc2))
#loc182 = loc(callsite(#loc124 at #loc2))
#loc183 = loc(callsite(#loc125 at #loc2))
#loc184 = loc(callsite(#loc126 at #loc2))
#loc185 = loc(callsite(#loc127 at #loc2))
#loc186 = loc(callsite(#loc128 at #loc2))
#loc187 = loc(callsite(#loc129 at #loc2))
#loc188 = loc(callsite(#loc130 at #loc2))
#loc189 = loc(callsite(#loc131 at #loc2))
#loc190 = loc(callsite(#loc132 at #loc2))
#loc191 = loc(callsite(#loc133 at #loc2))
#loc192 = loc(callsite(#loc134 at #loc2))
#loc193 = loc(callsite(#loc135 at #loc2))
#loc194 = loc(callsite(#loc136 at #loc2))
#loc195 = loc(callsite(#loc137 at #loc2))
#loc196 = loc(callsite(#loc141 at #loc2))
#loc197 = loc(callsite(#loc142 at #loc2))
#loc198 = loc(callsite(#loc143 at #loc2))
#loc199 = loc(callsite(#loc144 at #loc2))
#loc200 = loc(callsite(#loc145 at #loc2))
#loc201 = loc(callsite(#loc146 at #loc2))
#loc202 = loc(callsite(#loc147 at #loc2))
#loc203 = loc(callsite(#loc148 at #loc2))
#loc204 = loc(callsite(#loc149 at #loc2))
#loc205 = loc(callsite(#loc150 at #loc2))
#loc206 = loc(callsite(#loc151 at #loc2))
#loc207 = loc(callsite(#loc152 at #loc2))
#loc208 = loc(callsite(#loc153 at #loc2))
#loc209 = loc(callsite(#loc154 at #loc2))
#loc210 = loc(callsite(#loc155 at #loc2))
#loc211 = loc(callsite(#loc156 at #loc2))
#loc212 = loc(callsite(#loc157 at #loc2))
#loc213 = loc(callsite(#loc158 at #loc2))
#loc214 = loc(callsite(#loc159 at #loc2))
#loc215 = loc(callsite(#loc160 at #loc2))
#loc216 = loc(callsite(#loc161 at #loc2))
#loc217 = loc(callsite(#loc162 at #loc2))
#loc218 = loc(callsite(#loc163 at #loc2))
#loc219 = loc(callsite(#loc164 at #loc2))
#loc220 = loc(callsite(#loc165 at #loc2))
#loc221 = loc(callsite(#loc167 at #loc2))
#loc222 = loc("K_block_ptr"(#loc170))
#loc223 = loc(callsite(#loc177 at #loc2))
#loc224 = loc(callsite(#loc178 at #loc2))
#loc225 = loc(callsite(#loc179 at #loc2))
#loc226 = loc(callsite(#loc166 at #loc221))
#loc227 = loc(callsite(#loc168 at #loc221))
#loc228 = loc(callsite(#loc169 at #loc221))
#loc229 = loc("V_block_ptr"(#loc222))
#loc230 = loc(callsite(#loc171 at #loc221))
#loc231 = loc(callsite(#loc172 at #loc221))
#loc232 = loc(callsite(#loc173 at #loc221))
#loc233 = loc(callsite(#loc174 at #loc221))
#loc234 = loc(callsite(#loc175 at #loc221))
#loc235 = loc(callsite(#loc176 at #loc221))
#loc236 = loc(callsite(#loc90 at #loc221))
#loc237 = loc(callsite(#loc229 at #loc221))
#loc238 = loc(callsite(#loc67 at #loc231))
#loc239 = loc(callsite(#loc69 at #loc231))
#loc240 = loc(callsite(#loc70 at #loc231))
#loc241 = loc(callsite(#loc71 at #loc231))
#loc242 = loc(callsite(#loc72 at #loc231))
#loc243 = loc(callsite(#loc73 at #loc231))
#loc244 = loc(callsite(#loc76 at #loc231))
#loc245 = loc(callsite(#loc84 at #loc231))
#loc246 = loc(callsite(#loc85 at #loc231))
#loc247 = loc(callsite(#loc75 at #loc244))
#loc248 = loc(callsite(#loc74 at #loc247))
#loc249 = loc(callsite(#loc78 at #loc247))
#loc250 = loc(callsite(#loc82 at #loc247))
#loc251 = loc(callsite(#loc83 at #loc247))
#loc252 = loc(callsite(#loc77 at #loc249))
#loc253 = loc(callsite(#loc79 at #loc249))
#loc254 = loc(callsite(#loc80 at #loc249))
#loc255 = loc(callsite(#loc81 at #loc249))
